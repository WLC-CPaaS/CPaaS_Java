/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceAPIResponse;
import org.openapitools.client.model.ServiceDocsCallQueueGetAll;
import org.openapitools.client.model.ServiceDocsCallQueueGetRoles;
import org.openapitools.client.model.ServiceDocsCallQueueGetSingle;
import org.openapitools.client.model.ServiceDocsCallQueueGetSingleStatus;
import org.openapitools.client.model.ServiceVOIPCallQueueAddEditData;
import org.openapitools.client.model.ServiceVOIPCallQueueRoleAssignData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallQueueManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallQueueManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallQueueManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDCallqueueGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueGetCall(String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callqueue"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallqueueGetValidateBeforeCall(String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueGet(Async)");
        }

        return v1AccountAccountIDCallqueueGetCall(accountID, _callback);

    }

    /**
     * Get Call Queues
     * Retrieve call queue details for an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ServiceDocsCallQueueGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueGetAll v1AccountAccountIDCallqueueGet(String accountID) throws ApiException {
        ApiResponse<ServiceDocsCallQueueGetAll> localVarResp = v1AccountAccountIDCallqueueGetWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Get Call Queues
     * Retrieve call queue details for an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueGetAll> v1AccountAccountIDCallqueueGetWithHttpInfo(String accountID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueGetValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Queues (asynchronously)
     * Retrieve call queue details for an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueGetAsync(String accountID, final ApiCallback<ServiceDocsCallQueueGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueGetValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallqueuePost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueuePostCall(String accountID, ServiceVOIPCallQueueAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callqueue"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallqueuePostValidateBeforeCall(String accountID, ServiceVOIPCallQueueAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueuePost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueuePost(Async)");
        }

        return v1AccountAccountIDCallqueuePostCall(accountID, reqBody, _callback);

    }

    /**
     * Create Call Queue
     * Set up a call queue in an account for specific inbound calls.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsCallQueueGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueuePost(String accountID, ServiceVOIPCallQueueAddEditData reqBody) throws ApiException {
        ApiResponse<ServiceDocsCallQueueGetSingle> localVarResp = v1AccountAccountIDCallqueuePostWithHttpInfo(accountID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Create Call Queue
     * Set up a call queue in an account for specific inbound calls.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueGetSingle> v1AccountAccountIDCallqueuePostWithHttpInfo(String accountID, ServiceVOIPCallQueueAddEditData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallqueuePostValidateBeforeCall(accountID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Call Queue (asynchronously)
     * Set up a call queue in an account for specific inbound calls.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueuePostAsync(String accountID, ServiceVOIPCallQueueAddEditData reqBody, final ApiCallback<ServiceDocsCallQueueGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallqueuePostValidateBeforeCall(accountID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallqueueQueueIDDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDDeleteCall(String accountID, String queueID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "queueID" + "}", localVarApiClient.escapeString(queueID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallqueueQueueIDDeleteValidateBeforeCall(String accountID, String queueID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDDelete(Async)");
        }

        // verify the required parameter 'queueID' is set
        if (queueID == null) {
            throw new ApiException("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDDelete(Async)");
        }

        return v1AccountAccountIDCallqueueQueueIDDeleteCall(accountID, queueID, _callback);

    }

    /**
     * Delete Call Queue
     * Remove the call queue from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @return ServiceDocsCallQueueGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDDelete(String accountID, String queueID) throws ApiException {
        ApiResponse<ServiceDocsCallQueueGetSingle> localVarResp = v1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfo(accountID, queueID);
        return localVarResp.getData();
    }

    /**
     * Delete Call Queue
     * Remove the call queue from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueGetSingle> v1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfo(String accountID, String queueID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDDeleteValidateBeforeCall(accountID, queueID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Call Queue (asynchronously)
     * Remove the call queue from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDDeleteAsync(String accountID, String queueID, final ApiCallback<ServiceDocsCallQueueGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDDeleteValidateBeforeCall(accountID, queueID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallqueueQueueIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDGetCall(String accountID, String queueID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "queueID" + "}", localVarApiClient.escapeString(queueID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallqueueQueueIDGetValidateBeforeCall(String accountID, String queueID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDGet(Async)");
        }

        // verify the required parameter 'queueID' is set
        if (queueID == null) {
            throw new ApiException("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDGet(Async)");
        }

        return v1AccountAccountIDCallqueueQueueIDGetCall(accountID, queueID, _callback);

    }

    /**
     * Get Call Queue Details
     * Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @return ServiceDocsCallQueueGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDGet(String accountID, String queueID) throws ApiException {
        ApiResponse<ServiceDocsCallQueueGetSingle> localVarResp = v1AccountAccountIDCallqueueQueueIDGetWithHttpInfo(accountID, queueID);
        return localVarResp.getData();
    }

    /**
     * Get Call Queue Details
     * Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueGetSingle> v1AccountAccountIDCallqueueQueueIDGetWithHttpInfo(String accountID, String queueID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDGetValidateBeforeCall(accountID, queueID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Queue Details (asynchronously)
     * Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDGetAsync(String accountID, String queueID, final ApiCallback<ServiceDocsCallQueueGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDGetValidateBeforeCall(accountID, queueID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallqueueQueueIDPut
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDPutCall(String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "queueID" + "}", localVarApiClient.escapeString(queueID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallqueueQueueIDPutValidateBeforeCall(String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDPut(Async)");
        }

        // verify the required parameter 'queueID' is set
        if (queueID == null) {
            throw new ApiException("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDPut(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueueQueueIDPut(Async)");
        }

        return v1AccountAccountIDCallqueueQueueIDPutCall(accountID, queueID, reqBody, _callback);

    }

    /**
     * Update Call Queue
     * Update the metadata mentioned above.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsCallQueueGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDPut(String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody) throws ApiException {
        ApiResponse<ServiceDocsCallQueueGetSingle> localVarResp = v1AccountAccountIDCallqueueQueueIDPutWithHttpInfo(accountID, queueID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Update Call Queue
     * Update the metadata mentioned above.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueGetSingle> v1AccountAccountIDCallqueueQueueIDPutWithHttpInfo(String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDPutValidateBeforeCall(accountID, queueID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Call Queue (asynchronously)
     * Update the metadata mentioned above.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDPutAsync(String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody, final ApiCallback<ServiceDocsCallQueueGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDPutValidateBeforeCall(accountID, queueID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallqueueQueueIDStatusGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDStatusGetCall(String accountID, String queueID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}/status"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "queueID" + "}", localVarApiClient.escapeString(queueID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallqueueQueueIDStatusGetValidateBeforeCall(String accountID, String queueID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet(Async)");
        }

        // verify the required parameter 'queueID' is set
        if (queueID == null) {
            throw new ApiException("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet(Async)");
        }

        return v1AccountAccountIDCallqueueQueueIDStatusGetCall(accountID, queueID, _callback);

    }

    /**
     * Get Call Queue Status
     * Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @return ServiceDocsCallQueueGetSingleStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueGetSingleStatus v1AccountAccountIDCallqueueQueueIDStatusGet(String accountID, String queueID) throws ApiException {
        ApiResponse<ServiceDocsCallQueueGetSingleStatus> localVarResp = v1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfo(accountID, queueID);
        return localVarResp.getData();
    }

    /**
     * Get Call Queue Status
     * Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueGetSingleStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueGetSingleStatus> v1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfo(String accountID, String queueID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDStatusGetValidateBeforeCall(accountID, queueID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingleStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Queue Status (asynchronously)
     * Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallqueueQueueIDStatusGetAsync(String accountID, String queueID, final ApiCallback<ServiceDocsCallQueueGetSingleStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallqueueQueueIDStatusGetValidateBeforeCall(accountID, queueID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetSingleStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDQueuerolesGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuerolesGetCall(String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/queueroles"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDQueuerolesGetValidateBeforeCall(String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesGet(Async)");
        }

        return v1AccountAccountIDQueuerolesGetCall(accountID, _callback);

    }

    /**
     * Get Queue Roles of Account
     * Obtain data about each queue role in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ServiceDocsCallQueueGetRoles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueGetRoles v1AccountAccountIDQueuerolesGet(String accountID) throws ApiException {
        ApiResponse<ServiceDocsCallQueueGetRoles> localVarResp = v1AccountAccountIDQueuerolesGetWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Get Queue Roles of Account
     * Obtain data about each queue role in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueGetRoles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueGetRoles> v1AccountAccountIDQueuerolesGetWithHttpInfo(String accountID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDQueuerolesGetValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetRoles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Queue Roles of Account (asynchronously)
     * Obtain data about each queue role in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuerolesGetAsync(String accountID, final ApiCallback<ServiceDocsCallQueueGetRoles> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDQueuerolesGetValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueGetRoles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDQueuerolesQueueIDPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuerolesQueueIDPostCall(String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/queueroles/{queueID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "queueID" + "}", localVarApiClient.escapeString(queueID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDQueuerolesQueueIDPostValidateBeforeCall(String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesQueueIDPost(Async)");
        }

        // verify the required parameter 'queueID' is set
        if (queueID == null) {
            throw new ApiException("Missing the required parameter 'queueID' when calling v1AccountAccountIDQueuerolesQueueIDPost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuerolesQueueIDPost(Async)");
        }

        return v1AccountAccountIDQueuerolesQueueIDPostCall(accountID, queueID, reqBody, _callback);

    }

    /**
     * Assign Queue Role to Call Queue
     * Assign roles to members in a call queue.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponse v1AccountAccountIDQueuerolesQueueIDPost(String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody) throws ApiException {
        ApiResponse<ServiceAPIResponse> localVarResp = v1AccountAccountIDQueuerolesQueueIDPostWithHttpInfo(accountID, queueID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Assign Queue Role to Call Queue
     * Assign roles to members in a call queue.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponse> v1AccountAccountIDQueuerolesQueueIDPostWithHttpInfo(String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDQueuerolesQueueIDPostValidateBeforeCall(accountID, queueID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Queue Role to Call Queue (asynchronously)
     * Assign roles to members in a call queue.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param queueID Queue ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuerolesQueueIDPostAsync(String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody, final ApiCallback<ServiceAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDQueuerolesQueueIDPostValidateBeforeCall(accountID, queueID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
