/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceCallflowAddEditData;
import org.openapitools.client.model.ServiceDocsCallflowGetAll;
import org.openapitools.client.model.ServiceDocsCallflowGetSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallflowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallflowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallflowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDCallflowCallflowIDDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID callflow ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowCallflowIDDeleteCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callflow/{callflowID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "callflowID" + "}", localVarApiClient.escapeString(callflowID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallflowCallflowIDDeleteValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallflowCallflowIDDelete(Async)");
        }

        // verify the required parameter 'callflowID' is set
        if (callflowID == null) {
            throw new ApiException("Missing the required parameter 'callflowID' when calling v1AccountAccountIDCallflowCallflowIDDelete(Async)");
        }

        return v1AccountAccountIDCallflowCallflowIDDeleteCall(accountID, callflowID, _callback);

    }

    /**
     * Delete Call Group
     * Delete a callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID callflow ID, 32 alpha numeric (required)
     * @return ServiceDocsCallflowGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallflowGetSingle v1AccountAccountIDCallflowCallflowIDDelete(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID) throws ApiException {
        ApiResponse<ServiceDocsCallflowGetSingle> localVarResp = v1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfo(accountID, callflowID);
        return localVarResp.getData();
    }

    /**
     * Delete Call Group
     * Delete a callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID callflow ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallflowGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallflowGetSingle> v1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallflowCallflowIDDeleteValidateBeforeCall(accountID, callflowID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Call Group (asynchronously)
     * Delete a callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID callflow ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowCallflowIDDeleteAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, final ApiCallback<ServiceDocsCallflowGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallflowCallflowIDDeleteValidateBeforeCall(accountID, callflowID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallflowCallflowIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowCallflowIDGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callflow/{callflowID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "callflowID" + "}", localVarApiClient.escapeString(callflowID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallflowCallflowIDGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallflowCallflowIDGet(Async)");
        }

        // verify the required parameter 'callflowID' is set
        if (callflowID == null) {
            throw new ApiException("Missing the required parameter 'callflowID' when calling v1AccountAccountIDCallflowCallflowIDGet(Async)");
        }

        return v1AccountAccountIDCallflowCallflowIDGetCall(accountID, callflowID, _callback);

    }

    /**
     * Get Call Group Details
     * Get the details for a single callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @return ServiceDocsCallflowGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallflowGetSingle v1AccountAccountIDCallflowCallflowIDGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID) throws ApiException {
        ApiResponse<ServiceDocsCallflowGetSingle> localVarResp = v1AccountAccountIDCallflowCallflowIDGetWithHttpInfo(accountID, callflowID);
        return localVarResp.getData();
    }

    /**
     * Get Call Group Details
     * Get the details for a single callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallflowGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallflowGetSingle> v1AccountAccountIDCallflowCallflowIDGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallflowCallflowIDGetValidateBeforeCall(accountID, callflowID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Group Details (asynchronously)
     * Get the details for a single callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowCallflowIDGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, final ApiCallback<ServiceDocsCallflowGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallflowCallflowIDGetValidateBeforeCall(accountID, callflowID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallflowCallflowIDPut
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowCallflowIDPutCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, @javax.annotation.Nonnull ServiceCallflowAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callflow/{callflowID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "callflowID" + "}", localVarApiClient.escapeString(callflowID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallflowCallflowIDPutValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, @javax.annotation.Nonnull ServiceCallflowAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallflowCallflowIDPut(Async)");
        }

        // verify the required parameter 'callflowID' is set
        if (callflowID == null) {
            throw new ApiException("Missing the required parameter 'callflowID' when calling v1AccountAccountIDCallflowCallflowIDPut(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallflowCallflowIDPut(Async)");
        }

        return v1AccountAccountIDCallflowCallflowIDPutCall(accountID, callflowID, reqBody, _callback);

    }

    /**
     * Update Call Group
     * Update the details for a single callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsCallflowGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallflowGetSingle v1AccountAccountIDCallflowCallflowIDPut(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, @javax.annotation.Nonnull ServiceCallflowAddEditData reqBody) throws ApiException {
        ApiResponse<ServiceDocsCallflowGetSingle> localVarResp = v1AccountAccountIDCallflowCallflowIDPutWithHttpInfo(accountID, callflowID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Update Call Group
     * Update the details for a single callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsCallflowGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallflowGetSingle> v1AccountAccountIDCallflowCallflowIDPutWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, @javax.annotation.Nonnull ServiceCallflowAddEditData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallflowCallflowIDPutValidateBeforeCall(accountID, callflowID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Call Group (asynchronously)
     * Update the details for a single callflow in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param callflowID Callflow ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowCallflowIDPutAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String callflowID, @javax.annotation.Nonnull ServiceCallflowAddEditData reqBody, final ApiCallback<ServiceDocsCallflowGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallflowCallflowIDPutValidateBeforeCall(accountID, callflowID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallflowGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallflowGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallflowGet(Async)");
        }

        return v1AccountAccountIDCallflowGetCall(accountID, startKey, pageSize, _callback);

    }

    /**
     * Get Callflow List
     * Permit a user to view the callflow details in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ServiceDocsCallflowGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallflowGetAll v1AccountAccountIDCallflowGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsCallflowGetAll> localVarResp = v1AccountAccountIDCallflowGetWithHttpInfo(accountID, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Callflow List
     * Permit a user to view the callflow details in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ApiResponse&lt;ServiceDocsCallflowGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallflowGetAll> v1AccountAccountIDCallflowGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallflowGetValidateBeforeCall(accountID, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Callflow List (asynchronously)
     * Permit a user to view the callflow details in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback<ServiceDocsCallflowGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallflowGetValidateBeforeCall(accountID, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCallflowPost
     * @param accountID Account ID, 32 alpha-numeric (required)
     * @param request Call flow configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceCallflowAddEditData request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/callflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCallflowPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceCallflowAddEditData request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallflowPost(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling v1AccountAccountIDCallflowPost(Async)");
        }

        return v1AccountAccountIDCallflowPostCall(accountID, request, _callback);

    }

    /**
     * Create Call Group
     * Create instructions for routing a call to a user or system.
     * @param accountID Account ID, 32 alpha-numeric (required)
     * @param request Call flow configuration (required)
     * @return ServiceDocsCallflowGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallflowGetSingle v1AccountAccountIDCallflowPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceCallflowAddEditData request) throws ApiException {
        ApiResponse<ServiceDocsCallflowGetSingle> localVarResp = v1AccountAccountIDCallflowPostWithHttpInfo(accountID, request);
        return localVarResp.getData();
    }

    /**
     * Create Call Group
     * Create instructions for routing a call to a user or system.
     * @param accountID Account ID, 32 alpha-numeric (required)
     * @param request Call flow configuration (required)
     * @return ApiResponse&lt;ServiceDocsCallflowGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallflowGetSingle> v1AccountAccountIDCallflowPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceCallflowAddEditData request) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCallflowPostValidateBeforeCall(accountID, request, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Call Group (asynchronously)
     * Create instructions for routing a call to a user or system.
     * @param accountID Account ID, 32 alpha-numeric (required)
     * @param request Call flow configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCallflowPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceCallflowAddEditData request, final ApiCallback<ServiceDocsCallflowGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCallflowPostValidateBeforeCall(accountID, request, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallflowGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
