/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceCampaignTagDetagPhonenumbers;
import org.openapitools.client.model.ServiceDocsCampaignImportOutput;
import org.openapitools.client.model.ServiceDocsCampaignImportedGetAllOutput;
import org.openapitools.client.model.ServiceDocsCampaignPhoneNumberOutput;
import org.openapitools.client.model.ServiceDocsCampaignTagDetagPhonenumbersOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1SmsAccountAccountIDCampaignCampaignIDImportGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDImportGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/import"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "campaignID" + "}", localVarApiClient.escapeString(campaignID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDImportGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet(Async)");
        }

        // verify the required parameter 'campaignID' is set
        if (campaignID == null) {
            throw new ApiException("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet(Async)");
        }

        return v1SmsAccountAccountIDCampaignCampaignIDImportGetCall(accountID, campaignID, _callback);

    }

    /**
     * 
     * Get details about a single imported campaign in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @return ServiceDocsCampaignImportOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCampaignImportOutput v1SmsAccountAccountIDCampaignCampaignIDImportGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID) throws ApiException {
        ApiResponse<ServiceDocsCampaignImportOutput> localVarResp = v1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfo(accountID, campaignID);
        return localVarResp.getData();
    }

    /**
     * 
     * Get details about a single imported campaign in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @return ApiResponse&lt;ServiceDocsCampaignImportOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCampaignImportOutput> v1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID) throws ApiException {
        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDImportGetValidateBeforeCall(accountID, campaignID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignImportOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get details about a single imported campaign in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDImportGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, final ApiCallback<ServiceDocsCampaignImportOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDImportGetValidateBeforeCall(accountID, campaignID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignImportOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1SmsAccountAccountIDCampaignCampaignIDImportPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDImportPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/import"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "campaignID" + "}", localVarApiClient.escapeString(campaignID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDImportPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost(Async)");
        }

        // verify the required parameter 'campaignID' is set
        if (campaignID == null) {
            throw new ApiException("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost(Async)");
        }

        return v1SmsAccountAccountIDCampaignCampaignIDImportPostCall(accountID, campaignID, _callback);

    }

    /**
     * 
     * Import campaign
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @return ServiceDocsCampaignImportOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCampaignImportOutput v1SmsAccountAccountIDCampaignCampaignIDImportPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID) throws ApiException {
        ApiResponse<ServiceDocsCampaignImportOutput> localVarResp = v1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfo(accountID, campaignID);
        return localVarResp.getData();
    }

    /**
     * 
     * Import campaign
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @return ApiResponse&lt;ServiceDocsCampaignImportOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCampaignImportOutput> v1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID) throws ApiException {
        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDImportPostValidateBeforeCall(accountID, campaignID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignImportOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Import campaign
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDImportPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, final ApiCallback<ServiceDocsCampaignImportOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDImportPostValidateBeforeCall(accountID, campaignID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignImportOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "campaignID" + "}", localVarApiClient.escapeString(campaignID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet(Async)");
        }

        // verify the required parameter 'campaignID' is set
        if (campaignID == null) {
            throw new ApiException("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet(Async)");
        }

        return v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetCall(accountID, campaignID, pageNum, pageSize, _callback);

    }

    /**
     * 
     * Get telephone numbers associated with a campaign.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @return ServiceDocsCampaignPhoneNumberOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCampaignPhoneNumberOutput v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize) throws ApiException {
        ApiResponse<ServiceDocsCampaignPhoneNumberOutput> localVarResp = v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfo(accountID, campaignID, pageNum, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Get telephone numbers associated with a campaign.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @return ApiResponse&lt;ServiceDocsCampaignPhoneNumberOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCampaignPhoneNumberOutput> v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetValidateBeforeCall(accountID, campaignID, pageNum, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignPhoneNumberOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get telephone numbers associated with a campaign.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize, final ApiCallback<ServiceDocsCampaignPhoneNumberOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetValidateBeforeCall(accountID, campaignID, pageNum, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignPhoneNumberOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nonnull ServiceCampaignTagDetagPhonenumbers reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "campaignID" + "}", localVarApiClient.escapeString(campaignID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nonnull ServiceCampaignTagDetagPhonenumbers reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(Async)");
        }

        // verify the required parameter 'campaignID' is set
        if (campaignID == null) {
            throw new ApiException("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(Async)");
        }

        return v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutCall(accountID, campaignID, reqBody, _callback);

    }

    /**
     * 
     * Associate or dissociate telephone numbers with a campaign.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsCampaignTagDetagPhonenumbersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCampaignTagDetagPhonenumbersOutput v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nonnull ServiceCampaignTagDetagPhonenumbers reqBody) throws ApiException {
        ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput> localVarResp = v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfo(accountID, campaignID, reqBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Associate or dissociate telephone numbers with a campaign.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsCampaignTagDetagPhonenumbersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput> v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nonnull ServiceCampaignTagDetagPhonenumbers reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutValidateBeforeCall(accountID, campaignID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignTagDetagPhonenumbersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Associate or dissociate telephone numbers with a campaign.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param campaignID Campaign ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String campaignID, @javax.annotation.Nonnull ServiceCampaignTagDetagPhonenumbers reqBody, final ApiCallback<ServiceDocsCampaignTagDetagPhonenumbersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutValidateBeforeCall(accountID, campaignID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignTagDetagPhonenumbersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1SmsAccountAccountIDCampaignImportGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignImportGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sms/account/{accountID}/campaign/import"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SmsAccountAccountIDCampaignImportGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignImportGet(Async)");
        }

        return v1SmsAccountAccountIDCampaignImportGetCall(accountID, pageNum, pageSize, _callback);

    }

    /**
     * 
     * Get a list of all imported campaigns in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @return ServiceDocsCampaignImportedGetAllOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCampaignImportedGetAllOutput v1SmsAccountAccountIDCampaignImportGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize) throws ApiException {
        ApiResponse<ServiceDocsCampaignImportedGetAllOutput> localVarResp = v1SmsAccountAccountIDCampaignImportGetWithHttpInfo(accountID, pageNum, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all imported campaigns in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @return ApiResponse&lt;ServiceDocsCampaignImportedGetAllOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCampaignImportedGetAllOutput> v1SmsAccountAccountIDCampaignImportGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignImportGetValidateBeforeCall(accountID, pageNum, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignImportedGetAllOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all imported campaigns in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageNum Page number (optional)
     * @param pageSize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SmsAccountAccountIDCampaignImportGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable BigDecimal pageNum, @javax.annotation.Nullable BigDecimal pageSize, final ApiCallback<ServiceDocsCampaignImportedGetAllOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SmsAccountAccountIDCampaignImportGetValidateBeforeCall(accountID, pageNum, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCampaignImportedGetAllOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
