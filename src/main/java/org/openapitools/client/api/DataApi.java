/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsCallDailySummary;
import org.openapitools.client.model.ServiceDocsCallDetail;
import org.openapitools.client.model.ServiceDocsCallMonthlySummary;
import org.openapitools.client.model.ServiceDocsCdrGetAll;
import org.openapitools.client.model.ServiceDocsCdrGetSingle;
import org.openapitools.client.model.ServiceDocsEndpointList;
import org.openapitools.client.model.ServiceDocsEventDailySummary;
import org.openapitools.client.model.ServiceDocsEventDetail;
import org.openapitools.client.model.ServiceDocsEventMonthlySummary;
import org.openapitools.client.model.ServiceDocsFeatureDailySummary;
import org.openapitools.client.model.ServiceDocsFeatureMonthlySummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDCdrCdrIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param cdrID CDR ID, string (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCdrCdrIDGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String cdrID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/cdr/{cdrID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "cdrID" + "}", localVarApiClient.escapeString(cdrID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCdrCdrIDGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String cdrID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrCdrIDGet(Async)");
        }

        // verify the required parameter 'cdrID' is set
        if (cdrID == null) {
            throw new ApiException("Missing the required parameter 'cdrID' when calling v1AccountAccountIDCdrCdrIDGet(Async)");
        }

        return v1AccountAccountIDCdrCdrIDGetCall(accountID, cdrID, _callback);

    }

    /**
     * Get CDR Details
     * Retrieve the details of a single CDR record from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param cdrID CDR ID, string (required)
     * @return ServiceDocsCdrGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCdrGetSingle v1AccountAccountIDCdrCdrIDGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String cdrID) throws ApiException {
        ApiResponse<ServiceDocsCdrGetSingle> localVarResp = v1AccountAccountIDCdrCdrIDGetWithHttpInfo(accountID, cdrID);
        return localVarResp.getData();
    }

    /**
     * Get CDR Details
     * Retrieve the details of a single CDR record from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param cdrID CDR ID, string (required)
     * @return ApiResponse&lt;ServiceDocsCdrGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCdrGetSingle> v1AccountAccountIDCdrCdrIDGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String cdrID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCdrCdrIDGetValidateBeforeCall(accountID, cdrID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCdrGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get CDR Details (asynchronously)
     * Retrieve the details of a single CDR record from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param cdrID CDR ID, string (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCdrCdrIDGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String cdrID, final ApiCallback<ServiceDocsCdrGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCdrCdrIDGetValidateBeforeCall(accountID, cdrID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCdrGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDCdrGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageSize Page size (Maximum number of results to display per page) (optional)
     * @param startKey Start key (Starting offset for displaying results) (optional)
     * @param createdFrom For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param createdTo For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCdrGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String createdFrom, @javax.annotation.Nullable String createdTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/cdr"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDCdrGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String createdFrom, @javax.annotation.Nullable String createdTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrGet(Async)");
        }

        return v1AccountAccountIDCdrGetCall(accountID, pageSize, startKey, createdFrom, createdTo, _callback);

    }

    /**
     * Get CDR List
     * Retrieve a list of CDRs in a specific account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageSize Page size (Maximum number of results to display per page) (optional)
     * @param startKey Start key (Starting offset for displaying results) (optional)
     * @param createdFrom For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param createdTo For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @return ServiceDocsCdrGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCdrGetAll v1AccountAccountIDCdrGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String createdFrom, @javax.annotation.Nullable String createdTo) throws ApiException {
        ApiResponse<ServiceDocsCdrGetAll> localVarResp = v1AccountAccountIDCdrGetWithHttpInfo(accountID, pageSize, startKey, createdFrom, createdTo);
        return localVarResp.getData();
    }

    /**
     * Get CDR List
     * Retrieve a list of CDRs in a specific account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageSize Page size (Maximum number of results to display per page) (optional)
     * @param startKey Start key (Starting offset for displaying results) (optional)
     * @param createdFrom For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param createdTo For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @return ApiResponse&lt;ServiceDocsCdrGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCdrGetAll> v1AccountAccountIDCdrGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String createdFrom, @javax.annotation.Nullable String createdTo) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDCdrGetValidateBeforeCall(accountID, pageSize, startKey, createdFrom, createdTo, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCdrGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get CDR List (asynchronously)
     * Retrieve a list of CDRs in a specific account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param pageSize Page size (Maximum number of results to display per page) (optional)
     * @param startKey Start key (Starting offset for displaying results) (optional)
     * @param createdFrom For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param createdTo For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDCdrGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String createdFrom, @javax.annotation.Nullable String createdTo, final ApiCallback<ServiceDocsCdrGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDCdrGetValidateBeforeCall(accountID, pageSize, startKey, createdFrom, createdTo, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCdrGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataCallDailySummaryGet
     * @param accountId  (optional)
     * @param callType  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataCallDailySummaryGetCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/call_daily_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (callType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("call_type", callType));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataCallDailySummaryGetValidateBeforeCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        return v1DataCallDailySummaryGetCall(accountId, callType, endDate, pageSize, startDate, startKey, _callback);

    }

    /**
     * Get Call Daily Summary List
     * Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
     * @param accountId  (optional)
     * @param callType  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ServiceDocsCallDailySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallDailySummary v1DataCallDailySummaryGet(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        ApiResponse<ServiceDocsCallDailySummary> localVarResp = v1DataCallDailySummaryGetWithHttpInfo(accountId, callType, endDate, pageSize, startDate, startKey);
        return localVarResp.getData();
    }

    /**
     * Get Call Daily Summary List
     * Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
     * @param accountId  (optional)
     * @param callType  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ApiResponse&lt;ServiceDocsCallDailySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallDailySummary> v1DataCallDailySummaryGetWithHttpInfo(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        okhttp3.Call localVarCall = v1DataCallDailySummaryGetValidateBeforeCall(accountId, callType, endDate, pageSize, startDate, startKey, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallDailySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Daily Summary List (asynchronously)
     * Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
     * @param accountId  (optional)
     * @param callType  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataCallDailySummaryGetAsync(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback<ServiceDocsCallDailySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataCallDailySummaryGetValidateBeforeCall(accountId, callType, endDate, pageSize, startDate, startKey, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallDailySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataCallDetailGet
     * @param account  (optional)
     * @param callType  (optional)
     * @param calleeName  (optional)
     * @param calleeNumber  (optional)
     * @param callerName  (optional)
     * @param callerNumber  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataCallDetailGetCall(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String calleeName, @javax.annotation.Nullable String calleeNumber, @javax.annotation.Nullable String callerName, @javax.annotation.Nullable String callerNumber, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/call_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (callType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("call_type", callType));
        }

        if (calleeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callee_name", calleeName));
        }

        if (calleeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callee_number", calleeNumber));
        }

        if (callerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caller_name", callerName));
        }

        if (callerNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caller_number", callerNumber));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataCallDetailGetValidateBeforeCall(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String calleeName, @javax.annotation.Nullable String calleeNumber, @javax.annotation.Nullable String callerName, @javax.annotation.Nullable String callerNumber, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        return v1DataCallDetailGetCall(account, callType, calleeName, calleeNumber, callerName, callerNumber, endDate, pageSize, startDate, startKey, _callback);

    }

    /**
     * Get Call Detail List
     * Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
     * @param account  (optional)
     * @param callType  (optional)
     * @param calleeName  (optional)
     * @param calleeNumber  (optional)
     * @param callerName  (optional)
     * @param callerNumber  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ServiceDocsCallDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallDetail v1DataCallDetailGet(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String calleeName, @javax.annotation.Nullable String calleeNumber, @javax.annotation.Nullable String callerName, @javax.annotation.Nullable String callerNumber, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        ApiResponse<ServiceDocsCallDetail> localVarResp = v1DataCallDetailGetWithHttpInfo(account, callType, calleeName, calleeNumber, callerName, callerNumber, endDate, pageSize, startDate, startKey);
        return localVarResp.getData();
    }

    /**
     * Get Call Detail List
     * Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
     * @param account  (optional)
     * @param callType  (optional)
     * @param calleeName  (optional)
     * @param calleeNumber  (optional)
     * @param callerName  (optional)
     * @param callerNumber  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ApiResponse&lt;ServiceDocsCallDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallDetail> v1DataCallDetailGetWithHttpInfo(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String calleeName, @javax.annotation.Nullable String calleeNumber, @javax.annotation.Nullable String callerName, @javax.annotation.Nullable String callerNumber, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        okhttp3.Call localVarCall = v1DataCallDetailGetValidateBeforeCall(account, callType, calleeName, calleeNumber, callerName, callerNumber, endDate, pageSize, startDate, startKey, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Detail List (asynchronously)
     * Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
     * @param account  (optional)
     * @param callType  (optional)
     * @param calleeName  (optional)
     * @param calleeNumber  (optional)
     * @param callerName  (optional)
     * @param callerNumber  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataCallDetailGetAsync(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable String calleeName, @javax.annotation.Nullable String calleeNumber, @javax.annotation.Nullable String callerName, @javax.annotation.Nullable String callerNumber, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback<ServiceDocsCallDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataCallDetailGetValidateBeforeCall(account, callType, calleeName, calleeNumber, callerName, callerNumber, endDate, pageSize, startDate, startKey, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataCallMonthlySummaryGet
     * @param account  (optional)
     * @param callType  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataCallMonthlySummaryGetCall(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/call_monthly_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (callType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("call_type", callType));
        }

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        if (endYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_year", endYear));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (startYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_year", startYear));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataCallMonthlySummaryGetValidateBeforeCall(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback _callback) throws ApiException {
        return v1DataCallMonthlySummaryGetCall(account, callType, endMonth, endYear, pageSize, startKey, startMonth, startYear, _callback);

    }

    /**
     * Get Call Detail List
     * Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
     * @param account  (optional)
     * @param callType  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @return ServiceDocsCallMonthlySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallMonthlySummary v1DataCallMonthlySummaryGet(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear) throws ApiException {
        ApiResponse<ServiceDocsCallMonthlySummary> localVarResp = v1DataCallMonthlySummaryGetWithHttpInfo(account, callType, endMonth, endYear, pageSize, startKey, startMonth, startYear);
        return localVarResp.getData();
    }

    /**
     * Get Call Detail List
     * Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
     * @param account  (optional)
     * @param callType  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @return ApiResponse&lt;ServiceDocsCallMonthlySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallMonthlySummary> v1DataCallMonthlySummaryGetWithHttpInfo(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear) throws ApiException {
        okhttp3.Call localVarCall = v1DataCallMonthlySummaryGetValidateBeforeCall(account, callType, endMonth, endYear, pageSize, startKey, startMonth, startYear, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallMonthlySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Detail List (asynchronously)
     * Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
     * @param account  (optional)
     * @param callType  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataCallMonthlySummaryGetAsync(@javax.annotation.Nullable String account, @javax.annotation.Nullable String callType, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback<ServiceDocsCallMonthlySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataCallMonthlySummaryGetValidateBeforeCall(account, callType, endMonth, endYear, pageSize, startKey, startMonth, startYear, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallMonthlySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataEndpointListGet
     * @param endpointName  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param transactionType  (optional)
     * @param version  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEndpointListGetCall(@javax.annotation.Nullable String endpointName, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String transactionType, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/endpoint_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpointName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint_name", endpointName));
        }

        if (featureName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feature_name", featureName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (transactionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_type", transactionType));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataEndpointListGetValidateBeforeCall(@javax.annotation.Nullable String endpointName, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String transactionType, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        return v1DataEndpointListGetCall(endpointName, featureName, pageSize, startKey, transactionType, version, _callback);

    }

    /**
     * Get Endpoint List
     * Access the endpoint list for each CPaaS API.
     * @param endpointName  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param transactionType  (optional)
     * @param version  (optional)
     * @return ServiceDocsEndpointList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsEndpointList v1DataEndpointListGet(@javax.annotation.Nullable String endpointName, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String transactionType, @javax.annotation.Nullable String version) throws ApiException {
        ApiResponse<ServiceDocsEndpointList> localVarResp = v1DataEndpointListGetWithHttpInfo(endpointName, featureName, pageSize, startKey, transactionType, version);
        return localVarResp.getData();
    }

    /**
     * Get Endpoint List
     * Access the endpoint list for each CPaaS API.
     * @param endpointName  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param transactionType  (optional)
     * @param version  (optional)
     * @return ApiResponse&lt;ServiceDocsEndpointList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsEndpointList> v1DataEndpointListGetWithHttpInfo(@javax.annotation.Nullable String endpointName, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String transactionType, @javax.annotation.Nullable String version) throws ApiException {
        okhttp3.Call localVarCall = v1DataEndpointListGetValidateBeforeCall(endpointName, featureName, pageSize, startKey, transactionType, version, null);
        Type localVarReturnType = new TypeToken<ServiceDocsEndpointList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Endpoint List (asynchronously)
     * Access the endpoint list for each CPaaS API.
     * @param endpointName  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param transactionType  (optional)
     * @param version  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEndpointListGetAsync(@javax.annotation.Nullable String endpointName, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String transactionType, @javax.annotation.Nullable String version, final ApiCallback<ServiceDocsEndpointList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataEndpointListGetValidateBeforeCall(endpointName, featureName, pageSize, startKey, transactionType, version, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsEndpointList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataEventDailySummaryGet
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEventDailySummaryGetCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/event_daily_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (component != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component", component));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataEventDailySummaryGetValidateBeforeCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        return v1DataEventDailySummaryGetCall(accountId, component, endDate, pageSize, startDate, startKey, _callback);

    }

    /**
     * Get Event Daily Summary List
     * Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ServiceDocsEventDailySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsEventDailySummary v1DataEventDailySummaryGet(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        ApiResponse<ServiceDocsEventDailySummary> localVarResp = v1DataEventDailySummaryGetWithHttpInfo(accountId, component, endDate, pageSize, startDate, startKey);
        return localVarResp.getData();
    }

    /**
     * Get Event Daily Summary List
     * Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ApiResponse&lt;ServiceDocsEventDailySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsEventDailySummary> v1DataEventDailySummaryGetWithHttpInfo(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        okhttp3.Call localVarCall = v1DataEventDailySummaryGetValidateBeforeCall(accountId, component, endDate, pageSize, startDate, startKey, null);
        Type localVarReturnType = new TypeToken<ServiceDocsEventDailySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Event Daily Summary List (asynchronously)
     * Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDate  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEventDailySummaryGetAsync(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback<ServiceDocsEventDailySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataEventDailySummaryGetValidateBeforeCall(accountId, component, endDate, pageSize, startDate, startKey, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsEventDailySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataEventDetailGet
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDateTime  (optional)
     * @param eventName  (optional)
     * @param execStatus  (optional)
     * @param pageSize  (optional)
     * @param startDateTime  (optional)
     * @param startKey  (optional)
     * @param username  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEventDetailGetCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDateTime, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable String execStatus, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDateTime, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/event_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (component != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component", component));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date_time", endDateTime));
        }

        if (eventName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_name", eventName));
        }

        if (execStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exec_status", execStatus));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date_time", startDateTime));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataEventDetailGetValidateBeforeCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDateTime, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable String execStatus, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDateTime, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String username, final ApiCallback _callback) throws ApiException {
        return v1DataEventDetailGetCall(accountId, component, endDateTime, eventName, execStatus, pageSize, startDateTime, startKey, username, _callback);

    }

    /**
     * Get Event Details
     * Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDateTime  (optional)
     * @param eventName  (optional)
     * @param execStatus  (optional)
     * @param pageSize  (optional)
     * @param startDateTime  (optional)
     * @param startKey  (optional)
     * @param username  (optional)
     * @return ServiceDocsEventDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsEventDetail v1DataEventDetailGet(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDateTime, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable String execStatus, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDateTime, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String username) throws ApiException {
        ApiResponse<ServiceDocsEventDetail> localVarResp = v1DataEventDetailGetWithHttpInfo(accountId, component, endDateTime, eventName, execStatus, pageSize, startDateTime, startKey, username);
        return localVarResp.getData();
    }

    /**
     * Get Event Details
     * Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDateTime  (optional)
     * @param eventName  (optional)
     * @param execStatus  (optional)
     * @param pageSize  (optional)
     * @param startDateTime  (optional)
     * @param startKey  (optional)
     * @param username  (optional)
     * @return ApiResponse&lt;ServiceDocsEventDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsEventDetail> v1DataEventDetailGetWithHttpInfo(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDateTime, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable String execStatus, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDateTime, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String username) throws ApiException {
        okhttp3.Call localVarCall = v1DataEventDetailGetValidateBeforeCall(accountId, component, endDateTime, eventName, execStatus, pageSize, startDateTime, startKey, username, null);
        Type localVarReturnType = new TypeToken<ServiceDocsEventDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Event Details (asynchronously)
     * Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endDateTime  (optional)
     * @param eventName  (optional)
     * @param execStatus  (optional)
     * @param pageSize  (optional)
     * @param startDateTime  (optional)
     * @param startKey  (optional)
     * @param username  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEventDetailGetAsync(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable String endDateTime, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable String execStatus, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDateTime, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable String username, final ApiCallback<ServiceDocsEventDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataEventDetailGetValidateBeforeCall(accountId, component, endDateTime, eventName, execStatus, pageSize, startDateTime, startKey, username, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsEventDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataEventMonthlySummaryGet
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEventMonthlySummaryGetCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/event_monthly_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (component != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component", component));
        }

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        if (endYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_year", endYear));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (startYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_year", startYear));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataEventMonthlySummaryGetValidateBeforeCall(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback _callback) throws ApiException {
        return v1DataEventMonthlySummaryGetCall(accountId, component, endMonth, endYear, pageSize, startKey, startMonth, startYear, _callback);

    }

    /**
     * Get Event Monthly Summary List
     * Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @return ServiceDocsEventMonthlySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsEventMonthlySummary v1DataEventMonthlySummaryGet(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear) throws ApiException {
        ApiResponse<ServiceDocsEventMonthlySummary> localVarResp = v1DataEventMonthlySummaryGetWithHttpInfo(accountId, component, endMonth, endYear, pageSize, startKey, startMonth, startYear);
        return localVarResp.getData();
    }

    /**
     * Get Event Monthly Summary List
     * Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @return ApiResponse&lt;ServiceDocsEventMonthlySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsEventMonthlySummary> v1DataEventMonthlySummaryGetWithHttpInfo(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear) throws ApiException {
        okhttp3.Call localVarCall = v1DataEventMonthlySummaryGetValidateBeforeCall(accountId, component, endMonth, endYear, pageSize, startKey, startMonth, startYear, null);
        Type localVarReturnType = new TypeToken<ServiceDocsEventMonthlySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Event Monthly Summary List (asynchronously)
     * Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
     * @param accountId  (optional)
     * @param component  (optional)
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataEventMonthlySummaryGetAsync(@javax.annotation.Nullable String accountId, @javax.annotation.Nullable String component, @javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback<ServiceDocsEventMonthlySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataEventMonthlySummaryGetValidateBeforeCall(accountId, component, endMonth, endYear, pageSize, startKey, startMonth, startYear, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsEventMonthlySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataFeatureDailySummaryGet
     * @param endDate  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataFeatureDailySummaryGetCall(@javax.annotation.Nullable String endDate, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/feature_daily_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (featureName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feature_name", featureName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataFeatureDailySummaryGetValidateBeforeCall(@javax.annotation.Nullable String endDate, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback _callback) throws ApiException {
        return v1DataFeatureDailySummaryGetCall(endDate, featureName, pageSize, startDate, startKey, _callback);

    }

    /**
     * Get Feature Daily Summary List
     * Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
     * @param endDate  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ServiceDocsFeatureDailySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsFeatureDailySummary v1DataFeatureDailySummaryGet(@javax.annotation.Nullable String endDate, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        ApiResponse<ServiceDocsFeatureDailySummary> localVarResp = v1DataFeatureDailySummaryGetWithHttpInfo(endDate, featureName, pageSize, startDate, startKey);
        return localVarResp.getData();
    }

    /**
     * Get Feature Daily Summary List
     * Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
     * @param endDate  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @return ApiResponse&lt;ServiceDocsFeatureDailySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsFeatureDailySummary> v1DataFeatureDailySummaryGetWithHttpInfo(@javax.annotation.Nullable String endDate, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey) throws ApiException {
        okhttp3.Call localVarCall = v1DataFeatureDailySummaryGetValidateBeforeCall(endDate, featureName, pageSize, startDate, startKey, null);
        Type localVarReturnType = new TypeToken<ServiceDocsFeatureDailySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Feature Daily Summary List (asynchronously)
     * Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
     * @param endDate  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startDate  (optional)
     * @param startKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataFeatureDailySummaryGetAsync(@javax.annotation.Nullable String endDate, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String startKey, final ApiCallback<ServiceDocsFeatureDailySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataFeatureDailySummaryGetValidateBeforeCall(endDate, featureName, pageSize, startDate, startKey, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsFeatureDailySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DataFeatureMonthlySummaryGet
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataFeatureMonthlySummaryGetCall(@javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/feature_monthly_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        if (endYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_year", endYear));
        }

        if (featureName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feature_name", featureName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (startYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_year", startYear));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DataFeatureMonthlySummaryGetValidateBeforeCall(@javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback _callback) throws ApiException {
        return v1DataFeatureMonthlySummaryGetCall(endMonth, endYear, featureName, pageSize, startKey, startMonth, startYear, _callback);

    }

    /**
     * Get Feature Monthly Summary List
     * Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @return ServiceDocsFeatureMonthlySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsFeatureMonthlySummary v1DataFeatureMonthlySummaryGet(@javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear) throws ApiException {
        ApiResponse<ServiceDocsFeatureMonthlySummary> localVarResp = v1DataFeatureMonthlySummaryGetWithHttpInfo(endMonth, endYear, featureName, pageSize, startKey, startMonth, startYear);
        return localVarResp.getData();
    }

    /**
     * Get Feature Monthly Summary List
     * Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @return ApiResponse&lt;ServiceDocsFeatureMonthlySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsFeatureMonthlySummary> v1DataFeatureMonthlySummaryGetWithHttpInfo(@javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear) throws ApiException {
        okhttp3.Call localVarCall = v1DataFeatureMonthlySummaryGetValidateBeforeCall(endMonth, endYear, featureName, pageSize, startKey, startMonth, startYear, null);
        Type localVarReturnType = new TypeToken<ServiceDocsFeatureMonthlySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Feature Monthly Summary List (asynchronously)
     * Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
     * @param endMonth  (optional)
     * @param endYear  (optional)
     * @param featureName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param startMonth  (optional)
     * @param startYear  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DataFeatureMonthlySummaryGetAsync(@javax.annotation.Nullable Integer endMonth, @javax.annotation.Nullable Integer endYear, @javax.annotation.Nullable String featureName, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer startMonth, @javax.annotation.Nullable Integer startYear, final ApiCallback<ServiceDocsFeatureMonthlySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DataFeatureMonthlySummaryGetValidateBeforeCall(endMonth, endYear, featureName, pageSize, startKey, startMonth, startYear, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsFeatureMonthlySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
