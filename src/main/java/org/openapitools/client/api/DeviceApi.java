/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsDeviceGetAll;
import org.openapitools.client.model.ServiceDocsDeviceGetSingle;
import org.openapitools.client.model.ServiceDocsDeviceReboot;
import org.openapitools.client.model.ServiceDocsDeviceStatus;
import org.openapitools.client.model.ServiceVOIPDeviceAddEdit2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeviceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountidDeviceDeviceidDelete
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidDeleteCall(String accountid, String deviceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/device/{deviceid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "deviceid" + "}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidDeviceDeviceidDeleteValidateBeforeCall(String accountid, String deviceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidDelete(Async)");
        }

        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidDelete(Async)");
        }

        return v1AccountAccountidDeviceDeviceidDeleteCall(accountid, deviceid, _callback);

    }

    /**
     * Delete Device
     * Remove one device from a CPaaS account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @return ServiceDocsDeviceGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsDeviceGetSingle v1AccountAccountidDeviceDeviceidDelete(String accountid, String deviceid) throws ApiException {
        ApiResponse<ServiceDocsDeviceGetSingle> localVarResp = v1AccountAccountidDeviceDeviceidDeleteWithHttpInfo(accountid, deviceid);
        return localVarResp.getData();
    }

    /**
     * Delete Device
     * Remove one device from a CPaaS account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsDeviceGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsDeviceGetSingle> v1AccountAccountidDeviceDeviceidDeleteWithHttpInfo(String accountid, String deviceid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidDeleteValidateBeforeCall(accountid, deviceid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Device (asynchronously)
     * Remove one device from a CPaaS account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidDeleteAsync(String accountid, String deviceid, final ApiCallback<ServiceDocsDeviceGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidDeleteValidateBeforeCall(accountid, deviceid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidDeviceDeviceidGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidGetCall(String accountid, String deviceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/device/{deviceid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "deviceid" + "}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidDeviceDeviceidGetValidateBeforeCall(String accountid, String deviceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidGet(Async)");
        }

        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidGet(Async)");
        }

        return v1AccountAccountidDeviceDeviceidGetCall(accountid, deviceid, _callback);

    }

    /**
     * Get Device Details
     * Permit a user to view specific device details.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @return ServiceDocsDeviceGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsDeviceGetSingle v1AccountAccountidDeviceDeviceidGet(String accountid, String deviceid) throws ApiException {
        ApiResponse<ServiceDocsDeviceGetSingle> localVarResp = v1AccountAccountidDeviceDeviceidGetWithHttpInfo(accountid, deviceid);
        return localVarResp.getData();
    }

    /**
     * Get Device Details
     * Permit a user to view specific device details.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsDeviceGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsDeviceGetSingle> v1AccountAccountidDeviceDeviceidGetWithHttpInfo(String accountid, String deviceid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidGetValidateBeforeCall(accountid, deviceid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Device Details (asynchronously)
     * Permit a user to view specific device details.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidGetAsync(String accountid, String deviceid, final ApiCallback<ServiceDocsDeviceGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidGetValidateBeforeCall(accountid, deviceid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidDeviceDeviceidPut
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidPutCall(String accountid, String deviceid, ServiceVOIPDeviceAddEdit2 device, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = device;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/device/{deviceid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "deviceid" + "}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidDeviceDeviceidPutValidateBeforeCall(String accountid, String deviceid, ServiceVOIPDeviceAddEdit2 device, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidPut(Async)");
        }

        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidPut(Async)");
        }

        // verify the required parameter 'device' is set
        if (device == null) {
            throw new ApiException("Missing the required parameter 'device' when calling v1AccountAccountidDeviceDeviceidPut(Async)");
        }

        return v1AccountAccountidDeviceDeviceidPutCall(accountid, deviceid, device, _callback);

    }

    /**
     * Update Device
     * Edit specifics about the device, such as the device type, name, and owner.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @return ServiceDocsDeviceGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsDeviceGetSingle v1AccountAccountidDeviceDeviceidPut(String accountid, String deviceid, ServiceVOIPDeviceAddEdit2 device) throws ApiException {
        ApiResponse<ServiceDocsDeviceGetSingle> localVarResp = v1AccountAccountidDeviceDeviceidPutWithHttpInfo(accountid, deviceid, device);
        return localVarResp.getData();
    }

    /**
     * Update Device
     * Edit specifics about the device, such as the device type, name, and owner.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @return ApiResponse&lt;ServiceDocsDeviceGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsDeviceGetSingle> v1AccountAccountidDeviceDeviceidPutWithHttpInfo(String accountid, String deviceid, ServiceVOIPDeviceAddEdit2 device) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidPutValidateBeforeCall(accountid, deviceid, device, null);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Device (asynchronously)
     * Edit specifics about the device, such as the device type, name, and owner.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidPutAsync(String accountid, String deviceid, ServiceVOIPDeviceAddEdit2 device, final ApiCallback<ServiceDocsDeviceGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidPutValidateBeforeCall(accountid, deviceid, device, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidDeviceDeviceidRebootPost
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidRebootPostCall(String accountid, String deviceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/device/{deviceid}/reboot"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "deviceid" + "}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidDeviceDeviceidRebootPostValidateBeforeCall(String accountid, String deviceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidRebootPost(Async)");
        }

        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidRebootPost(Async)");
        }

        return v1AccountAccountidDeviceDeviceidRebootPostCall(accountid, deviceid, _callback);

    }

    /**
     * Reboot Device
     * Reboot a device in an account to mitigate malware and improve device performance.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @return ServiceDocsDeviceReboot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsDeviceReboot v1AccountAccountidDeviceDeviceidRebootPost(String accountid, String deviceid) throws ApiException {
        ApiResponse<ServiceDocsDeviceReboot> localVarResp = v1AccountAccountidDeviceDeviceidRebootPostWithHttpInfo(accountid, deviceid);
        return localVarResp.getData();
    }

    /**
     * Reboot Device
     * Reboot a device in an account to mitigate malware and improve device performance.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsDeviceReboot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsDeviceReboot> v1AccountAccountidDeviceDeviceidRebootPostWithHttpInfo(String accountid, String deviceid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidRebootPostValidateBeforeCall(accountid, deviceid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceReboot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reboot Device (asynchronously)
     * Reboot a device in an account to mitigate malware and improve device performance.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param deviceid Device ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceDeviceidRebootPostAsync(String accountid, String deviceid, final ApiCallback<ServiceDocsDeviceReboot> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidDeviceDeviceidRebootPostValidateBeforeCall(accountid, deviceid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceReboot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidDeviceGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceGetCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/device"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidDeviceGetValidateBeforeCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceGet(Async)");
        }

        return v1AccountAccountidDeviceGetCall(accountid, startKey, pageSize, _callback);

    }

    /**
     * Get Device List
     * Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ServiceDocsDeviceGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsDeviceGetAll v1AccountAccountidDeviceGet(String accountid, String startKey, Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsDeviceGetAll> localVarResp = v1AccountAccountidDeviceGetWithHttpInfo(accountid, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Device List
     * Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ApiResponse&lt;ServiceDocsDeviceGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsDeviceGetAll> v1AccountAccountidDeviceGetWithHttpInfo(String accountid, String startKey, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidDeviceGetValidateBeforeCall(accountid, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Device List (asynchronously)
     * Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceGetAsync(String accountid, String startKey, Integer pageSize, final ApiCallback<ServiceDocsDeviceGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidDeviceGetValidateBeforeCall(accountid, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidDevicePost
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDevicePostCall(String accountid, ServiceVOIPDeviceAddEdit2 device, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = device;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/device"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidDevicePostValidateBeforeCall(String accountid, ServiceVOIPDeviceAddEdit2 device, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidDevicePost(Async)");
        }

        // verify the required parameter 'device' is set
        if (device == null) {
            throw new ApiException("Missing the required parameter 'device' when calling v1AccountAccountidDevicePost(Async)");
        }

        return v1AccountAccountidDevicePostCall(accountid, device, _callback);

    }

    /**
     * Create Device
     * Connect a new device to an account to enhance communication methods.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @return ServiceDocsDeviceGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsDeviceGetSingle v1AccountAccountidDevicePost(String accountid, ServiceVOIPDeviceAddEdit2 device) throws ApiException {
        ApiResponse<ServiceDocsDeviceGetSingle> localVarResp = v1AccountAccountidDevicePostWithHttpInfo(accountid, device);
        return localVarResp.getData();
    }

    /**
     * Create Device
     * Connect a new device to an account to enhance communication methods.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @return ApiResponse&lt;ServiceDocsDeviceGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsDeviceGetSingle> v1AccountAccountidDevicePostWithHttpInfo(String accountid, ServiceVOIPDeviceAddEdit2 device) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidDevicePostValidateBeforeCall(accountid, device, null);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Device (asynchronously)
     * Connect a new device to an account to enhance communication methods.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param device device fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDevicePostAsync(String accountid, ServiceVOIPDeviceAddEdit2 device, final ApiCallback<ServiceDocsDeviceGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidDevicePostValidateBeforeCall(accountid, device, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidDeviceStatusGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceStatusGetCall(String accountid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/device/status"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidDeviceStatusGetValidateBeforeCall(String accountid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceStatusGet(Async)");
        }

        return v1AccountAccountidDeviceStatusGetCall(accountid, _callback);

    }

    /**
     * Get Device Status
     * Retrieve a device’s status (e.g., registered or not registered) in an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @return ServiceDocsDeviceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsDeviceStatus v1AccountAccountidDeviceStatusGet(String accountid) throws ApiException {
        ApiResponse<ServiceDocsDeviceStatus> localVarResp = v1AccountAccountidDeviceStatusGetWithHttpInfo(accountid);
        return localVarResp.getData();
    }

    /**
     * Get Device Status
     * Retrieve a device’s status (e.g., registered or not registered) in an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsDeviceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsDeviceStatus> v1AccountAccountidDeviceStatusGetWithHttpInfo(String accountid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidDeviceStatusGetValidateBeforeCall(accountid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Device Status (asynchronously)
     * Retrieve a device’s status (e.g., registered or not registered) in an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidDeviceStatusGetAsync(String accountid, final ApiCallback<ServiceDocsDeviceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidDeviceStatusGetValidateBeforeCall(accountid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsDeviceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
