/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsImpersonateUserGetSingle;
import org.openapitools.client.model.ServiceDocsUserGetAll;
import org.openapitools.client.model.ServiceDocsUserGetSingle;
import org.openapitools.client.model.ServiceVOIPImpersonateUser;
import org.openapitools.client.model.ServiceVOIPUserAdd2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoIpUserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoIpUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoIpUserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountidUserGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserGetCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/user"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidUserGetValidateBeforeCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidUserGet(Async)");
        }

        return v1AccountAccountidUserGetCall(accountid, startKey, pageSize, _callback);

    }

    /**
     * Get User List
     * Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ServiceDocsUserGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsUserGetAll v1AccountAccountidUserGet(String accountid, String startKey, Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsUserGetAll> localVarResp = v1AccountAccountidUserGetWithHttpInfo(accountid, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get User List
     * Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ApiResponse&lt;ServiceDocsUserGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsUserGetAll> v1AccountAccountidUserGetWithHttpInfo(String accountid, String startKey, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidUserGetValidateBeforeCall(accountid, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User List (asynchronously)
     * Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserGetAsync(String accountid, String startKey, Integer pageSize, final ApiCallback<ServiceDocsUserGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidUserGetValidateBeforeCall(accountid, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidUserPost
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserPostCall(String accountid, ServiceVOIPUserAdd2 user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/user"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidUserPostValidateBeforeCall(String accountid, ServiceVOIPUserAdd2 user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidUserPost(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling v1AccountAccountidUserPost(Async)");
        }

        return v1AccountAccountidUserPostCall(accountid, user, _callback);

    }

    /**
     * Create User
     * Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @return ServiceDocsUserGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsUserGetSingle v1AccountAccountidUserPost(String accountid, ServiceVOIPUserAdd2 user) throws ApiException {
        ApiResponse<ServiceDocsUserGetSingle> localVarResp = v1AccountAccountidUserPostWithHttpInfo(accountid, user);
        return localVarResp.getData();
    }

    /**
     * Create User
     * Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @return ApiResponse&lt;ServiceDocsUserGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsUserGetSingle> v1AccountAccountidUserPostWithHttpInfo(String accountid, ServiceVOIPUserAdd2 user) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidUserPostValidateBeforeCall(accountid, user, null);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User (asynchronously)
     * Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserPostAsync(String accountid, ServiceVOIPUserAdd2 user, final ApiCallback<ServiceDocsUserGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidUserPostValidateBeforeCall(accountid, user, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidUserUseridDelete
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridDeleteCall(String accountid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/user/{userid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidUserUseridDeleteValidateBeforeCall(String accountid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridDelete(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridDelete(Async)");
        }

        return v1AccountAccountidUserUseridDeleteCall(accountid, userid, _callback);

    }

    /**
     * Delete User
     * Delete VoIP user access to maintain the security of your accounts.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @return ServiceDocsUserGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsUserGetSingle v1AccountAccountidUserUseridDelete(String accountid, String userid) throws ApiException {
        ApiResponse<ServiceDocsUserGetSingle> localVarResp = v1AccountAccountidUserUseridDeleteWithHttpInfo(accountid, userid);
        return localVarResp.getData();
    }

    /**
     * Delete User
     * Delete VoIP user access to maintain the security of your accounts.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsUserGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsUserGetSingle> v1AccountAccountidUserUseridDeleteWithHttpInfo(String accountid, String userid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidUserUseridDeleteValidateBeforeCall(accountid, userid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete User (asynchronously)
     * Delete VoIP user access to maintain the security of your accounts.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridDeleteAsync(String accountid, String userid, final ApiCallback<ServiceDocsUserGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidUserUseridDeleteValidateBeforeCall(accountid, userid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidUserUseridGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridGetCall(String accountid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/user/{userid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidUserUseridGetValidateBeforeCall(String accountid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridGet(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridGet(Async)");
        }

        return v1AccountAccountidUserUseridGetCall(accountid, userid, _callback);

    }

    /**
     * Get User Details
     * View specific user details.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @return ServiceDocsUserGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsUserGetSingle v1AccountAccountidUserUseridGet(String accountid, String userid) throws ApiException {
        ApiResponse<ServiceDocsUserGetSingle> localVarResp = v1AccountAccountidUserUseridGetWithHttpInfo(accountid, userid);
        return localVarResp.getData();
    }

    /**
     * Get User Details
     * View specific user details.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsUserGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsUserGetSingle> v1AccountAccountidUserUseridGetWithHttpInfo(String accountid, String userid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidUserUseridGetValidateBeforeCall(accountid, userid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Details (asynchronously)
     * View specific user details.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridGetAsync(String accountid, String userid, final ApiCallback<ServiceDocsUserGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidUserUseridGetValidateBeforeCall(accountid, userid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidUserUseridPut
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridPutCall(String accountid, String userid, ServiceVOIPUserAdd2 user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/user/{userid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidUserUseridPutValidateBeforeCall(String accountid, String userid, ServiceVOIPUserAdd2 user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridPut(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridPut(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridPut(Async)");
        }

        return v1AccountAccountidUserUseridPutCall(accountid, userid, user, _callback);

    }

    /**
     * Update User
     * Keep user information current. Modify the first and last name, extension, and other pertinent information.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @return ServiceDocsUserGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsUserGetSingle v1AccountAccountidUserUseridPut(String accountid, String userid, ServiceVOIPUserAdd2 user) throws ApiException {
        ApiResponse<ServiceDocsUserGetSingle> localVarResp = v1AccountAccountidUserUseridPutWithHttpInfo(accountid, userid, user);
        return localVarResp.getData();
    }

    /**
     * Update User
     * Keep user information current. Modify the first and last name, extension, and other pertinent information.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @return ApiResponse&lt;ServiceDocsUserGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsUserGetSingle> v1AccountAccountidUserUseridPutWithHttpInfo(String accountid, String userid, ServiceVOIPUserAdd2 user) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidUserUseridPutValidateBeforeCall(accountid, userid, user, null);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * Keep user information current. Modify the first and last name, extension, and other pertinent information.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user user fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridPutAsync(String accountid, String userid, ServiceVOIPUserAdd2 user, final ApiCallback<ServiceDocsUserGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidUserUseridPutValidateBeforeCall(accountid, userid, user, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsUserGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidUserUseridUserauthPost
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user Payload for impersonate a user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridUserauthPostCall(String accountid, String userid, ServiceVOIPImpersonateUser user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/user/{userid}/userauth"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidUserUseridUserauthPostValidateBeforeCall(String accountid, String userid, ServiceVOIPImpersonateUser user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridUserauthPost(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridUserauthPost(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridUserauthPost(Async)");
        }

        return v1AccountAccountidUserUseridUserauthPostCall(accountid, userid, user, _callback);

    }

    /**
     * Impersonate a User
     * Impersonate as another user if you have access to admin.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user Payload for impersonate a user (required)
     * @return ServiceDocsImpersonateUserGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsImpersonateUserGetSingle v1AccountAccountidUserUseridUserauthPost(String accountid, String userid, ServiceVOIPImpersonateUser user) throws ApiException {
        ApiResponse<ServiceDocsImpersonateUserGetSingle> localVarResp = v1AccountAccountidUserUseridUserauthPostWithHttpInfo(accountid, userid, user);
        return localVarResp.getData();
    }

    /**
     * Impersonate a User
     * Impersonate as another user if you have access to admin.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user Payload for impersonate a user (required)
     * @return ApiResponse&lt;ServiceDocsImpersonateUserGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsImpersonateUserGetSingle> v1AccountAccountidUserUseridUserauthPostWithHttpInfo(String accountid, String userid, ServiceVOIPImpersonateUser user) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidUserUseridUserauthPostValidateBeforeCall(accountid, userid, user, null);
        Type localVarReturnType = new TypeToken<ServiceDocsImpersonateUserGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Impersonate a User (asynchronously)
     * Impersonate as another user if you have access to admin.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param userid User ID, 32 alpha numeric (required)
     * @param user Payload for impersonate a user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidUserUseridUserauthPostAsync(String accountid, String userid, ServiceVOIPImpersonateUser user, final ApiCallback<ServiceDocsImpersonateUserGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidUserUseridUserauthPostValidateBeforeCall(accountid, userid, user, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsImpersonateUserGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
