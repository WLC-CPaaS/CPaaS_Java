/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceAPIResponse;
import org.openapitools.client.model.ServiceDocsCallQueueMemberGetSingle;
import org.openapitools.client.model.ServiceVOIPCallQueueEnableMembershipData;
import org.openapitools.client.model.ServiceVOIPQueueMembershipAddData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallQueueMembershipApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallQueueMembershipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallQueueMembershipApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDQueuemembershipPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuemembershipPostCall(String accountID, ServiceVOIPQueueMembershipAddData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/queuemembership"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDQueuemembershipPostValidateBeforeCall(String accountID, ServiceVOIPQueueMembershipAddData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipPost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuemembershipPost(Async)");
        }

        return v1AccountAccountIDQueuemembershipPostCall(accountID, reqBody, _callback);

    }

    /**
     * Grant Queue Membership to User
     * Allow users to create queue memberships for recipients.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsCallQueueMemberGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueMemberGetSingle v1AccountAccountIDQueuemembershipPost(String accountID, ServiceVOIPQueueMembershipAddData reqBody) throws ApiException {
        ApiResponse<ServiceDocsCallQueueMemberGetSingle> localVarResp = v1AccountAccountIDQueuemembershipPostWithHttpInfo(accountID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Grant Queue Membership to User
     * Allow users to create queue memberships for recipients.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueMemberGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueMemberGetSingle> v1AccountAccountIDQueuemembershipPostWithHttpInfo(String accountID, ServiceVOIPQueueMembershipAddData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDQueuemembershipPostValidateBeforeCall(accountID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueMemberGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Grant Queue Membership to User (asynchronously)
     * Allow users to create queue memberships for recipients.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuemembershipPostAsync(String accountID, ServiceVOIPQueueMembershipAddData reqBody, final ApiCallback<ServiceDocsCallQueueMemberGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDQueuemembershipPostValidateBeforeCall(accountID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueMemberGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDQueuemembershipRecipientIDDisablePost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuemembershipRecipientIDDisablePostCall(String accountID, String recipientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/queuemembership/{recipientID}/disable"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "recipientID" + "}", localVarApiClient.escapeString(recipientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDQueuemembershipRecipientIDDisablePostValidateBeforeCall(String accountID, String recipientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipRecipientIDDisablePost(Async)");
        }

        // verify the required parameter 'recipientID' is set
        if (recipientID == null) {
            throw new ApiException("Missing the required parameter 'recipientID' when calling v1AccountAccountIDQueuemembershipRecipientIDDisablePost(Async)");
        }

        return v1AccountAccountIDQueuemembershipRecipientIDDisablePostCall(accountID, recipientID, _callback);

    }

    /**
     * Disable Queue Membership
     * Deactivate queue membership for a recipient.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @return ServiceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponse v1AccountAccountIDQueuemembershipRecipientIDDisablePost(String accountID, String recipientID) throws ApiException {
        ApiResponse<ServiceAPIResponse> localVarResp = v1AccountAccountIDQueuemembershipRecipientIDDisablePostWithHttpInfo(accountID, recipientID);
        return localVarResp.getData();
    }

    /**
     * Disable Queue Membership
     * Deactivate queue membership for a recipient.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponse> v1AccountAccountIDQueuemembershipRecipientIDDisablePostWithHttpInfo(String accountID, String recipientID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDQueuemembershipRecipientIDDisablePostValidateBeforeCall(accountID, recipientID, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Queue Membership (asynchronously)
     * Deactivate queue membership for a recipient.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuemembershipRecipientIDDisablePostAsync(String accountID, String recipientID, final ApiCallback<ServiceAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDQueuemembershipRecipientIDDisablePostValidateBeforeCall(accountID, recipientID, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDQueuemembershipRecipientIDEnablePost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuemembershipRecipientIDEnablePostCall(String accountID, String recipientID, ServiceVOIPCallQueueEnableMembershipData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/queuemembership/{recipientID}/enable"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "recipientID" + "}", localVarApiClient.escapeString(recipientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDQueuemembershipRecipientIDEnablePostValidateBeforeCall(String accountID, String recipientID, ServiceVOIPCallQueueEnableMembershipData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost(Async)");
        }

        // verify the required parameter 'recipientID' is set
        if (recipientID == null) {
            throw new ApiException("Missing the required parameter 'recipientID' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost(Async)");
        }

        return v1AccountAccountIDQueuemembershipRecipientIDEnablePostCall(accountID, recipientID, reqBody, _callback);

    }

    /**
     * Enable Queue Membership
     * Activate queue membership for a recipient.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponse v1AccountAccountIDQueuemembershipRecipientIDEnablePost(String accountID, String recipientID, ServiceVOIPCallQueueEnableMembershipData reqBody) throws ApiException {
        ApiResponse<ServiceAPIResponse> localVarResp = v1AccountAccountIDQueuemembershipRecipientIDEnablePostWithHttpInfo(accountID, recipientID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Enable Queue Membership
     * Activate queue membership for a recipient.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponse> v1AccountAccountIDQueuemembershipRecipientIDEnablePostWithHttpInfo(String accountID, String recipientID, ServiceVOIPCallQueueEnableMembershipData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDQueuemembershipRecipientIDEnablePostValidateBeforeCall(accountID, recipientID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Queue Membership (asynchronously)
     * Activate queue membership for a recipient.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuemembershipRecipientIDEnablePostAsync(String accountID, String recipientID, ServiceVOIPCallQueueEnableMembershipData reqBody, final ApiCallback<ServiceAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDQueuemembershipRecipientIDEnablePostValidateBeforeCall(accountID, recipientID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
