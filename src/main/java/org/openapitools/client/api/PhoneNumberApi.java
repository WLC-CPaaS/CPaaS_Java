/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceAPIResponseStatusCodeOnly;
import org.openapitools.client.model.ServiceDocsAccountPhonenumberGetAll;
import org.openapitools.client.model.ServiceDocsOrderPhonenumber;
import org.openapitools.client.model.ServiceDocsPhonenumberAssignPayload;
import org.openapitools.client.model.ServiceDocsPhonenumberSearchGetAll;
import org.openapitools.client.model.ServiceDocsPhonenumberUnassignPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PhoneNumberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PhoneNumberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PhoneNumberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountidPhonenumberGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidPhonenumberGetCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/phonenumber"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidPhonenumberGetValidateBeforeCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidPhonenumberGet(Async)");
        }

        return v1AccountAccountidPhonenumberGetCall(accountid, startKey, pageSize, _callback);

    }

    /**
     * Get Assigned Numbers List
     * Access all phone numbers assigned to a CPaaS account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @return ServiceDocsAccountPhonenumberGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsAccountPhonenumberGetAll v1AccountAccountidPhonenumberGet(String accountid, String startKey, Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsAccountPhonenumberGetAll> localVarResp = v1AccountAccountidPhonenumberGetWithHttpInfo(accountid, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Assigned Numbers List
     * Access all phone numbers assigned to a CPaaS account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @return ApiResponse&lt;ServiceDocsAccountPhonenumberGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsAccountPhonenumberGetAll> v1AccountAccountidPhonenumberGetWithHttpInfo(String accountid, String startKey, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidPhonenumberGetValidateBeforeCall(accountid, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsAccountPhonenumberGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Assigned Numbers List (asynchronously)
     * Access all phone numbers assigned to a CPaaS account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidPhonenumberGetAsync(String accountid, String startKey, Integer pageSize, final ApiCallback<ServiceDocsAccountPhonenumberGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidPhonenumberGetValidateBeforeCall(accountid, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsAccountPhonenumberGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountPhonenumberAssignPost
     * @param payload assignment payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberAssignPostCall(ServiceDocsPhonenumberAssignPayload payload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/v1/account/phonenumber/assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountPhonenumberAssignPostValidateBeforeCall(ServiceDocsPhonenumberAssignPayload payload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling v1AccountPhonenumberAssignPost(Async)");
        }

        return v1AccountPhonenumberAssignPostCall(payload, _callback);

    }

    /**
     * Assign Number
     * Assign a purchased phone number to an account.
     * @param payload assignment payload (required)
     * @return ServiceAPIResponseStatusCodeOnly
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponseStatusCodeOnly v1AccountPhonenumberAssignPost(ServiceDocsPhonenumberAssignPayload payload) throws ApiException {
        ApiResponse<ServiceAPIResponseStatusCodeOnly> localVarResp = v1AccountPhonenumberAssignPostWithHttpInfo(payload);
        return localVarResp.getData();
    }

    /**
     * Assign Number
     * Assign a purchased phone number to an account.
     * @param payload assignment payload (required)
     * @return ApiResponse&lt;ServiceAPIResponseStatusCodeOnly&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponseStatusCodeOnly> v1AccountPhonenumberAssignPostWithHttpInfo(ServiceDocsPhonenumberAssignPayload payload) throws ApiException {
        okhttp3.Call localVarCall = v1AccountPhonenumberAssignPostValidateBeforeCall(payload, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponseStatusCodeOnly>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Number (asynchronously)
     * Assign a purchased phone number to an account.
     * @param payload assignment payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberAssignPostAsync(ServiceDocsPhonenumberAssignPayload payload, final ApiCallback<ServiceAPIResponseStatusCodeOnly> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountPhonenumberAssignPostValidateBeforeCall(payload, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponseStatusCodeOnly>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountPhonenumberDisconnectPost
     * @param payload disconnect payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberDisconnectPostCall(ServiceDocsPhonenumberUnassignPayload payload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/v1/account/phonenumber/disconnect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountPhonenumberDisconnectPostValidateBeforeCall(ServiceDocsPhonenumberUnassignPayload payload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling v1AccountPhonenumberDisconnectPost(Async)");
        }

        return v1AccountPhonenumberDisconnectPostCall(payload, _callback);

    }

    /**
     * Disconnect Number
     * Disconnecting a phone number from a CPaaS account relinquishes ownership of the number back to the carrier.
     * @param payload disconnect payload (required)
     * @return ServiceAPIResponseStatusCodeOnly
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponseStatusCodeOnly v1AccountPhonenumberDisconnectPost(ServiceDocsPhonenumberUnassignPayload payload) throws ApiException {
        ApiResponse<ServiceAPIResponseStatusCodeOnly> localVarResp = v1AccountPhonenumberDisconnectPostWithHttpInfo(payload);
        return localVarResp.getData();
    }

    /**
     * Disconnect Number
     * Disconnecting a phone number from a CPaaS account relinquishes ownership of the number back to the carrier.
     * @param payload disconnect payload (required)
     * @return ApiResponse&lt;ServiceAPIResponseStatusCodeOnly&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponseStatusCodeOnly> v1AccountPhonenumberDisconnectPostWithHttpInfo(ServiceDocsPhonenumberUnassignPayload payload) throws ApiException {
        okhttp3.Call localVarCall = v1AccountPhonenumberDisconnectPostValidateBeforeCall(payload, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponseStatusCodeOnly>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disconnect Number (asynchronously)
     * Disconnecting a phone number from a CPaaS account relinquishes ownership of the number back to the carrier.
     * @param payload disconnect payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberDisconnectPostAsync(ServiceDocsPhonenumberUnassignPayload payload, final ApiCallback<ServiceAPIResponseStatusCodeOnly> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountPhonenumberDisconnectPostValidateBeforeCall(payload, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponseStatusCodeOnly>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountPhonenumberGet
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberGetCall(String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/phonenumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountPhonenumberGetValidateBeforeCall(String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return v1AccountPhonenumberGetCall(startKey, pageSize, _callback);

    }

    /**
     * Get Unassigned Numbers List
     * Obtain all phone numbers that have not been assigned to a CPaaS account within your organization.
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @return ServiceDocsAccountPhonenumberGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsAccountPhonenumberGetAll v1AccountPhonenumberGet(String startKey, Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsAccountPhonenumberGetAll> localVarResp = v1AccountPhonenumberGetWithHttpInfo(startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Unassigned Numbers List
     * Obtain all phone numbers that have not been assigned to a CPaaS account within your organization.
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @return ApiResponse&lt;ServiceDocsAccountPhonenumberGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsAccountPhonenumberGetAll> v1AccountPhonenumberGetWithHttpInfo(String startKey, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountPhonenumberGetValidateBeforeCall(startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsAccountPhonenumberGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Unassigned Numbers List (asynchronously)
     * Obtain all phone numbers that have not been assigned to a CPaaS account within your organization.
     * @param startKey Start key for pagination, obtained from previous responses (optional)
     * @param pageSize Number of records to return per page (range: 1 to 50) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberGetAsync(String startKey, Integer pageSize, final ApiCallback<ServiceDocsAccountPhonenumberGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountPhonenumberGetValidateBeforeCall(startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsAccountPhonenumberGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountPhonenumberPost
     * @param phonenumber phonenumber fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberPostCall(List<String> phonenumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phonenumber;

        // create path and map variables
        String localVarPath = "/v1/account/phonenumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountPhonenumberPostValidateBeforeCall(List<String> phonenumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phonenumber' is set
        if (phonenumber == null) {
            throw new ApiException("Missing the required parameter 'phonenumber' when calling v1AccountPhonenumberPost(Async)");
        }

        return v1AccountPhonenumberPostCall(phonenumber, _callback);

    }

    /**
     * Purchase Number
     * Purchase or activate a phone number for CPaaS accounts within your business.
     * @param phonenumber phonenumber fields (required)
     * @return ServiceDocsOrderPhonenumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsOrderPhonenumber v1AccountPhonenumberPost(List<String> phonenumber) throws ApiException {
        ApiResponse<ServiceDocsOrderPhonenumber> localVarResp = v1AccountPhonenumberPostWithHttpInfo(phonenumber);
        return localVarResp.getData();
    }

    /**
     * Purchase Number
     * Purchase or activate a phone number for CPaaS accounts within your business.
     * @param phonenumber phonenumber fields (required)
     * @return ApiResponse&lt;ServiceDocsOrderPhonenumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsOrderPhonenumber> v1AccountPhonenumberPostWithHttpInfo(List<String> phonenumber) throws ApiException {
        okhttp3.Call localVarCall = v1AccountPhonenumberPostValidateBeforeCall(phonenumber, null);
        Type localVarReturnType = new TypeToken<ServiceDocsOrderPhonenumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purchase Number (asynchronously)
     * Purchase or activate a phone number for CPaaS accounts within your business.
     * @param phonenumber phonenumber fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberPostAsync(List<String> phonenumber, final ApiCallback<ServiceDocsOrderPhonenumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountPhonenumberPostValidateBeforeCall(phonenumber, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsOrderPhonenumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountPhonenumberUnassignPost
     * @param payload unassign payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberUnassignPostCall(ServiceDocsPhonenumberUnassignPayload payload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/v1/account/phonenumber/unassign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountPhonenumberUnassignPostValidateBeforeCall(ServiceDocsPhonenumberUnassignPayload payload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling v1AccountPhonenumberUnassignPost(Async)");
        }

        return v1AccountPhonenumberUnassignPostCall(payload, _callback);

    }

    /**
     * Unassign Number
     * Remove a phone number from an account and place it back on the list of unassigned phone numbers.
     * @param payload unassign payload (required)
     * @return ServiceAPIResponseStatusCodeOnly
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponseStatusCodeOnly v1AccountPhonenumberUnassignPost(ServiceDocsPhonenumberUnassignPayload payload) throws ApiException {
        ApiResponse<ServiceAPIResponseStatusCodeOnly> localVarResp = v1AccountPhonenumberUnassignPostWithHttpInfo(payload);
        return localVarResp.getData();
    }

    /**
     * Unassign Number
     * Remove a phone number from an account and place it back on the list of unassigned phone numbers.
     * @param payload unassign payload (required)
     * @return ApiResponse&lt;ServiceAPIResponseStatusCodeOnly&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponseStatusCodeOnly> v1AccountPhonenumberUnassignPostWithHttpInfo(ServiceDocsPhonenumberUnassignPayload payload) throws ApiException {
        okhttp3.Call localVarCall = v1AccountPhonenumberUnassignPostValidateBeforeCall(payload, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponseStatusCodeOnly>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unassign Number (asynchronously)
     * Remove a phone number from an account and place it back on the list of unassigned phone numbers.
     * @param payload unassign payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountPhonenumberUnassignPostAsync(ServiceDocsPhonenumberUnassignPayload payload, final ApiCallback<ServiceAPIResponseStatusCodeOnly> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountPhonenumberUnassignPostValidateBeforeCall(payload, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponseStatusCodeOnly>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1PhonenumberSearchGet
     * @param areaCode Area code (exactly 3 numeric characters) example: 610 or 484 (required)
     * @param quantity Number of records to return (range: 1 to 100, defaults to 100 if not provided) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1PhonenumberSearchGetCall(String areaCode, Integer quantity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phonenumber/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (areaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area_code", areaCode));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1PhonenumberSearchGetValidateBeforeCall(String areaCode, Integer quantity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'areaCode' is set
        if (areaCode == null) {
            throw new ApiException("Missing the required parameter 'areaCode' when calling v1PhonenumberSearchGet(Async)");
        }

        return v1PhonenumberSearchGetCall(areaCode, quantity, _callback);

    }

    /**
     * Search New Numbers
     * Conduct a search for available phone numbers for purchase within an area code.
     * @param areaCode Area code (exactly 3 numeric characters) example: 610 or 484 (required)
     * @param quantity Number of records to return (range: 1 to 100, defaults to 100 if not provided) (optional, default to 100)
     * @return ServiceDocsPhonenumberSearchGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsPhonenumberSearchGetAll v1PhonenumberSearchGet(String areaCode, Integer quantity) throws ApiException {
        ApiResponse<ServiceDocsPhonenumberSearchGetAll> localVarResp = v1PhonenumberSearchGetWithHttpInfo(areaCode, quantity);
        return localVarResp.getData();
    }

    /**
     * Search New Numbers
     * Conduct a search for available phone numbers for purchase within an area code.
     * @param areaCode Area code (exactly 3 numeric characters) example: 610 or 484 (required)
     * @param quantity Number of records to return (range: 1 to 100, defaults to 100 if not provided) (optional, default to 100)
     * @return ApiResponse&lt;ServiceDocsPhonenumberSearchGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsPhonenumberSearchGetAll> v1PhonenumberSearchGetWithHttpInfo(String areaCode, Integer quantity) throws ApiException {
        okhttp3.Call localVarCall = v1PhonenumberSearchGetValidateBeforeCall(areaCode, quantity, null);
        Type localVarReturnType = new TypeToken<ServiceDocsPhonenumberSearchGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search New Numbers (asynchronously)
     * Conduct a search for available phone numbers for purchase within an area code.
     * @param areaCode Area code (exactly 3 numeric characters) example: 610 or 484 (required)
     * @param quantity Number of records to return (range: 1 to 100, defaults to 100 if not provided) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1PhonenumberSearchGetAsync(String areaCode, Integer quantity, final ApiCallback<ServiceDocsPhonenumberSearchGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1PhonenumberSearchGetValidateBeforeCall(areaCode, quantity, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsPhonenumberSearchGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
