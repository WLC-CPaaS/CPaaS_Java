/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceAPIResponse;
import org.openapitools.client.model.ServiceDocsChannelGetAll;
import org.openapitools.client.model.ServiceDocsChannelGetSingle;
import org.openapitools.client.model.ServiceVOIPChannelRunActionData;
import org.openapitools.client.model.ServiceVOIPChannelRunMetaflowData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDChannelChannelIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelChannelIDGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/channel/{channelID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "channelID" + "}", localVarApiClient.escapeString(channelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDChannelChannelIDGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelChannelIDGet(Async)");
        }

        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling v1AccountAccountIDChannelChannelIDGet(Async)");
        }

        return v1AccountAccountIDChannelChannelIDGetCall(accountID, channelID, _callback);

    }

    /**
     * Get Channel Details
     * Access details about each channel in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @return ServiceDocsChannelGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsChannelGetSingle v1AccountAccountIDChannelChannelIDGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID) throws ApiException {
        ApiResponse<ServiceDocsChannelGetSingle> localVarResp = v1AccountAccountIDChannelChannelIDGetWithHttpInfo(accountID, channelID);
        return localVarResp.getData();
    }

    /**
     * Get Channel Details
     * Access details about each channel in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @return ApiResponse&lt;ServiceDocsChannelGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsChannelGetSingle> v1AccountAccountIDChannelChannelIDGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDChannelChannelIDGetValidateBeforeCall(accountID, channelID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Channel Details (asynchronously)
     * Access details about each channel in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelChannelIDGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, final ApiCallback<ServiceDocsChannelGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDChannelChannelIDGetValidateBeforeCall(accountID, channelID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDChannelChannelIDPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelChannelIDPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunActionData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/channel/{channelID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "channelID" + "}", localVarApiClient.escapeString(channelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDChannelChannelIDPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunActionData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelChannelIDPost(Async)");
        }

        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling v1AccountAccountIDChannelChannelIDPost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDChannelChannelIDPost(Async)");
        }

        return v1AccountAccountIDChannelChannelIDPostCall(accountID, channelID, reqBody, _callback);

    }

    /**
     * Associate Action to Channel
     * Link an action, such as transfer or hangup to a channel.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @return ServiceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponse v1AccountAccountIDChannelChannelIDPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunActionData reqBody) throws ApiException {
        ApiResponse<ServiceAPIResponse> localVarResp = v1AccountAccountIDChannelChannelIDPostWithHttpInfo(accountID, channelID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Associate Action to Channel
     * Link an action, such as transfer or hangup to a channel.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponse> v1AccountAccountIDChannelChannelIDPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunActionData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDChannelChannelIDPostValidateBeforeCall(accountID, channelID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Associate Action to Channel (asynchronously)
     * Link an action, such as transfer or hangup to a channel.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelChannelIDPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunActionData reqBody, final ApiCallback<ServiceAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDChannelChannelIDPostValidateBeforeCall(accountID, channelID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDChannelChannelIDPut
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelChannelIDPutCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunMetaflowData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/channel/{channelID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "channelID" + "}", localVarApiClient.escapeString(channelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDChannelChannelIDPutValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunMetaflowData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelChannelIDPut(Async)");
        }

        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling v1AccountAccountIDChannelChannelIDPut(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDChannelChannelIDPut(Async)");
        }

        return v1AccountAccountIDChannelChannelIDPutCall(accountID, channelID, reqBody, _callback);

    }

    /**
     * Associate Metaflow to Channel
     * Link a metaflow to an active channel.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @return ServiceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponse v1AccountAccountIDChannelChannelIDPut(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunMetaflowData reqBody) throws ApiException {
        ApiResponse<ServiceAPIResponse> localVarResp = v1AccountAccountIDChannelChannelIDPutWithHttpInfo(accountID, channelID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Associate Metaflow to Channel
     * Link a metaflow to an active channel.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponse> v1AccountAccountIDChannelChannelIDPutWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunMetaflowData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDChannelChannelIDPutValidateBeforeCall(accountID, channelID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Associate Metaflow to Channel (asynchronously)
     * Link a metaflow to an active channel.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param channelID Channel ID (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelChannelIDPutAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String channelID, @javax.annotation.Nonnull ServiceVOIPChannelRunMetaflowData reqBody, final ApiCallback<ServiceAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDChannelChannelIDPutValidateBeforeCall(accountID, channelID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDChannelGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelGetCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/channel"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDChannelGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelGet(Async)");
        }

        return v1AccountAccountIDChannelGetCall(accountID, _callback);

    }

    /**
     * Get Account Channel List
     * Get a list of active channels for an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ServiceDocsChannelGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsChannelGetAll v1AccountAccountIDChannelGet(@javax.annotation.Nonnull String accountID) throws ApiException {
        ApiResponse<ServiceDocsChannelGetAll> localVarResp = v1AccountAccountIDChannelGetWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Get Account Channel List
     * Get a list of active channels for an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsChannelGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsChannelGetAll> v1AccountAccountIDChannelGetWithHttpInfo(@javax.annotation.Nonnull String accountID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDChannelGetValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Channel List (asynchronously)
     * Get a list of active channels for an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDChannelGetAsync(@javax.annotation.Nonnull String accountID, final ApiCallback<ServiceDocsChannelGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDChannelGetValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDDeviceDeviceIDChannelGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDChannelGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/device/{deviceID}/channel"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "deviceID" + "}", localVarApiClient.escapeString(deviceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDDeviceDeviceIDChannelGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDChannelGet(Async)");
        }

        // verify the required parameter 'deviceID' is set
        if (deviceID == null) {
            throw new ApiException("Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDChannelGet(Async)");
        }

        return v1AccountAccountIDDeviceDeviceIDChannelGetCall(accountID, deviceID, _callback);

    }

    /**
     * Get Device Channel List
     * Get the list of active channels for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @return ServiceDocsChannelGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsChannelGetAll v1AccountAccountIDDeviceDeviceIDChannelGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID) throws ApiException {
        ApiResponse<ServiceDocsChannelGetAll> localVarResp = v1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfo(accountID, deviceID);
        return localVarResp.getData();
    }

    /**
     * Get Device Channel List
     * Get the list of active channels for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsChannelGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsChannelGetAll> v1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDChannelGetValidateBeforeCall(accountID, deviceID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Device Channel List (asynchronously)
     * Get the list of active channels for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDChannelGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback<ServiceDocsChannelGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDChannelGetValidateBeforeCall(accountID, deviceID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDUserUserIDChannelGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDChannelGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/user/{userID}/channel"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDUserUserIDChannelGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDChannelGet(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDChannelGet(Async)");
        }

        return v1AccountAccountIDUserUserIDChannelGetCall(accountID, userID, _callback);

    }

    /**
     * Get User Channel List
     * Get the list of active channels for a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @return ServiceDocsChannelGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsChannelGetAll v1AccountAccountIDUserUserIDChannelGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID) throws ApiException {
        ApiResponse<ServiceDocsChannelGetAll> localVarResp = v1AccountAccountIDUserUserIDChannelGetWithHttpInfo(accountID, userID);
        return localVarResp.getData();
    }

    /**
     * Get User Channel List
     * Get the list of active channels for a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsChannelGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsChannelGetAll> v1AccountAccountIDUserUserIDChannelGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDChannelGetValidateBeforeCall(accountID, userID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Channel List (asynchronously)
     * Get the list of active channels for a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDChannelGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback<ServiceDocsChannelGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDChannelGetValidateBeforeCall(accountID, userID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsChannelGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
