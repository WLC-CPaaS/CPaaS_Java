/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsMetaflowGet;
import org.openapitools.client.model.ServiceVOIPMetaflowAddData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetaflowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetaflowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetaflowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDDeviceDeviceIDMetaflowDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowDeleteCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/device/{deviceID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "deviceID" + "}", localVarApiClient.escapeString(deviceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowDeleteValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowDelete(Async)");
        }

        // verify the required parameter 'deviceID' is set
        if (deviceID == null) {
            throw new ApiException("Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowDelete(Async)");
        }

        return v1AccountAccountIDDeviceDeviceIDMetaflowDeleteCall(accountID, deviceID, _callback);

    }

    /**
     * Delete Device Metaflow
     * Delete all metaflows associated with a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDDeviceDeviceIDMetaflowDelete(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDDeviceDeviceIDMetaflowDeleteWithHttpInfo(accountID, deviceID);
        return localVarResp.getData();
    }

    /**
     * Delete Device Metaflow
     * Delete all metaflows associated with a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDDeviceDeviceIDMetaflowDeleteWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDMetaflowDeleteValidateBeforeCall(accountID, deviceID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Device Metaflow (asynchronously)
     * Delete all metaflows associated with a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowDeleteAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDMetaflowDeleteValidateBeforeCall(accountID, deviceID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDDeviceDeviceIDMetaflowGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/device/{deviceID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "deviceID" + "}", localVarApiClient.escapeString(deviceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowGet(Async)");
        }

        // verify the required parameter 'deviceID' is set
        if (deviceID == null) {
            throw new ApiException("Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowGet(Async)");
        }

        return v1AccountAccountIDDeviceDeviceIDMetaflowGetCall(accountID, deviceID, _callback);

    }

    /**
     * Get Device Metaflow List
     * Get the list of metaflows for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDDeviceDeviceIDMetaflowGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDDeviceDeviceIDMetaflowGetWithHttpInfo(accountID, deviceID);
        return localVarResp.getData();
    }

    /**
     * Get Device Metaflow List
     * Get the list of metaflows for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDDeviceDeviceIDMetaflowGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDMetaflowGetValidateBeforeCall(accountID, deviceID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Device Metaflow List (asynchronously)
     * Get the list of metaflows for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDMetaflowGetValidateBeforeCall(accountID, deviceID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDDeviceDeviceIDMetaflowPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/device/{deviceID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "deviceID" + "}", localVarApiClient.escapeString(deviceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowPost(Async)");
        }

        // verify the required parameter 'deviceID' is set
        if (deviceID == null) {
            throw new ApiException("Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowPost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDDeviceDeviceIDMetaflowPost(Async)");
        }

        return v1AccountAccountIDDeviceDeviceIDMetaflowPostCall(accountID, deviceID, reqBody, _callback);

    }

    /**
     * Create Device Metaflow
     * Create a metaflow or multiple metaflows for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDDeviceDeviceIDMetaflowPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDDeviceDeviceIDMetaflowPostWithHttpInfo(accountID, deviceID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Create Device Metaflow
     * Create a metaflow or multiple metaflows for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDDeviceDeviceIDMetaflowPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDMetaflowPostValidateBeforeCall(accountID, deviceID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Device Metaflow (asynchronously)
     * Create a metaflow or multiple metaflows for a device.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param deviceID Device ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDDeviceDeviceIDMetaflowPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String deviceID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDDeviceDeviceIDMetaflowPostValidateBeforeCall(accountID, deviceID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDMetaflowDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMetaflowDeleteCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDMetaflowDeleteValidateBeforeCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDMetaflowDelete(Async)");
        }

        return v1AccountAccountIDMetaflowDeleteCall(accountID, _callback);

    }

    /**
     * Delete Account Metaflow
     * Remove all metaflows from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDMetaflowDelete(@javax.annotation.Nonnull String accountID) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDMetaflowDeleteWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Delete Account Metaflow
     * Remove all metaflows from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDMetaflowDeleteWithHttpInfo(@javax.annotation.Nonnull String accountID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDMetaflowDeleteValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Account Metaflow (asynchronously)
     * Remove all metaflows from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMetaflowDeleteAsync(@javax.annotation.Nonnull String accountID, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDMetaflowDeleteValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDMetaflowGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMetaflowGetCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDMetaflowGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDMetaflowGet(Async)");
        }

        return v1AccountAccountIDMetaflowGetCall(accountID, _callback);

    }

    /**
     * Get Account Metaflow List
     * Get an account&#39;s metaflow list.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDMetaflowGet(@javax.annotation.Nonnull String accountID) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDMetaflowGetWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Get Account Metaflow List
     * Get an account&#39;s metaflow list.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDMetaflowGetWithHttpInfo(@javax.annotation.Nonnull String accountID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDMetaflowGetValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Metaflow List (asynchronously)
     * Get an account&#39;s metaflow list.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMetaflowGetAsync(@javax.annotation.Nonnull String accountID, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDMetaflowGetValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDMetaflowPost
     * @param accountID Account ID (required)
     * @param metaflow Metaflow fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMetaflowPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData metaflow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaflow;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDMetaflowPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData metaflow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDMetaflowPost(Async)");
        }

        // verify the required parameter 'metaflow' is set
        if (metaflow == null) {
            throw new ApiException("Missing the required parameter 'metaflow' when calling v1AccountAccountIDMetaflowPost(Async)");
        }

        return v1AccountAccountIDMetaflowPostCall(accountID, metaflow, _callback);

    }

    /**
     * Create Account Metaflow
     * Generate a metaflow for an account.
     * @param accountID Account ID (required)
     * @param metaflow Metaflow fields (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDMetaflowPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData metaflow) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDMetaflowPostWithHttpInfo(accountID, metaflow);
        return localVarResp.getData();
    }

    /**
     * Create Account Metaflow
     * Generate a metaflow for an account.
     * @param accountID Account ID (required)
     * @param metaflow Metaflow fields (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDMetaflowPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData metaflow) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDMetaflowPostValidateBeforeCall(accountID, metaflow, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Account Metaflow (asynchronously)
     * Generate a metaflow for an account.
     * @param accountID Account ID (required)
     * @param metaflow Metaflow fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMetaflowPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData metaflow, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDMetaflowPostValidateBeforeCall(accountID, metaflow, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDUserUserIDMetaflowDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDMetaflowDeleteCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/user/{userID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDUserUserIDMetaflowDeleteValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDMetaflowDelete(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDMetaflowDelete(Async)");
        }

        return v1AccountAccountIDUserUserIDMetaflowDeleteCall(accountID, userID, _callback);

    }

    /**
     * Delete User Metaflow
     * Delete all metaflows associated with a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDUserUserIDMetaflowDelete(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDUserUserIDMetaflowDeleteWithHttpInfo(accountID, userID);
        return localVarResp.getData();
    }

    /**
     * Delete User Metaflow
     * Delete all metaflows associated with a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDUserUserIDMetaflowDeleteWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDMetaflowDeleteValidateBeforeCall(accountID, userID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete User Metaflow (asynchronously)
     * Delete all metaflows associated with a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDMetaflowDeleteAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDMetaflowDeleteValidateBeforeCall(accountID, userID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDUserUserIDMetaflowGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDMetaflowGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/user/{userID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDUserUserIDMetaflowGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDMetaflowGet(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDMetaflowGet(Async)");
        }

        return v1AccountAccountIDUserUserIDMetaflowGetCall(accountID, userID, _callback);

    }

    /**
     * Get User Metaflow List
     * Get the list of metaflows for a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDUserUserIDMetaflowGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDUserUserIDMetaflowGetWithHttpInfo(accountID, userID);
        return localVarResp.getData();
    }

    /**
     * Get User Metaflow List
     * Get the list of metaflows for a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDUserUserIDMetaflowGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDMetaflowGetValidateBeforeCall(accountID, userID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Metaflow List (asynchronously)
     * Get the list of metaflows for a user.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDMetaflowGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDMetaflowGetValidateBeforeCall(accountID, userID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDUserUserIDMetaflowPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDMetaflowPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/user/{userID}/metaflow"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDUserUserIDMetaflowPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDMetaflowPost(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDMetaflowPost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDUserUserIDMetaflowPost(Async)");
        }

        return v1AccountAccountIDUserUserIDMetaflowPostCall(accountID, userID, reqBody, _callback);

    }

    /**
     * Create User Metaflow
     * Add a metaflow or multiple metaflows for a user in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsMetaflowGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMetaflowGet v1AccountAccountIDUserUserIDMetaflowPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody) throws ApiException {
        ApiResponse<ServiceDocsMetaflowGet> localVarResp = v1AccountAccountIDUserUserIDMetaflowPostWithHttpInfo(accountID, userID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Create User Metaflow
     * Add a metaflow or multiple metaflows for a user in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsMetaflowGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMetaflowGet> v1AccountAccountIDUserUserIDMetaflowPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDMetaflowPostValidateBeforeCall(accountID, userID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User Metaflow (asynchronously)
     * Add a metaflow or multiple metaflows for a user in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID user ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDMetaflowPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String userID, @javax.annotation.Nonnull ServiceVOIPMetaflowAddData reqBody, final ApiCallback<ServiceDocsMetaflowGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDMetaflowPostValidateBeforeCall(accountID, userID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMetaflowGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
