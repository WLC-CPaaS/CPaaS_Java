/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsE911ActiveLocationOutput;
import org.openapitools.client.model.ServiceDocsE911ActiveLocationURIApiOutput;
import org.openapitools.client.model.ServiceDocsE911AddLocationOutput;
import org.openapitools.client.model.ServiceDocsE911LocationsURIApiOutput;
import org.openapitools.client.model.ServiceDocsE911RemoveLocationOutput;
import org.openapitools.client.model.ServiceDocsE911RemoveURIApiOutput;
import org.openapitools.client.model.ServiceDocsE911URIsApiOutput;
import org.openapitools.client.model.ServiceDocsE911ValidateLocationOutput;
import org.openapitools.client.model.ServiceE911AddLocationInput;
import org.openapitools.client.model.ServiceE911ValidateLocationInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class E911Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public E911Api() {
        this(Configuration.getDefaultApiClient());
    }

    public E911Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1E911Get
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 URIs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911GetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/e911";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911GetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1E911GetCall(_callback);

    }

    /**
     * Get E911 List
     * Obtain e911 URIs associated with the provided account ID.
     * @return ServiceDocsE911URIsApiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 URIs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911URIsApiOutput v1E911Get() throws ApiException {
        ApiResponse<ServiceDocsE911URIsApiOutput> localVarResp = v1E911GetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get E911 List
     * Obtain e911 URIs associated with the provided account ID.
     * @return ApiResponse&lt;ServiceDocsE911URIsApiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 URIs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911URIsApiOutput> v1E911GetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1E911GetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911URIsApiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get E911 List (asynchronously)
     * Obtain e911 URIs associated with the provided account ID.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 URIs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911GetAsync(final ApiCallback<ServiceDocsE911URIsApiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911GetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911URIsApiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1E911LocationLocationIDActivatePut
     * @param locationID Location ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location activate status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911LocationLocationIDActivatePutCall(@javax.annotation.Nonnull String locationID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/e911/location/{locationID}/activate"
            .replace("{" + "locationID" + "}", localVarApiClient.escapeString(locationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911LocationLocationIDActivatePutValidateBeforeCall(@javax.annotation.Nonnull String locationID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationID' is set
        if (locationID == null) {
            throw new ApiException("Missing the required parameter 'locationID' when calling v1E911LocationLocationIDActivatePut(Async)");
        }

        return v1E911LocationLocationIDActivatePutCall(locationID, _callback);

    }

    /**
     * Activate E911 Location
     * Edit the provision location.
     * @param locationID Location ID (required)
     * @return ServiceDocsE911ActiveLocationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location activate status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911ActiveLocationOutput v1E911LocationLocationIDActivatePut(@javax.annotation.Nonnull String locationID) throws ApiException {
        ApiResponse<ServiceDocsE911ActiveLocationOutput> localVarResp = v1E911LocationLocationIDActivatePutWithHttpInfo(locationID);
        return localVarResp.getData();
    }

    /**
     * Activate E911 Location
     * Edit the provision location.
     * @param locationID Location ID (required)
     * @return ApiResponse&lt;ServiceDocsE911ActiveLocationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location activate status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911ActiveLocationOutput> v1E911LocationLocationIDActivatePutWithHttpInfo(@javax.annotation.Nonnull String locationID) throws ApiException {
        okhttp3.Call localVarCall = v1E911LocationLocationIDActivatePutValidateBeforeCall(locationID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911ActiveLocationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate E911 Location (asynchronously)
     * Edit the provision location.
     * @param locationID Location ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location activate status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911LocationLocationIDActivatePutAsync(@javax.annotation.Nonnull String locationID, final ApiCallback<ServiceDocsE911ActiveLocationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911LocationLocationIDActivatePutValidateBeforeCall(locationID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911ActiveLocationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1E911LocationLocationIDDelete
     * @param locationID Location ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location remove status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911LocationLocationIDDeleteCall(@javax.annotation.Nonnull String locationID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/e911/location/{locationID}"
            .replace("{" + "locationID" + "}", localVarApiClient.escapeString(locationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911LocationLocationIDDeleteValidateBeforeCall(@javax.annotation.Nonnull String locationID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationID' is set
        if (locationID == null) {
            throw new ApiException("Missing the required parameter 'locationID' when calling v1E911LocationLocationIDDelete(Async)");
        }

        return v1E911LocationLocationIDDeleteCall(locationID, _callback);

    }

    /**
     * Delete E911 Location
     * Remove the location.
     * @param locationID Location ID (required)
     * @return ServiceDocsE911RemoveLocationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location remove status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911RemoveLocationOutput v1E911LocationLocationIDDelete(@javax.annotation.Nonnull String locationID) throws ApiException {
        ApiResponse<ServiceDocsE911RemoveLocationOutput> localVarResp = v1E911LocationLocationIDDeleteWithHttpInfo(locationID);
        return localVarResp.getData();
    }

    /**
     * Delete E911 Location
     * Remove the location.
     * @param locationID Location ID (required)
     * @return ApiResponse&lt;ServiceDocsE911RemoveLocationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location remove status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911RemoveLocationOutput> v1E911LocationLocationIDDeleteWithHttpInfo(@javax.annotation.Nonnull String locationID) throws ApiException {
        okhttp3.Call localVarCall = v1E911LocationLocationIDDeleteValidateBeforeCall(locationID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911RemoveLocationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete E911 Location (asynchronously)
     * Remove the location.
     * @param locationID Location ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location remove status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911LocationLocationIDDeleteAsync(@javax.annotation.Nonnull String locationID, final ApiCallback<ServiceDocsE911RemoveLocationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911LocationLocationIDDeleteValidateBeforeCall(locationID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911RemoveLocationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1E911LocationValidatePut
     * @param reqBody location details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911LocationValidatePutCall(@javax.annotation.Nonnull ServiceE911ValidateLocationInput reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/e911/location/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911LocationValidatePutValidateBeforeCall(@javax.annotation.Nonnull ServiceE911ValidateLocationInput reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1E911LocationValidatePut(Async)");
        }

        return v1E911LocationValidatePutCall(reqBody, _callback);

    }

    /**
     * Validate a Location
     * Validate the location details.
     * @param reqBody location details (required)
     * @return ServiceDocsE911ValidateLocationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911ValidateLocationOutput v1E911LocationValidatePut(@javax.annotation.Nonnull ServiceE911ValidateLocationInput reqBody) throws ApiException {
        ApiResponse<ServiceDocsE911ValidateLocationOutput> localVarResp = v1E911LocationValidatePutWithHttpInfo(reqBody);
        return localVarResp.getData();
    }

    /**
     * Validate a Location
     * Validate the location details.
     * @param reqBody location details (required)
     * @return ApiResponse&lt;ServiceDocsE911ValidateLocationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911ValidateLocationOutput> v1E911LocationValidatePutWithHttpInfo(@javax.annotation.Nonnull ServiceE911ValidateLocationInput reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1E911LocationValidatePutValidateBeforeCall(reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911ValidateLocationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate a Location (asynchronously)
     * Validate the location details.
     * @param reqBody location details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911LocationValidatePutAsync(@javax.annotation.Nonnull ServiceE911ValidateLocationInput reqBody, final ApiCallback<ServiceDocsE911ValidateLocationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911LocationValidatePutValidateBeforeCall(reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911ValidateLocationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1E911PhoneNumberDelete
     * @param phoneNumber Phone Number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PhoneNumberDeleteCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/e911/{phoneNumber}"
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911PhoneNumberDeleteValidateBeforeCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberDelete(Async)");
        }

        return v1E911PhoneNumberDeleteCall(phoneNumber, _callback);

    }

    /**
     * Delete E911 Phone Number
     * Delete the e911 URI connected with the account URI.
     * @param phoneNumber Phone Number (required)
     * @return ServiceDocsE911RemoveURIApiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911RemoveURIApiOutput v1E911PhoneNumberDelete(@javax.annotation.Nonnull String phoneNumber) throws ApiException {
        ApiResponse<ServiceDocsE911RemoveURIApiOutput> localVarResp = v1E911PhoneNumberDeleteWithHttpInfo(phoneNumber);
        return localVarResp.getData();
    }

    /**
     * Delete E911 Phone Number
     * Delete the e911 URI connected with the account URI.
     * @param phoneNumber Phone Number (required)
     * @return ApiResponse&lt;ServiceDocsE911RemoveURIApiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911RemoveURIApiOutput> v1E911PhoneNumberDeleteWithHttpInfo(@javax.annotation.Nonnull String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = v1E911PhoneNumberDeleteValidateBeforeCall(phoneNumber, null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911RemoveURIApiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete E911 Phone Number (asynchronously)
     * Delete the e911 URI connected with the account URI.
     * @param phoneNumber Phone Number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PhoneNumberDeleteAsync(@javax.annotation.Nonnull String phoneNumber, final ApiCallback<ServiceDocsE911RemoveURIApiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911PhoneNumberDeleteValidateBeforeCall(phoneNumber, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911RemoveURIApiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1E911PhoneNumberLocationActiveGet
     * @param phoneNumber Phone Number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Active Location URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PhoneNumberLocationActiveGetCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/e911/{phoneNumber}/location/active"
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911PhoneNumberLocationActiveGetValidateBeforeCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationActiveGet(Async)");
        }

        return v1E911PhoneNumberLocationActiveGetCall(phoneNumber, _callback);

    }

    /**
     * Get Actvie Location for a Phone Number
     * Get the e911 location connected with the URI.
     * @param phoneNumber Phone Number (required)
     * @return ServiceDocsE911ActiveLocationURIApiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Active Location URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911ActiveLocationURIApiOutput v1E911PhoneNumberLocationActiveGet(@javax.annotation.Nonnull String phoneNumber) throws ApiException {
        ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput> localVarResp = v1E911PhoneNumberLocationActiveGetWithHttpInfo(phoneNumber);
        return localVarResp.getData();
    }

    /**
     * Get Actvie Location for a Phone Number
     * Get the e911 location connected with the URI.
     * @param phoneNumber Phone Number (required)
     * @return ApiResponse&lt;ServiceDocsE911ActiveLocationURIApiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Active Location URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput> v1E911PhoneNumberLocationActiveGetWithHttpInfo(@javax.annotation.Nonnull String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = v1E911PhoneNumberLocationActiveGetValidateBeforeCall(phoneNumber, null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911ActiveLocationURIApiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Actvie Location for a Phone Number (asynchronously)
     * Get the e911 location connected with the URI.
     * @param phoneNumber Phone Number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Active Location URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PhoneNumberLocationActiveGetAsync(@javax.annotation.Nonnull String phoneNumber, final ApiCallback<ServiceDocsE911ActiveLocationURIApiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911PhoneNumberLocationActiveGetValidateBeforeCall(phoneNumber, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911ActiveLocationURIApiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1E911PhoneNumberLocationGet
     * @param phoneNumber Phone Number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Locations URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PhoneNumberLocationGetCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/e911/{phoneNumber}/location"
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911PhoneNumberLocationGetValidateBeforeCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationGet(Async)");
        }

        return v1E911PhoneNumberLocationGetCall(phoneNumber, _callback);

    }

    /**
     * Get Location List for Phone Number
     * Access a list of the e911 locations associated with the provided URI.
     * @param phoneNumber Phone Number (required)
     * @return ServiceDocsE911LocationsURIApiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Locations URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911LocationsURIApiOutput v1E911PhoneNumberLocationGet(@javax.annotation.Nonnull String phoneNumber) throws ApiException {
        ApiResponse<ServiceDocsE911LocationsURIApiOutput> localVarResp = v1E911PhoneNumberLocationGetWithHttpInfo(phoneNumber);
        return localVarResp.getData();
    }

    /**
     * Get Location List for Phone Number
     * Access a list of the e911 locations associated with the provided URI.
     * @param phoneNumber Phone Number (required)
     * @return ApiResponse&lt;ServiceDocsE911LocationsURIApiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Locations URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911LocationsURIApiOutput> v1E911PhoneNumberLocationGetWithHttpInfo(@javax.annotation.Nonnull String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = v1E911PhoneNumberLocationGetValidateBeforeCall(phoneNumber, null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911LocationsURIApiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Location List for Phone Number (asynchronously)
     * Access a list of the e911 locations associated with the provided URI.
     * @param phoneNumber Phone Number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with e911 Locations URI </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PhoneNumberLocationGetAsync(@javax.annotation.Nonnull String phoneNumber, final ApiCallback<ServiceDocsE911LocationsURIApiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911PhoneNumberLocationGetValidateBeforeCall(phoneNumber, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911LocationsURIApiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1E911Post
     * @param reqBody location details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PostCall(@javax.annotation.Nonnull ServiceE911AddLocationInput reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/e911";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1E911PostValidateBeforeCall(@javax.annotation.Nonnull ServiceE911AddLocationInput reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1E911Post(Async)");
        }

        return v1E911PostCall(reqBody, _callback);

    }

    /**
     * Create an E911 Location
     * Enter new location details.
     * @param reqBody location details (required)
     * @return ServiceDocsE911AddLocationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsE911AddLocationOutput v1E911Post(@javax.annotation.Nonnull ServiceE911AddLocationInput reqBody) throws ApiException {
        ApiResponse<ServiceDocsE911AddLocationOutput> localVarResp = v1E911PostWithHttpInfo(reqBody);
        return localVarResp.getData();
    }

    /**
     * Create an E911 Location
     * Enter new location details.
     * @param reqBody location details (required)
     * @return ApiResponse&lt;ServiceDocsE911AddLocationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsE911AddLocationOutput> v1E911PostWithHttpInfo(@javax.annotation.Nonnull ServiceE911AddLocationInput reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1E911PostValidateBeforeCall(reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsE911AddLocationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an E911 Location (asynchronously)
     * Enter new location details.
     * @param reqBody location details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with location details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed or root account not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, including environment credential issues, HTTP request failures, or XML unmarshaling errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1E911PostAsync(@javax.annotation.Nonnull ServiceE911AddLocationInput reqBody, final ApiCallback<ServiceDocsE911AddLocationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1E911PostValidateBeforeCall(reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsE911AddLocationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
