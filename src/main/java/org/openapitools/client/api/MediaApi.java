/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import java.io.File;
import org.openapitools.client.model.ServiceDocsMediaGetAll;
import org.openapitools.client.model.ServiceDocsMediaGetSingle;
import org.openapitools.client.model.ServiceVOIPMediaAddEditData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MediaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDMediaMediaIDFileGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMediaMediaIDFileGetCall(String accountID, String mediaID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/media/{mediaID}/file"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "mediaID" + "}", localVarApiClient.escapeString(mediaID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "audio/mp3",
            "audio/mpeg",
            "audio/mpeg3",
            "audio/x-wav",
            "audio/wav",
            "audio/ogg",
            "video/x-flv",
            "video/h264",
            "video/mpeg",
            "video/quicktime",
            "video/mp4",
            "video/webm"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDMediaMediaIDFileGetValidateBeforeCall(String accountID, String mediaID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFileGet(Async)");
        }

        // verify the required parameter 'mediaID' is set
        if (mediaID == null) {
            throw new ApiException("Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFileGet(Async)");
        }

        return v1AccountAccountIDMediaMediaIDFileGetCall(accountID, mediaID, _callback);

    }

    /**
     * Get Media File
     * Gather data about the media objects in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public File v1AccountAccountIDMediaMediaIDFileGet(String accountID, String mediaID) throws ApiException {
        ApiResponse<File> localVarResp = v1AccountAccountIDMediaMediaIDFileGetWithHttpInfo(accountID, mediaID);
        return localVarResp.getData();
    }

    /**
     * Get Media File
     * Gather data about the media objects in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> v1AccountAccountIDMediaMediaIDFileGetWithHttpInfo(String accountID, String mediaID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDMediaMediaIDFileGetValidateBeforeCall(accountID, mediaID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Media File (asynchronously)
     * Gather data about the media objects in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMediaMediaIDFileGetAsync(String accountID, String mediaID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDMediaMediaIDFileGetValidateBeforeCall(accountID, mediaID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDMediaMediaIDFilePost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @param _file Media file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMediaMediaIDFilePostCall(String accountID, String mediaID, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/media/{mediaID}/file"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "mediaID" + "}", localVarApiClient.escapeString(mediaID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDMediaMediaIDFilePostValidateBeforeCall(String accountID, String mediaID, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFilePost(Async)");
        }

        // verify the required parameter 'mediaID' is set
        if (mediaID == null) {
            throw new ApiException("Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFilePost(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling v1AccountAccountIDMediaMediaIDFilePost(Async)");
        }

        return v1AccountAccountIDMediaMediaIDFilePostCall(accountID, mediaID, _file, _callback);

    }

    /**
     * Add Media File
     * Include a media file that is connected to a media object in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @param _file Media file (required)
     * @return ServiceDocsMediaGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMediaGetSingle v1AccountAccountIDMediaMediaIDFilePost(String accountID, String mediaID, File _file) throws ApiException {
        ApiResponse<ServiceDocsMediaGetSingle> localVarResp = v1AccountAccountIDMediaMediaIDFilePostWithHttpInfo(accountID, mediaID, _file);
        return localVarResp.getData();
    }

    /**
     * Add Media File
     * Include a media file that is connected to a media object in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @param _file Media file (required)
     * @return ApiResponse&lt;ServiceDocsMediaGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMediaGetSingle> v1AccountAccountIDMediaMediaIDFilePostWithHttpInfo(String accountID, String mediaID, File _file) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDMediaMediaIDFilePostValidateBeforeCall(accountID, mediaID, _file, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Media File (asynchronously)
     * Include a media file that is connected to a media object in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param mediaID Media ID, 32 alpha numeric (required)
     * @param _file Media file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDMediaMediaIDFilePostAsync(String accountID, String mediaID, File _file, final ApiCallback<ServiceDocsMediaGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDMediaMediaIDFilePostValidateBeforeCall(accountID, mediaID, _file, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidMediaGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaGetCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/media"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidMediaGetValidateBeforeCall(String accountid, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaGet(Async)");
        }

        return v1AccountAccountidMediaGetCall(accountid, startKey, pageSize, _callback);

    }

    /**
     * Get Media List
     * View all media files for an account in your organization.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ServiceDocsMediaGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMediaGetAll v1AccountAccountidMediaGet(String accountid, String startKey, Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsMediaGetAll> localVarResp = v1AccountAccountidMediaGetWithHttpInfo(accountid, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Media List
     * View all media files for an account in your organization.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ApiResponse&lt;ServiceDocsMediaGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMediaGetAll> v1AccountAccountidMediaGetWithHttpInfo(String accountid, String startKey, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidMediaGetValidateBeforeCall(accountid, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Media List (asynchronously)
     * View all media files for an account in your organization.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaGetAsync(String accountid, String startKey, Integer pageSize, final ApiCallback<ServiceDocsMediaGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidMediaGetValidateBeforeCall(accountid, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidMediaMediaidDelete
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Device ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaMediaidDeleteCall(String accountid, String mediaid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/media/{mediaid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "mediaid" + "}", localVarApiClient.escapeString(mediaid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidMediaMediaidDeleteValidateBeforeCall(String accountid, String mediaid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidDelete(Async)");
        }

        // verify the required parameter 'mediaid' is set
        if (mediaid == null) {
            throw new ApiException("Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidDelete(Async)");
        }

        return v1AccountAccountidMediaMediaidDeleteCall(accountid, mediaid, _callback);

    }

    /**
     * Delete Media
     * Remove a media file that is no longer in use from an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Device ID, 32 alpha numeric (required)
     * @return ServiceDocsMediaGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMediaGetSingle v1AccountAccountidMediaMediaidDelete(String accountid, String mediaid) throws ApiException {
        ApiResponse<ServiceDocsMediaGetSingle> localVarResp = v1AccountAccountidMediaMediaidDeleteWithHttpInfo(accountid, mediaid);
        return localVarResp.getData();
    }

    /**
     * Delete Media
     * Remove a media file that is no longer in use from an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Device ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMediaGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMediaGetSingle> v1AccountAccountidMediaMediaidDeleteWithHttpInfo(String accountid, String mediaid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidMediaMediaidDeleteValidateBeforeCall(accountid, mediaid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Media (asynchronously)
     * Remove a media file that is no longer in use from an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Device ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaMediaidDeleteAsync(String accountid, String mediaid, final ApiCallback<ServiceDocsMediaGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidMediaMediaidDeleteValidateBeforeCall(accountid, mediaid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidMediaMediaidGet
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Media ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaMediaidGetCall(String accountid, String mediaid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/media/{mediaid}"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()))
            .replace("{" + "mediaid" + "}", localVarApiClient.escapeString(mediaid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidMediaMediaidGetValidateBeforeCall(String accountid, String mediaid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidGet(Async)");
        }

        // verify the required parameter 'mediaid' is set
        if (mediaid == null) {
            throw new ApiException("Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidGet(Async)");
        }

        return v1AccountAccountidMediaMediaidGetCall(accountid, mediaid, _callback);

    }

    /**
     * Get Media Details
     * Permit users to view an account&#39;s specific media information.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Media ID, 32 alpha numeric (required)
     * @return ServiceDocsMediaGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMediaGetSingle v1AccountAccountidMediaMediaidGet(String accountid, String mediaid) throws ApiException {
        ApiResponse<ServiceDocsMediaGetSingle> localVarResp = v1AccountAccountidMediaMediaidGetWithHttpInfo(accountid, mediaid);
        return localVarResp.getData();
    }

    /**
     * Get Media Details
     * Permit users to view an account&#39;s specific media information.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Media ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsMediaGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMediaGetSingle> v1AccountAccountidMediaMediaidGetWithHttpInfo(String accountid, String mediaid) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidMediaMediaidGetValidateBeforeCall(accountid, mediaid, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Media Details (asynchronously)
     * Permit users to view an account&#39;s specific media information.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param mediaid Media ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaMediaidGetAsync(String accountid, String mediaid, final ApiCallback<ServiceDocsMediaGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidMediaMediaidGetValidateBeforeCall(accountid, mediaid, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountidMediaPost
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param media Media creation or update payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaPostCall(String accountid, ServiceVOIPMediaAddEditData media, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = media;

        // create path and map variables
        String localVarPath = "/v1/account/{accountid}/media"
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountidMediaPostValidateBeforeCall(String accountid, ServiceVOIPMediaAddEditData media, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaPost(Async)");
        }

        // verify the required parameter 'media' is set
        if (media == null) {
            throw new ApiException("Missing the required parameter 'media' when calling v1AccountAccountidMediaPost(Async)");
        }

        return v1AccountAccountidMediaPostCall(accountid, media, _callback);

    }

    /**
     * Create Media
     * Generate a media object to allow users to upload a media file in an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param media Media creation or update payload (required)
     * @return ServiceDocsMediaGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsMediaGetSingle v1AccountAccountidMediaPost(String accountid, ServiceVOIPMediaAddEditData media) throws ApiException {
        ApiResponse<ServiceDocsMediaGetSingle> localVarResp = v1AccountAccountidMediaPostWithHttpInfo(accountid, media);
        return localVarResp.getData();
    }

    /**
     * Create Media
     * Generate a media object to allow users to upload a media file in an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param media Media creation or update payload (required)
     * @return ApiResponse&lt;ServiceDocsMediaGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsMediaGetSingle> v1AccountAccountidMediaPostWithHttpInfo(String accountid, ServiceVOIPMediaAddEditData media) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountidMediaPostValidateBeforeCall(accountid, media, null);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Media (asynchronously)
     * Generate a media object to allow users to upload a media file in an account.
     * @param accountid Account ID, 32 alpha numeric (required)
     * @param media Media creation or update payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountidMediaPostAsync(String accountid, ServiceVOIPMediaAddEditData media, final ApiCallback<ServiceDocsMediaGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountidMediaPostValidateBeforeCall(accountid, media, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsMediaGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
