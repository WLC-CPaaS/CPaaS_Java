/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsCallRecordingGetAll;
import org.openapitools.client.model.ServiceDocsCallRecordingGetSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallRecordingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallRecordingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallRecordingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDRecordingGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecordingGetCall(String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/recording"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDRecordingGetValidateBeforeCall(String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingGet(Async)");
        }

        return v1AccountAccountIDRecordingGetCall(accountID, _callback);

    }

    /**
     * Get Account Call Recording
     * Obtain a list of the call recordings within an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ServiceDocsCallRecordingGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallRecordingGetAll v1AccountAccountIDRecordingGet(String accountID) throws ApiException {
        ApiResponse<ServiceDocsCallRecordingGetAll> localVarResp = v1AccountAccountIDRecordingGetWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Get Account Call Recording
     * Obtain a list of the call recordings within an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallRecordingGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallRecordingGetAll> v1AccountAccountIDRecordingGetWithHttpInfo(String accountID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDRecordingGetValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Call Recording (asynchronously)
     * Obtain a list of the call recordings within an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecordingGetAsync(String accountID, final ApiCallback<ServiceDocsCallRecordingGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDRecordingGetValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDRecordingRecordingIDDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecordingRecordingIDDeleteCall(String accountID, String recordingID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/recording/{recordingID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "recordingID" + "}", localVarApiClient.escapeString(recordingID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDRecordingRecordingIDDeleteValidateBeforeCall(String accountID, String recordingID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingRecordingIDDelete(Async)");
        }

        // verify the required parameter 'recordingID' is set
        if (recordingID == null) {
            throw new ApiException("Missing the required parameter 'recordingID' when calling v1AccountAccountIDRecordingRecordingIDDelete(Async)");
        }

        return v1AccountAccountIDRecordingRecordingIDDeleteCall(accountID, recordingID, _callback);

    }

    /**
     * Delete Call Recording
     * Delete a single call recording from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @return ServiceDocsCallRecordingGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallRecordingGetSingle v1AccountAccountIDRecordingRecordingIDDelete(String accountID, String recordingID) throws ApiException {
        ApiResponse<ServiceDocsCallRecordingGetSingle> localVarResp = v1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfo(accountID, recordingID);
        return localVarResp.getData();
    }

    /**
     * Delete Call Recording
     * Delete a single call recording from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @return ApiResponse&lt;ServiceDocsCallRecordingGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallRecordingGetSingle> v1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfo(String accountID, String recordingID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDRecordingRecordingIDDeleteValidateBeforeCall(accountID, recordingID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Call Recording (asynchronously)
     * Delete a single call recording from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecordingRecordingIDDeleteAsync(String accountID, String recordingID, final ApiCallback<ServiceDocsCallRecordingGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDRecordingRecordingIDDeleteValidateBeforeCall(accountID, recordingID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDRecordingRecordingIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecordingRecordingIDGetCall(String accountID, String recordingID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/recording/{recordingID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "recordingID" + "}", localVarApiClient.escapeString(recordingID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "audio/mp3",
            "audio/mpeg",
            "audio/mpeg3",
            "audio/x-wav",
            "audio/wav"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDRecordingRecordingIDGetValidateBeforeCall(String accountID, String recordingID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingRecordingIDGet(Async)");
        }

        // verify the required parameter 'recordingID' is set
        if (recordingID == null) {
            throw new ApiException("Missing the required parameter 'recordingID' when calling v1AccountAccountIDRecordingRecordingIDGet(Async)");
        }

        return v1AccountAccountIDRecordingRecordingIDGetCall(accountID, recordingID, _callback);

    }

    /**
     * Get Call Recording Details
     * Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @return ServiceDocsCallRecordingGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallRecordingGetSingle v1AccountAccountIDRecordingRecordingIDGet(String accountID, String recordingID) throws ApiException {
        ApiResponse<ServiceDocsCallRecordingGetSingle> localVarResp = v1AccountAccountIDRecordingRecordingIDGetWithHttpInfo(accountID, recordingID);
        return localVarResp.getData();
    }

    /**
     * Get Call Recording Details
     * Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @return ApiResponse&lt;ServiceDocsCallRecordingGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallRecordingGetSingle> v1AccountAccountIDRecordingRecordingIDGetWithHttpInfo(String accountID, String recordingID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDRecordingRecordingIDGetValidateBeforeCall(accountID, recordingID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Call Recording Details (asynchronously)
     * Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecordingRecordingIDGetAsync(String accountID, String recordingID, final ApiCallback<ServiceDocsCallRecordingGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDRecordingRecordingIDGetValidateBeforeCall(accountID, recordingID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDUserUserIDRecordingGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDRecordingGetCall(String accountID, String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/user/{userID}/recording"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDUserUserIDRecordingGetValidateBeforeCall(String accountID, String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDRecordingGet(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDRecordingGet(Async)");
        }

        return v1AccountAccountIDUserUserIDRecordingGetCall(accountID, userID, _callback);

    }

    /**
     * Get User Call Recording
     * Retrieve a list of call recordings for a user within an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @return ServiceDocsCallRecordingGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallRecordingGetAll v1AccountAccountIDUserUserIDRecordingGet(String accountID, String userID) throws ApiException {
        ApiResponse<ServiceDocsCallRecordingGetAll> localVarResp = v1AccountAccountIDUserUserIDRecordingGetWithHttpInfo(accountID, userID);
        return localVarResp.getData();
    }

    /**
     * Get User Call Recording
     * Retrieve a list of call recordings for a user within an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsCallRecordingGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallRecordingGetAll> v1AccountAccountIDUserUserIDRecordingGetWithHttpInfo(String accountID, String userID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDRecordingGetValidateBeforeCall(accountID, userID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Call Recording (asynchronously)
     * Retrieve a list of call recordings for a user within an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param userID User ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDUserUserIDRecordingGetAsync(String accountID, String userID, final ApiCallback<ServiceDocsCallRecordingGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDUserUserIDRecordingGetValidateBeforeCall(accountID, userID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallRecordingGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
