/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceAPIResponse;
import org.openapitools.client.model.ServiceDocsCallQueueRecipientLoginLogoutOutput;
import org.openapitools.client.model.ServiceDocsGetQueueRecipients;
import org.openapitools.client.model.ServiceVOIPCallQueueRecipientLoginLogoutData;
import org.openapitools.client.model.ServiceVOIPCallQueueRecipientStatusData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallQueueRecipientApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallQueueRecipientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallQueueRecipientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDLoginrecipientRecipientIDPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDLoginrecipientRecipientIDPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientLoginLogoutData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/loginrecipient/{recipientID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "recipientID" + "}", localVarApiClient.escapeString(recipientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDLoginrecipientRecipientIDPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientLoginLogoutData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDLoginrecipientRecipientIDPost(Async)");
        }

        // verify the required parameter 'recipientID' is set
        if (recipientID == null) {
            throw new ApiException("Missing the required parameter 'recipientID' when calling v1AccountAccountIDLoginrecipientRecipientIDPost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDLoginrecipientRecipientIDPost(Async)");
        }

        return v1AccountAccountIDLoginrecipientRecipientIDPostCall(accountID, recipientID, reqBody, _callback);

    }

    /**
     * Login as Recipient
     * Agents must log in to receive calls. Depending on their membership, they can log in to one or more queues. (If an agent is a member of more than one queue, they will receive calls from all the queues they are a part of.)
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsCallQueueRecipientLoginLogoutOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsCallQueueRecipientLoginLogoutOutput v1AccountAccountIDLoginrecipientRecipientIDPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientLoginLogoutData reqBody) throws ApiException {
        ApiResponse<ServiceDocsCallQueueRecipientLoginLogoutOutput> localVarResp = v1AccountAccountIDLoginrecipientRecipientIDPostWithHttpInfo(accountID, recipientID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Login as Recipient
     * Agents must log in to receive calls. Depending on their membership, they can log in to one or more queues. (If an agent is a member of more than one queue, they will receive calls from all the queues they are a part of.)
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsCallQueueRecipientLoginLogoutOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsCallQueueRecipientLoginLogoutOutput> v1AccountAccountIDLoginrecipientRecipientIDPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientLoginLogoutData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDLoginrecipientRecipientIDPostValidateBeforeCall(accountID, recipientID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueRecipientLoginLogoutOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Login as Recipient (asynchronously)
     * Agents must log in to receive calls. Depending on their membership, they can log in to one or more queues. (If an agent is a member of more than one queue, they will receive calls from all the queues they are a part of.)
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDLoginrecipientRecipientIDPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientLoginLogoutData reqBody, final ApiCallback<ServiceDocsCallQueueRecipientLoginLogoutOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDLoginrecipientRecipientIDPostValidateBeforeCall(accountID, recipientID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsCallQueueRecipientLoginLogoutOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDQueuerecipientGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuerecipientGetCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/queuerecipient"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDQueuerecipientGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerecipientGet(Async)");
        }

        return v1AccountAccountIDQueuerecipientGetCall(accountID, _callback);

    }

    /**
     * Change Recipient Status
     * Get a list of all recipients in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ServiceDocsGetQueueRecipients
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsGetQueueRecipients v1AccountAccountIDQueuerecipientGet(@javax.annotation.Nonnull String accountID) throws ApiException {
        ApiResponse<ServiceDocsGetQueueRecipients> localVarResp = v1AccountAccountIDQueuerecipientGetWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Change Recipient Status
     * Get a list of all recipients in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsGetQueueRecipients&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsGetQueueRecipients> v1AccountAccountIDQueuerecipientGetWithHttpInfo(@javax.annotation.Nonnull String accountID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDQueuerecipientGetValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsGetQueueRecipients>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Recipient Status (asynchronously)
     * Get a list of all recipients in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDQueuerecipientGetAsync(@javax.annotation.Nonnull String accountID, final ApiCallback<ServiceDocsGetQueueRecipients> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDQueuerecipientGetValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsGetQueueRecipients>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDRecipientRecipientIDStatusPost
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecipientRecipientIDStatusPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientStatusData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/recipient/{recipientID}/status"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "recipientID" + "}", localVarApiClient.escapeString(recipientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDRecipientRecipientIDStatusPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientStatusData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecipientRecipientIDStatusPost(Async)");
        }

        // verify the required parameter 'recipientID' is set
        if (recipientID == null) {
            throw new ApiException("Missing the required parameter 'recipientID' when calling v1AccountAccountIDRecipientRecipientIDStatusPost(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDRecipientRecipientIDStatusPost(Async)");
        }

        return v1AccountAccountIDRecipientRecipientIDStatusPostCall(accountID, recipientID, reqBody, _callback);

    }

    /**
     * Get Recipient List
     * Change the status of a recipient to ready, away, etc.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAPIResponse v1AccountAccountIDRecipientRecipientIDStatusPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientStatusData reqBody) throws ApiException {
        ApiResponse<ServiceAPIResponse> localVarResp = v1AccountAccountIDRecipientRecipientIDStatusPostWithHttpInfo(accountID, recipientID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Get Recipient List
     * Change the status of a recipient to ready, away, etc.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAPIResponse> v1AccountAccountIDRecipientRecipientIDStatusPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientStatusData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDRecipientRecipientIDStatusPostValidateBeforeCall(accountID, recipientID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipient List (asynchronously)
     * Change the status of a recipient to ready, away, etc.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param recipientID Recipient ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDRecipientRecipientIDStatusPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String recipientID, @javax.annotation.Nonnull ServiceVOIPCallQueueRecipientStatusData reqBody, final ApiCallback<ServiceAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDRecipientRecipientIDStatusPostValidateBeforeCall(accountID, recipientID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
