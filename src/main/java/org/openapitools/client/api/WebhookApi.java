/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsWebhookDelete;
import org.openapitools.client.model.ServiceDocsWebhookGetAll;
import org.openapitools.client.model.ServiceDocsWebhookGetSingle;
import org.openapitools.client.model.ServiceWebhookAdd;
import org.openapitools.client.model.ServiceWebhookEdit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1WebhookAccountAccountIDGet
     * @param accountID Account ID (required)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param currentPage Current Page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer currentPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhook/account/{accountID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current_page", currentPage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WebhookAccountAccountIDGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer currentPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDGet(Async)");
        }

        return v1WebhookAccountAccountIDGetCall(accountID, pageSize, currentPage, _callback);

    }

    /**
     * Get Webhook List
     * Retrieve the webhook list in an account.
     * @param accountID Account ID (required)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param currentPage Current Page (optional)
     * @return ServiceDocsWebhookGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsWebhookGetAll v1WebhookAccountAccountIDGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer currentPage) throws ApiException {
        ApiResponse<ServiceDocsWebhookGetAll> localVarResp = v1WebhookAccountAccountIDGetWithHttpInfo(accountID, pageSize, currentPage);
        return localVarResp.getData();
    }

    /**
     * Get Webhook List
     * Retrieve the webhook list in an account.
     * @param accountID Account ID (required)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param currentPage Current Page (optional)
     * @return ApiResponse&lt;ServiceDocsWebhookGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsWebhookGetAll> v1WebhookAccountAccountIDGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer currentPage) throws ApiException {
        okhttp3.Call localVarCall = v1WebhookAccountAccountIDGetValidateBeforeCall(accountID, pageSize, currentPage, null);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Webhook List (asynchronously)
     * Retrieve the webhook list in an account.
     * @param accountID Account ID (required)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param currentPage Current Page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer currentPage, final ApiCallback<ServiceDocsWebhookGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WebhookAccountAccountIDGetValidateBeforeCall(accountID, pageSize, currentPage, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WebhookAccountAccountIDPost
     * @param accountID Account ID (required)
     * @param body Webhook data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceWebhookAdd body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/webhook/account/{accountID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WebhookAccountAccountIDPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceWebhookAdd body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1WebhookAccountAccountIDPost(Async)");
        }

        return v1WebhookAccountAccountIDPostCall(accountID, body, _callback);

    }

    /**
     * Create Webhook
     * Create a webhook for a specific account ID.
     * @param accountID Account ID (required)
     * @param body Webhook data (required)
     * @return ServiceDocsWebhookGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsWebhookGetSingle v1WebhookAccountAccountIDPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceWebhookAdd body) throws ApiException {
        ApiResponse<ServiceDocsWebhookGetSingle> localVarResp = v1WebhookAccountAccountIDPostWithHttpInfo(accountID, body);
        return localVarResp.getData();
    }

    /**
     * Create Webhook
     * Create a webhook for a specific account ID.
     * @param accountID Account ID (required)
     * @param body Webhook data (required)
     * @return ApiResponse&lt;ServiceDocsWebhookGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsWebhookGetSingle> v1WebhookAccountAccountIDPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceWebhookAdd body) throws ApiException {
        okhttp3.Call localVarCall = v1WebhookAccountAccountIDPostValidateBeforeCall(accountID, body, null);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Webhook (asynchronously)
     * Create a webhook for a specific account ID.
     * @param accountID Account ID (required)
     * @param body Webhook data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceWebhookAdd body, final ApiCallback<ServiceDocsWebhookGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WebhookAccountAccountIDPostValidateBeforeCall(accountID, body, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WebhookAccountAccountIDWebhookIDDelete
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDWebhookIDDeleteCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhook/account/{accountID}/{webhookID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "webhookID" + "}", localVarApiClient.escapeString(webhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WebhookAccountAccountIDWebhookIDDeleteValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDWebhookIDDelete(Async)");
        }

        // verify the required parameter 'webhookID' is set
        if (webhookID == null) {
            throw new ApiException("Missing the required parameter 'webhookID' when calling v1WebhookAccountAccountIDWebhookIDDelete(Async)");
        }

        return v1WebhookAccountAccountIDWebhookIDDeleteCall(accountID, webhookID, _callback);

    }

    /**
     * Delete Webhook
     * Remove a webhook identified by its ID for a particular account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @return ServiceDocsWebhookDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsWebhookDelete v1WebhookAccountAccountIDWebhookIDDelete(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID) throws ApiException {
        ApiResponse<ServiceDocsWebhookDelete> localVarResp = v1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfo(accountID, webhookID);
        return localVarResp.getData();
    }

    /**
     * Delete Webhook
     * Remove a webhook identified by its ID for a particular account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @return ApiResponse&lt;ServiceDocsWebhookDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsWebhookDelete> v1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID) throws ApiException {
        okhttp3.Call localVarCall = v1WebhookAccountAccountIDWebhookIDDeleteValidateBeforeCall(accountID, webhookID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Webhook (asynchronously)
     * Remove a webhook identified by its ID for a particular account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDWebhookIDDeleteAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID, final ApiCallback<ServiceDocsWebhookDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WebhookAccountAccountIDWebhookIDDeleteValidateBeforeCall(accountID, webhookID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WebhookAccountAccountIDWebhookIDGet
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDWebhookIDGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhook/account/{accountID}/{webhookID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "webhookID" + "}", localVarApiClient.escapeString(webhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WebhookAccountAccountIDWebhookIDGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDWebhookIDGet(Async)");
        }

        // verify the required parameter 'webhookID' is set
        if (webhookID == null) {
            throw new ApiException("Missing the required parameter 'webhookID' when calling v1WebhookAccountAccountIDWebhookIDGet(Async)");
        }

        return v1WebhookAccountAccountIDWebhookIDGetCall(accountID, webhookID, _callback);

    }

    /**
     * Get Webhook Details
     * Access details about a single webhook ID for an individual account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @return ServiceDocsWebhookGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsWebhookGetSingle v1WebhookAccountAccountIDWebhookIDGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID) throws ApiException {
        ApiResponse<ServiceDocsWebhookGetSingle> localVarResp = v1WebhookAccountAccountIDWebhookIDGetWithHttpInfo(accountID, webhookID);
        return localVarResp.getData();
    }

    /**
     * Get Webhook Details
     * Access details about a single webhook ID for an individual account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @return ApiResponse&lt;ServiceDocsWebhookGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsWebhookGetSingle> v1WebhookAccountAccountIDWebhookIDGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID) throws ApiException {
        okhttp3.Call localVarCall = v1WebhookAccountAccountIDWebhookIDGetValidateBeforeCall(accountID, webhookID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Webhook Details (asynchronously)
     * Access details about a single webhook ID for an individual account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDWebhookIDGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull Integer webhookID, final ApiCallback<ServiceDocsWebhookGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WebhookAccountAccountIDWebhookIDGetValidateBeforeCall(accountID, webhookID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WebhookAccountAccountIDWebhookIDPut
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param body Updated webhook data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDWebhookIDPutCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String webhookID, @javax.annotation.Nonnull ServiceWebhookEdit body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/webhook/account/{accountID}/{webhookID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "webhookID" + "}", localVarApiClient.escapeString(webhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WebhookAccountAccountIDWebhookIDPutValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String webhookID, @javax.annotation.Nonnull ServiceWebhookEdit body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDWebhookIDPut(Async)");
        }

        // verify the required parameter 'webhookID' is set
        if (webhookID == null) {
            throw new ApiException("Missing the required parameter 'webhookID' when calling v1WebhookAccountAccountIDWebhookIDPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1WebhookAccountAccountIDWebhookIDPut(Async)");
        }

        return v1WebhookAccountAccountIDWebhookIDPutCall(accountID, webhookID, body, _callback);

    }

    /**
     * Update Webhook
     * Update a webhook identified by its ID for a distinct account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param body Updated webhook data (required)
     * @return ServiceDocsWebhookGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsWebhookGetSingle v1WebhookAccountAccountIDWebhookIDPut(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String webhookID, @javax.annotation.Nonnull ServiceWebhookEdit body) throws ApiException {
        ApiResponse<ServiceDocsWebhookGetSingle> localVarResp = v1WebhookAccountAccountIDWebhookIDPutWithHttpInfo(accountID, webhookID, body);
        return localVarResp.getData();
    }

    /**
     * Update Webhook
     * Update a webhook identified by its ID for a distinct account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param body Updated webhook data (required)
     * @return ApiResponse&lt;ServiceDocsWebhookGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsWebhookGetSingle> v1WebhookAccountAccountIDWebhookIDPutWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String webhookID, @javax.annotation.Nonnull ServiceWebhookEdit body) throws ApiException {
        okhttp3.Call localVarCall = v1WebhookAccountAccountIDWebhookIDPutValidateBeforeCall(accountID, webhookID, body, null);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Webhook (asynchronously)
     * Update a webhook identified by its ID for a distinct account ID.
     * @param accountID Account ID (required)
     * @param webhookID Webhook ID (required)
     * @param body Updated webhook data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WebhookAccountAccountIDWebhookIDPutAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String webhookID, @javax.annotation.Nonnull ServiceWebhookEdit body, final ApiCallback<ServiceDocsWebhookGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WebhookAccountAccountIDWebhookIDPutValidateBeforeCall(accountID, webhookID, body, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsWebhookGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
