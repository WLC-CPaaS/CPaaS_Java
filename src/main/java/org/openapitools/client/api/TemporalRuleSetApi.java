/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsTemporalRuleSetGetAll;
import org.openapitools.client.model.ServiceDocsTemporalRuleSetGetSingle;
import org.openapitools.client.model.ServiceVOIPTemporalRuleSetAddEditData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemporalRuleSetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemporalRuleSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemporalRuleSetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDTemporalrulesetGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetGetCall(String accountID, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/temporalruleset"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDTemporalrulesetGetValidateBeforeCall(String accountID, String startKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetGet(Async)");
        }

        return v1AccountAccountIDTemporalrulesetGetCall(accountID, startKey, pageSize, _callback);

    }

    /**
     * Get Temporal Rule Set List
     * Access the temporal rule set list in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ServiceDocsTemporalRuleSetGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsTemporalRuleSetGetAll v1AccountAccountIDTemporalrulesetGet(String accountID, String startKey, Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsTemporalRuleSetGetAll> localVarResp = v1AccountAccountIDTemporalrulesetGetWithHttpInfo(accountID, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Temporal Rule Set List
     * Access the temporal rule set list in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ApiResponse&lt;ServiceDocsTemporalRuleSetGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsTemporalRuleSetGetAll> v1AccountAccountIDTemporalrulesetGetWithHttpInfo(String accountID, String startKey, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetGetValidateBeforeCall(accountID, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Temporal Rule Set List (asynchronously)
     * Access the temporal rule set list in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetGetAsync(String accountID, String startKey, Integer pageSize, final ApiCallback<ServiceDocsTemporalRuleSetGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetGetValidateBeforeCall(accountID, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDTemporalrulesetPost
     * @param accountID Account ID, 32 alphanumeric (required)
     * @param temporalruleset payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetPostCall(String accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = temporalruleset;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/temporalruleset"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDTemporalrulesetPostValidateBeforeCall(String accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetPost(Async)");
        }

        // verify the required parameter 'temporalruleset' is set
        if (temporalruleset == null) {
            throw new ApiException("Missing the required parameter 'temporalruleset' when calling v1AccountAccountIDTemporalrulesetPost(Async)");
        }

        return v1AccountAccountIDTemporalrulesetPostCall(accountID, temporalruleset, _callback);

    }

    /**
     * Create Temporal Rule Set
     * Develop a new temporal rule set for an account.
     * @param accountID Account ID, 32 alphanumeric (required)
     * @param temporalruleset payload fields (required)
     * @return ServiceDocsTemporalRuleSetGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetPost(String accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset) throws ApiException {
        ApiResponse<ServiceDocsTemporalRuleSetGetSingle> localVarResp = v1AccountAccountIDTemporalrulesetPostWithHttpInfo(accountID, temporalruleset);
        return localVarResp.getData();
    }

    /**
     * Create Temporal Rule Set
     * Develop a new temporal rule set for an account.
     * @param accountID Account ID, 32 alphanumeric (required)
     * @param temporalruleset payload fields (required)
     * @return ApiResponse&lt;ServiceDocsTemporalRuleSetGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsTemporalRuleSetGetSingle> v1AccountAccountIDTemporalrulesetPostWithHttpInfo(String accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetPostValidateBeforeCall(accountID, temporalruleset, null);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Temporal Rule Set (asynchronously)
     * Develop a new temporal rule set for an account.
     * @param accountID Account ID, 32 alphanumeric (required)
     * @param temporalruleset payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetPostAsync(String accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset, final ApiCallback<ServiceDocsTemporalRuleSetGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetPostValidateBeforeCall(accountID, temporalruleset, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID temporal rule set ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteCall(String accountID, String temporalRuleSetID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "temporalRuleSetID" + "}", localVarApiClient.escapeString(temporalRuleSetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteValidateBeforeCall(String accountID, String temporalRuleSetID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete(Async)");
        }

        // verify the required parameter 'temporalRuleSetID' is set
        if (temporalRuleSetID == null) {
            throw new ApiException("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete(Async)");
        }

        return v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteCall(accountID, temporalRuleSetID, _callback);

    }

    /**
     * Delete Temporal Rule Set
     * Delete the temporal rule set from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID temporal rule set ID, 32 alpha numeric (required)
     * @return ServiceDocsTemporalRuleSetGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete(String accountID, String temporalRuleSetID) throws ApiException {
        ApiResponse<ServiceDocsTemporalRuleSetGetSingle> localVarResp = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteWithHttpInfo(accountID, temporalRuleSetID);
        return localVarResp.getData();
    }

    /**
     * Delete Temporal Rule Set
     * Delete the temporal rule set from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID temporal rule set ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsTemporalRuleSetGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsTemporalRuleSetGetSingle> v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteWithHttpInfo(String accountID, String temporalRuleSetID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteValidateBeforeCall(accountID, temporalRuleSetID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Temporal Rule Set (asynchronously)
     * Delete the temporal rule set from an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID temporal rule set ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteAsync(String accountID, String temporalRuleSetID, final ApiCallback<ServiceDocsTemporalRuleSetGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteValidateBeforeCall(accountID, temporalRuleSetID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetCall(String accountID, String temporalRuleSetID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "temporalRuleSetID" + "}", localVarApiClient.escapeString(temporalRuleSetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetValidateBeforeCall(String accountID, String temporalRuleSetID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet(Async)");
        }

        // verify the required parameter 'temporalRuleSetID' is set
        if (temporalRuleSetID == null) {
            throw new ApiException("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet(Async)");
        }

        return v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetCall(accountID, temporalRuleSetID, _callback);

    }

    /**
     * Get Temporal Rule Set Details
     * Acquire details about a temporal rule set in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @return ServiceDocsTemporalRuleSetGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet(String accountID, String temporalRuleSetID) throws ApiException {
        ApiResponse<ServiceDocsTemporalRuleSetGetSingle> localVarResp = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetWithHttpInfo(accountID, temporalRuleSetID);
        return localVarResp.getData();
    }

    /**
     * Get Temporal Rule Set Details
     * Acquire details about a temporal rule set in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsTemporalRuleSetGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsTemporalRuleSetGetSingle> v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetWithHttpInfo(String accountID, String temporalRuleSetID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetValidateBeforeCall(accountID, temporalRuleSetID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Temporal Rule Set Details (asynchronously)
     * Acquire details about a temporal rule set in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetAsync(String accountID, String temporalRuleSetID, final ApiCallback<ServiceDocsTemporalRuleSetGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetValidateBeforeCall(accountID, temporalRuleSetID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutCall(String accountID, String temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "temporalRuleSetID" + "}", localVarApiClient.escapeString(temporalRuleSetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutValidateBeforeCall(String accountID, String temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut(Async)");
        }

        // verify the required parameter 'temporalRuleSetID' is set
        if (temporalRuleSetID == null) {
            throw new ApiException("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut(Async)");
        }

        return v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutCall(accountID, temporalRuleSetID, reqBody, _callback);

    }

    /**
     * Update Temporal Rule Set
     * Efficiently adjust the temporal rule set in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsTemporalRuleSetGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut(String accountID, String temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody) throws ApiException {
        ApiResponse<ServiceDocsTemporalRuleSetGetSingle> localVarResp = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutWithHttpInfo(accountID, temporalRuleSetID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Update Temporal Rule Set
     * Efficiently adjust the temporal rule set in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsTemporalRuleSetGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsTemporalRuleSetGetSingle> v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutWithHttpInfo(String accountID, String temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutValidateBeforeCall(accountID, temporalRuleSetID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Temporal Rule Set (asynchronously)
     * Efficiently adjust the temporal rule set in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutAsync(String accountID, String temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody, final ApiCallback<ServiceDocsTemporalRuleSetGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutValidateBeforeCall(accountID, temporalRuleSetID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsTemporalRuleSetGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
