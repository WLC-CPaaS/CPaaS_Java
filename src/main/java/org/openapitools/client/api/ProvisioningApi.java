/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsGenerateConfigFileRequest;
import org.openapitools.client.model.ProvisioningDocsDocsBrandOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsBrandsOutput;
import org.openapitools.client.model.ProvisioningDocsDocsConfigFileOutput;
import org.openapitools.client.model.ProvisioningDocsDocsFamilyOutput;
import org.openapitools.client.model.ProvisioningDocsDocsFamilyOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsModelOutput;
import org.openapitools.client.model.ProvisioningDocsDocsModelOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsTemplateOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsTemplatesOutput;
import org.openapitools.client.model.ResponseProvisionError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProvisioningApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProvisioningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProvisioningApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1ApBrandBrandFamilyFamilyGet
     * @param brand brand (required)
     * @param family family (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyGetCall(String brand, String family, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand/{brand}/family/{family}"
            .replace("{" + "brand" + "}", localVarApiClient.escapeString(brand.toString()))
            .replace("{" + "family" + "}", localVarApiClient.escapeString(family.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandBrandFamilyFamilyGetValidateBeforeCall(String brand, String family, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyGet(Async)");
        }

        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyGet(Async)");
        }

        return v1ApBrandBrandFamilyFamilyGetCall(brand, family, _callback);

    }

    /**
     * Get Family
     * Retrieve a family&#39;s details by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @return ProvisioningDocsDocsFamilyOutputSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsFamilyOutputSingle v1ApBrandBrandFamilyFamilyGet(String brand, String family) throws ApiException {
        ApiResponse<ProvisioningDocsDocsFamilyOutputSingle> localVarResp = v1ApBrandBrandFamilyFamilyGetWithHttpInfo(brand, family);
        return localVarResp.getData();
    }

    /**
     * Get Family
     * Retrieve a family&#39;s details by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @return ApiResponse&lt;ProvisioningDocsDocsFamilyOutputSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsFamilyOutputSingle> v1ApBrandBrandFamilyFamilyGetWithHttpInfo(String brand, String family) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyGetValidateBeforeCall(brand, family, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsFamilyOutputSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Family (asynchronously)
     * Retrieve a family&#39;s details by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyGetAsync(String brand, String family, final ApiCallback<ProvisioningDocsDocsFamilyOutputSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyGetValidateBeforeCall(brand, family, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsFamilyOutputSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApBrandBrandFamilyFamilyModelGet
     * @param brand brand (required)
     * @param family family (required)
     * @param modelName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelGetCall(String brand, String family, String modelName, Integer pageSize, String startKey, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand/{brand}/family/{family}/model"
            .replace("{" + "brand" + "}", localVarApiClient.escapeString(brand.toString()))
            .replace("{" + "family" + "}", localVarApiClient.escapeString(family.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_name", modelName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandBrandFamilyFamilyModelGetValidateBeforeCall(String brand, String family, String modelName, Integer pageSize, String startKey, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelGet(Async)");
        }

        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelGet(Async)");
        }

        return v1ApBrandBrandFamilyFamilyModelGetCall(brand, family, modelName, pageSize, startKey, status, _callback);

    }

    /**
     * Get Model List
     * Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param family family (required)
     * @param modelName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @return ProvisioningDocsDocsModelOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsModelOutput v1ApBrandBrandFamilyFamilyModelGet(String brand, String family, String modelName, Integer pageSize, String startKey, String status) throws ApiException {
        ApiResponse<ProvisioningDocsDocsModelOutput> localVarResp = v1ApBrandBrandFamilyFamilyModelGetWithHttpInfo(brand, family, modelName, pageSize, startKey, status);
        return localVarResp.getData();
    }

    /**
     * Get Model List
     * Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param family family (required)
     * @param modelName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;ProvisioningDocsDocsModelOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsModelOutput> v1ApBrandBrandFamilyFamilyModelGetWithHttpInfo(String brand, String family, String modelName, Integer pageSize, String startKey, String status) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelGetValidateBeforeCall(brand, family, modelName, pageSize, startKey, status, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsModelOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Model List (asynchronously)
     * Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param family family (required)
     * @param modelName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelGetAsync(String brand, String family, String modelName, Integer pageSize, String startKey, String status, final ApiCallback<ProvisioningDocsDocsModelOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelGetValidateBeforeCall(brand, family, modelName, pageSize, startKey, status, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsModelOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApBrandBrandFamilyFamilyModelModelGet
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelGetCall(String brand, String family, String model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand/{brand}/family/{family}/model/{model}"
            .replace("{" + "brand" + "}", localVarApiClient.escapeString(brand.toString()))
            .replace("{" + "family" + "}", localVarApiClient.escapeString(family.toString()))
            .replace("{" + "model" + "}", localVarApiClient.escapeString(model.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelGetValidateBeforeCall(String brand, String family, String model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelGet(Async)");
        }

        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelGet(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelGet(Async)");
        }

        return v1ApBrandBrandFamilyFamilyModelModelGetCall(brand, family, model, _callback);

    }

    /**
     * Get Model
     * Retrieve a model&#39;s details by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @return ProvisioningDocsDocsModelOutputSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsModelOutputSingle v1ApBrandBrandFamilyFamilyModelModelGet(String brand, String family, String model) throws ApiException {
        ApiResponse<ProvisioningDocsDocsModelOutputSingle> localVarResp = v1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo(brand, family, model);
        return localVarResp.getData();
    }

    /**
     * Get Model
     * Retrieve a model&#39;s details by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @return ApiResponse&lt;ProvisioningDocsDocsModelOutputSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsModelOutputSingle> v1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo(String brand, String family, String model) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelModelGetValidateBeforeCall(brand, family, model, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsModelOutputSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Model (asynchronously)
     * Retrieve a model&#39;s details by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelGetAsync(String brand, String family, String model, final ApiCallback<ProvisioningDocsDocsModelOutputSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelModelGetValidateBeforeCall(brand, family, model, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsModelOutputSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApBrandBrandFamilyFamilyModelModelTemplateGet
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param firmware  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param templateName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelTemplateGetCall(String brand, String family, String model, String firmware, Integer pageSize, String startKey, String status, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template"
            .replace("{" + "brand" + "}", localVarApiClient.escapeString(brand.toString()))
            .replace("{" + "family" + "}", localVarApiClient.escapeString(family.toString()))
            .replace("{" + "model" + "}", localVarApiClient.escapeString(model.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firmware != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firmware", firmware));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_name", templateName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelTemplateGetValidateBeforeCall(String brand, String family, String model, String firmware, Integer pageSize, String startKey, String status, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet(Async)");
        }

        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet(Async)");
        }

        return v1ApBrandBrandFamilyFamilyModelModelTemplateGetCall(brand, family, model, firmware, pageSize, startKey, status, templateName, _callback);

    }

    /**
     * Get Template List
     * Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param firmware  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param templateName  (optional)
     * @return ProvisioningDocsDocsTemplatesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsTemplatesOutput v1ApBrandBrandFamilyFamilyModelModelTemplateGet(String brand, String family, String model, String firmware, Integer pageSize, String startKey, String status, String templateName) throws ApiException {
        ApiResponse<ProvisioningDocsDocsTemplatesOutput> localVarResp = v1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo(brand, family, model, firmware, pageSize, startKey, status, templateName);
        return localVarResp.getData();
    }

    /**
     * Get Template List
     * Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param firmware  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param templateName  (optional)
     * @return ApiResponse&lt;ProvisioningDocsDocsTemplatesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsTemplatesOutput> v1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo(String brand, String family, String model, String firmware, Integer pageSize, String startKey, String status, String templateName) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelModelTemplateGetValidateBeforeCall(brand, family, model, firmware, pageSize, startKey, status, templateName, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsTemplatesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Template List (asynchronously)
     * Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param firmware  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param templateName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelTemplateGetAsync(String brand, String family, String model, String firmware, Integer pageSize, String startKey, String status, String templateName, final ApiCallback<ProvisioningDocsDocsTemplatesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelModelTemplateGetValidateBeforeCall(brand, family, model, firmware, pageSize, startKey, status, templateName, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsTemplatesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param template template (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetCall(String brand, String family, String model, String template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}"
            .replace("{" + "brand" + "}", localVarApiClient.escapeString(brand.toString()))
            .replace("{" + "family" + "}", localVarApiClient.escapeString(family.toString()))
            .replace("{" + "model" + "}", localVarApiClient.escapeString(model.toString()))
            .replace("{" + "template" + "}", localVarApiClient.escapeString(template.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetValidateBeforeCall(String brand, String family, String model, String template, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(Async)");
        }

        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(Async)");
        }

        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(Async)");
        }

        return v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetCall(brand, family, model, template, _callback);

    }

    /**
     * Get Template
     * Retrieve details about a template for a model by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param template template (required)
     * @return ProvisioningDocsDocsTemplateOutputSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsTemplateOutputSingle v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(String brand, String family, String model, String template) throws ApiException {
        ApiResponse<ProvisioningDocsDocsTemplateOutputSingle> localVarResp = v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo(brand, family, model, template);
        return localVarResp.getData();
    }

    /**
     * Get Template
     * Retrieve details about a template for a model by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param template template (required)
     * @return ApiResponse&lt;ProvisioningDocsDocsTemplateOutputSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsTemplateOutputSingle> v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo(String brand, String family, String model, String template) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetValidateBeforeCall(brand, family, model, template, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsTemplateOutputSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Template (asynchronously)
     * Retrieve details about a template for a model by the randomly generated ID.
     * @param brand brand (required)
     * @param family family (required)
     * @param model model (required)
     * @param template template (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsync(String brand, String family, String model, String template, final ApiCallback<ProvisioningDocsDocsTemplateOutputSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetValidateBeforeCall(brand, family, model, template, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsTemplateOutputSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApBrandBrandFamilyGet
     * @param brand brand (required)
     * @param familyName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyGetCall(String brand, String familyName, Integer pageSize, String startKey, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand/{brand}/family"
            .replace("{" + "brand" + "}", localVarApiClient.escapeString(brand.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (familyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family_name", familyName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandBrandFamilyGetValidateBeforeCall(String brand, String familyName, Integer pageSize, String startKey, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyGet(Async)");
        }

        return v1ApBrandBrandFamilyGetCall(brand, familyName, pageSize, startKey, status, _callback);

    }

    /**
     * Get Family List
     * Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param familyName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @return ProvisioningDocsDocsFamilyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsFamilyOutput v1ApBrandBrandFamilyGet(String brand, String familyName, Integer pageSize, String startKey, String status) throws ApiException {
        ApiResponse<ProvisioningDocsDocsFamilyOutput> localVarResp = v1ApBrandBrandFamilyGetWithHttpInfo(brand, familyName, pageSize, startKey, status);
        return localVarResp.getData();
    }

    /**
     * Get Family List
     * Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param familyName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;ProvisioningDocsDocsFamilyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsFamilyOutput> v1ApBrandBrandFamilyGetWithHttpInfo(String brand, String familyName, Integer pageSize, String startKey, String status) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandBrandFamilyGetValidateBeforeCall(brand, familyName, pageSize, startKey, status, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsFamilyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Family List (asynchronously)
     * Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
     * @param brand brand (required)
     * @param familyName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandFamilyGetAsync(String brand, String familyName, Integer pageSize, String startKey, String status, final ApiCallback<ProvisioningDocsDocsFamilyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandBrandFamilyGetValidateBeforeCall(brand, familyName, pageSize, startKey, status, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsFamilyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApBrandBrandGet
     * @param brand brand id to retrieve a brand (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandGetCall(String brand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand/{brand}"
            .replace("{" + "brand" + "}", localVarApiClient.escapeString(brand.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandBrandGetValidateBeforeCall(String brand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling v1ApBrandBrandGet(Async)");
        }

        return v1ApBrandBrandGetCall(brand, _callback);

    }

    /**
     * Get Brand
     * Retrieve a brand&#39;s details by the randomly generated ID.
     * @param brand brand id to retrieve a brand (required)
     * @return ProvisioningDocsDocsBrandOutputSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsBrandOutputSingle v1ApBrandBrandGet(String brand) throws ApiException {
        ApiResponse<ProvisioningDocsDocsBrandOutputSingle> localVarResp = v1ApBrandBrandGetWithHttpInfo(brand);
        return localVarResp.getData();
    }

    /**
     * Get Brand
     * Retrieve a brand&#39;s details by the randomly generated ID.
     * @param brand brand id to retrieve a brand (required)
     * @return ApiResponse&lt;ProvisioningDocsDocsBrandOutputSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsBrandOutputSingle> v1ApBrandBrandGetWithHttpInfo(String brand) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandBrandGetValidateBeforeCall(brand, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsBrandOutputSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Brand (asynchronously)
     * Retrieve a brand&#39;s details by the randomly generated ID.
     * @param brand brand id to retrieve a brand (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandBrandGetAsync(String brand, final ApiCallback<ProvisioningDocsDocsBrandOutputSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandBrandGetValidateBeforeCall(brand, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsBrandOutputSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApBrandGet
     * @param brandName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandGetCall(String brandName, Integer pageSize, String startKey, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ap/brand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (brandName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brand_name", brandName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApBrandGetValidateBeforeCall(String brandName, Integer pageSize, String startKey, String status, final ApiCallback _callback) throws ApiException {
        return v1ApBrandGetCall(brandName, pageSize, startKey, status, _callback);

    }

    /**
     * Get Brand
     * Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
     * @param brandName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @return ProvisioningDocsDocsBrandsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsBrandsOutput v1ApBrandGet(String brandName, Integer pageSize, String startKey, String status) throws ApiException {
        ApiResponse<ProvisioningDocsDocsBrandsOutput> localVarResp = v1ApBrandGetWithHttpInfo(brandName, pageSize, startKey, status);
        return localVarResp.getData();
    }

    /**
     * Get Brand
     * Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
     * @param brandName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;ProvisioningDocsDocsBrandsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsBrandsOutput> v1ApBrandGetWithHttpInfo(String brandName, Integer pageSize, String startKey, String status) throws ApiException {
        okhttp3.Call localVarCall = v1ApBrandGetValidateBeforeCall(brandName, pageSize, startKey, status, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsBrandsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Brand (asynchronously)
     * Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
     * @param brandName  (optional)
     * @param pageSize  (optional)
     * @param startKey  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApBrandGetAsync(String brandName, Integer pageSize, String startKey, String status, final ApiCallback<ProvisioningDocsDocsBrandsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApBrandGetValidateBeforeCall(brandName, pageSize, startKey, status, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsBrandsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ApConfigfileGeneratePost
     * @param params body params to generate config file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApConfigfileGeneratePostCall(ModelsGenerateConfigFileRequest params, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = params;

        // create path and map variables
        String localVarPath = "/v1/ap/configfile/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ApConfigfileGeneratePostValidateBeforeCall(ModelsGenerateConfigFileRequest params, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'params' is set
        if (params == null) {
            throw new ApiException("Missing the required parameter 'params' when calling v1ApConfigfileGeneratePost(Async)");
        }

        return v1ApConfigfileGeneratePostCall(params, _callback);

    }

    /**
     * Generate config file
     * Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
     * @param params body params to generate config file (required)
     * @return ProvisioningDocsDocsConfigFileOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningDocsDocsConfigFileOutput v1ApConfigfileGeneratePost(ModelsGenerateConfigFileRequest params) throws ApiException {
        ApiResponse<ProvisioningDocsDocsConfigFileOutput> localVarResp = v1ApConfigfileGeneratePostWithHttpInfo(params);
        return localVarResp.getData();
    }

    /**
     * Generate config file
     * Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
     * @param params body params to generate config file (required)
     * @return ApiResponse&lt;ProvisioningDocsDocsConfigFileOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningDocsDocsConfigFileOutput> v1ApConfigfileGeneratePostWithHttpInfo(ModelsGenerateConfigFileRequest params) throws ApiException {
        okhttp3.Call localVarCall = v1ApConfigfileGeneratePostValidateBeforeCall(params, null);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsConfigFileOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate config file (asynchronously)
     * Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
     * @param params body params to generate config file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ApConfigfileGeneratePostAsync(ModelsGenerateConfigFileRequest params, final ApiCallback<ProvisioningDocsDocsConfigFileOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ApConfigfileGeneratePostValidateBeforeCall(params, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningDocsDocsConfigFileOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
