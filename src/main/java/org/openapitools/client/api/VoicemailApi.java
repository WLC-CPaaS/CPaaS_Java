/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CPAASError;
import java.io.File;
import org.openapitools.client.model.ServiceDocsVoicemailGetAll;
import org.openapitools.client.model.ServiceDocsVoicemailGetSingle;
import org.openapitools.client.model.ServiceDocsVoicemailMessageGetAll;
import org.openapitools.client.model.ServiceDocsVoicemailMessageGetSingle;
import org.openapitools.client.model.ServiceVOIPVoicemailAddEditData;
import org.openapitools.client.model.ServiceVOIPVoicemailMessageAddData;
import org.openapitools.client.model.ServiceVOIPVoicemailMessageChange;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoicemailApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoicemailApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoicemailApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1AccountAccountIDVoicemailGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailGet(Async)");
        }

        return v1AccountAccountIDVoicemailGetCall(accountID, startKey, pageSize, _callback);

    }

    /**
     * Get Voicemail Box List
     * List all voicemail boxes in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ServiceDocsVoicemailGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailGetAll v1AccountAccountIDVoicemailGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsVoicemailGetAll> localVarResp = v1AccountAccountIDVoicemailGetWithHttpInfo(accountID, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Voicemail Box List
     * List all voicemail boxes in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ApiResponse&lt;ServiceDocsVoicemailGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailGetAll> v1AccountAccountIDVoicemailGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailGetValidateBeforeCall(accountID, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Voicemail Box List (asynchronously)
     * List all voicemail boxes in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback<ServiceDocsVoicemailGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailGetValidateBeforeCall(accountID, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailPost
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemail voicemail payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData voicemail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voicemail;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData voicemail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailPost(Async)");
        }

        // verify the required parameter 'voicemail' is set
        if (voicemail == null) {
            throw new ApiException("Missing the required parameter 'voicemail' when calling v1AccountAccountIDVoicemailPost(Async)");
        }

        return v1AccountAccountIDVoicemailPostCall(accountID, voicemail, _callback);

    }

    /**
     * Create Voicemail Box
     * Create a voicemail box for receiving and storing voicemail messages.
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemail voicemail payload fields (required)
     * @return ServiceDocsVoicemailGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData voicemail) throws ApiException {
        ApiResponse<ServiceDocsVoicemailGetSingle> localVarResp = v1AccountAccountIDVoicemailPostWithHttpInfo(accountID, voicemail);
        return localVarResp.getData();
    }

    /**
     * Create Voicemail Box
     * Create a voicemail box for receiving and storing voicemail messages.
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemail voicemail payload fields (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailGetSingle> v1AccountAccountIDVoicemailPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData voicemail) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailPostValidateBeforeCall(accountID, voicemail, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Voicemail Box (asynchronously)
     * Create a voicemail box for receiving and storing voicemail messages.
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemail voicemail payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData voicemail, final ApiCallback<ServiceDocsVoicemailGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailPostValidateBeforeCall(accountID, voicemail, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDDeleteCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDDeleteValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDDeleteCall(accountID, voicemailID, _callback);

    }

    /**
     * Delete Voicemail Box
     * Delete a voicemail box in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @return ServiceDocsVoicemailGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailVoicemailIDDelete(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID) throws ApiException {
        ApiResponse<ServiceDocsVoicemailGetSingle> localVarResp = v1AccountAccountIDVoicemailVoicemailIDDeleteWithHttpInfo(accountID, voicemailID);
        return localVarResp.getData();
    }

    /**
     * Delete Voicemail Box
     * Delete a voicemail box in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailGetSingle> v1AccountAccountIDVoicemailVoicemailIDDeleteWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDDeleteValidateBeforeCall(accountID, voicemailID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Voicemail Box (asynchronously)
     * Delete a voicemail box in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDDeleteAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, final ApiCallback<ServiceDocsVoicemailGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDDeleteValidateBeforeCall(accountID, voicemailID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDGet(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDGet(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDGetCall(accountID, voicemailID, _callback);

    }

    /**
     * Get Voicemail Box Details
     * Get information about a single voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @return ServiceDocsVoicemailGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailVoicemailIDGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID) throws ApiException {
        ApiResponse<ServiceDocsVoicemailGetSingle> localVarResp = v1AccountAccountIDVoicemailVoicemailIDGetWithHttpInfo(accountID, voicemailID);
        return localVarResp.getData();
    }

    /**
     * Get Voicemail Box Details
     * Get information about a single voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailGetSingle> v1AccountAccountIDVoicemailVoicemailIDGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDGetValidateBeforeCall(accountID, voicemailID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Voicemail Box Details (asynchronously)
     * Get information about a single voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, final ApiCallback<ServiceDocsVoicemailGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDGetValidateBeforeCall(accountID, voicemailID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDMessageGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID voicemail ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_key", startKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDMessageGetCall(accountID, voicemailID, startKey, pageSize, _callback);

    }

    /**
     * Get Voicemail Message List
     * Get a list of voicemail messages from an account&#39;s voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID voicemail ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ServiceDocsVoicemailMessageGetAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailMessageGetAll v1AccountAccountIDVoicemailVoicemailIDMessageGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        ApiResponse<ServiceDocsVoicemailMessageGetAll> localVarResp = v1AccountAccountIDVoicemailVoicemailIDMessageGetWithHttpInfo(accountID, voicemailID, startKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Voicemail Message List
     * Get a list of voicemail messages from an account&#39;s voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID voicemail ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @return ApiResponse&lt;ServiceDocsVoicemailMessageGetAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailMessageGetAll> v1AccountAccountIDVoicemailVoicemailIDMessageGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageGetValidateBeforeCall(accountID, voicemailID, startKey, pageSize, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Voicemail Message List (asynchronously)
     * Get a list of voicemail messages from an account&#39;s voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID voicemail ID, 32 alpha numeric (required)
     * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param pageSize number of records to return, range 1 to 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nullable String startKey, @javax.annotation.Nullable Integer pageSize, final ApiCallback<ServiceDocsVoicemailMessageGetAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageGetValidateBeforeCall(accountID, voicemailID, startKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID message ID, 32 alpha numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()))
            .replace("{" + "messageID" + "}", localVarApiClient.escapeString(messageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete(Async)");
        }

        // verify the required parameter 'messageID' is set
        if (messageID == null) {
            throw new ApiException("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteCall(accountID, voicemailID, messageID, _callback);

    }

    /**
     * Delete Voicemail Message
     * Delete a voicemail message from a voicemail box in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID message ID, 32 alpha numeric (required)
     * @return ServiceDocsVoicemailMessageGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID) throws ApiException {
        ApiResponse<ServiceDocsVoicemailMessageGetSingle> localVarResp = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteWithHttpInfo(accountID, voicemailID, messageID);
        return localVarResp.getData();
    }

    /**
     * Delete Voicemail Message
     * Delete a voicemail message from a voicemail box in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID message ID, 32 alpha numeric (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailMessageGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailMessageGetSingle> v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteValidateBeforeCall(accountID, voicemailID, messageID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Voicemail Message (asynchronously)
     * Delete a voicemail message from a voicemail box in an account.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID message ID, 32 alpha numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback<ServiceDocsVoicemailMessageGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteValidateBeforeCall(accountID, voicemailID, messageID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()))
            .replace("{" + "messageID" + "}", localVarApiClient.escapeString(messageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet(Async)");
        }

        // verify the required parameter 'messageID' is set
        if (messageID == null) {
            throw new ApiException("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetCall(accountID, voicemailID, messageID, _callback);

    }

    /**
     * Get Voicemail Message Details
     * Retrieve the container details of an individual voicemail message. This includes a reference to the audio file, but not the message itself.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @return ServiceDocsVoicemailMessageGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID) throws ApiException {
        ApiResponse<ServiceDocsVoicemailMessageGetSingle> localVarResp = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetWithHttpInfo(accountID, voicemailID, messageID);
        return localVarResp.getData();
    }

    /**
     * Get Voicemail Message Details
     * Retrieve the container details of an individual voicemail message. This includes a reference to the audio file, but not the message itself.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailMessageGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailMessageGetSingle> v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetValidateBeforeCall(accountID, voicemailID, messageID, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Voicemail Message Details (asynchronously)
     * Retrieve the container details of an individual voicemail message. This includes a reference to the audio file, but not the message itself.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback<ServiceDocsVoicemailMessageGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetValidateBeforeCall(accountID, voicemailID, messageID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageChange reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()))
            .replace("{" + "messageID" + "}", localVarApiClient.escapeString(messageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageChange reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut(Async)");
        }

        // verify the required parameter 'messageID' is set
        if (messageID == null) {
            throw new ApiException("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutCall(accountID, voicemailID, messageID, reqBody, _callback);

    }

    /**
     * Update Voicemail Message
     * Copy or move a voicemail message to a different folder in the same voicemail box or move the message to a separate voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsVoicemailMessageGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageChange reqBody) throws ApiException {
        ApiResponse<ServiceDocsVoicemailMessageGetSingle> localVarResp = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutWithHttpInfo(accountID, voicemailID, messageID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Update Voicemail Message
     * Copy or move a voicemail message to a different folder in the same voicemail box or move the message to a separate voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailMessageGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailMessageGetSingle> v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageChange reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutValidateBeforeCall(accountID, voicemailID, messageID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Voicemail Message (asynchronously)
     * Copy or move a voicemail message to a different folder in the same voicemail box or move the message to a separate voicemail box.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageChange reqBody, final ApiCallback<ServiceDocsVoicemailMessageGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutValidateBeforeCall(accountID, voicemailID, messageID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet
     * @param accountID Account ID, unique 32-character alphanumeric identifier (required)
     * @param voicemailID Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param messageID Message ID, unique 32-character alphanumeric identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()))
            .replace("{" + "messageID" + "}", localVarApiClient.escapeString(messageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet(Async)");
        }

        // verify the required parameter 'messageID' is set
        if (messageID == null) {
            throw new ApiException("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetCall(accountID, voicemailID, messageID, _callback);

    }

    /**
     * Get Voicemail Message File
     * Get the original audio content of a specific voicemail message identified by its unique ID within an account&#39;s voicemail box. URL Param \&quot;voicemailID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific voicemail box. URL Param \&quot;messageID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific message within a voicemail box.
     * @param accountID Account ID, unique 32-character alphanumeric identifier (required)
     * @param voicemailID Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param messageID Message ID, unique 32-character alphanumeric identifier (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public File v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID) throws ApiException {
        ApiResponse<File> localVarResp = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetWithHttpInfo(accountID, voicemailID, messageID);
        return localVarResp.getData();
    }

    /**
     * Get Voicemail Message File
     * Get the original audio content of a specific voicemail message identified by its unique ID within an account&#39;s voicemail box. URL Param \&quot;voicemailID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific voicemail box. URL Param \&quot;messageID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific message within a voicemail box.
     * @param accountID Account ID, unique 32-character alphanumeric identifier (required)
     * @param voicemailID Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param messageID Message ID, unique 32-character alphanumeric identifier (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetValidateBeforeCall(accountID, voicemailID, messageID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Voicemail Message File (asynchronously)
     * Get the original audio content of a specific voicemail message identified by its unique ID within an account&#39;s voicemail box. URL Param \&quot;voicemailID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific voicemail box. URL Param \&quot;messageID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific message within a voicemail box.
     * @param accountID Account ID, unique 32-character alphanumeric identifier (required)
     * @param voicemailID Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param messageID Message ID, unique 32-character alphanumeric identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetValidateBeforeCall(accountID, voicemailID, messageID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost
     * @param accountID Account ID, 32 alphanumeric characters (required)
     * @param voicemailID Voicemail ID, 32 alphanumeric characters (required)
     * @param messageID Message ID, 32 alphanumeric characters (required)
     * @param _file Audio file to upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()))
            .replace("{" + "messageID" + "}", localVarApiClient.escapeString(messageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost(Async)");
        }

        // verify the required parameter 'messageID' is set
        if (messageID == null) {
            throw new ApiException("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostCall(accountID, voicemailID, messageID, _file, _callback);

    }

    /**
     * Add Voicemail Message File
     * Associate an audio recording file with the voicemail to fully complete the message.
     * @param accountID Account ID, 32 alphanumeric characters (required)
     * @param voicemailID Voicemail ID, 32 alphanumeric characters (required)
     * @param messageID Message ID, 32 alphanumeric characters (required)
     * @param _file Audio file to upload (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull File _file) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostWithHttpInfo(accountID, voicemailID, messageID, _file);
        return localVarResp.getData();
    }

    /**
     * Add Voicemail Message File
     * Associate an audio recording file with the voicemail to fully complete the message.
     * @param accountID Account ID, 32 alphanumeric characters (required)
     * @param voicemailID Voicemail ID, 32 alphanumeric characters (required)
     * @param messageID Message ID, 32 alphanumeric characters (required)
     * @param _file Audio file to upload (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull File _file) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostValidateBeforeCall(accountID, voicemailID, messageID, _file, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Voicemail Message File (asynchronously)
     * Associate an audio recording file with the voicemail to fully complete the message.
     * @param accountID Account ID, 32 alphanumeric characters (required)
     * @param voicemailID Voicemail ID, 32 alphanumeric characters (required)
     * @param messageID Message ID, 32 alphanumeric characters (required)
     * @param _file Audio file to upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull String messageID, @javax.annotation.Nonnull File _file, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostValidateBeforeCall(accountID, voicemailID, messageID, _file, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDMessagePost
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemailID voicemail ID, 32 alphanumeric (required)
     * @param message voicemail message payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessagePostCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageAddData message, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = message;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessagePostValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageAddData message, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost(Async)");
        }

        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDMessagePostCall(accountID, voicemailID, message, _callback);

    }

    /**
     * Create Voicemail Message
     * Create the container information for a recorded voicemail message in a voicemail box.
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemailID voicemail ID, 32 alphanumeric (required)
     * @param message voicemail message payload fields (required)
     * @return ServiceDocsVoicemailMessageGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessagePost(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageAddData message) throws ApiException {
        ApiResponse<ServiceDocsVoicemailMessageGetSingle> localVarResp = v1AccountAccountIDVoicemailVoicemailIDMessagePostWithHttpInfo(accountID, voicemailID, message);
        return localVarResp.getData();
    }

    /**
     * Create Voicemail Message
     * Create the container information for a recorded voicemail message in a voicemail box.
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemailID voicemail ID, 32 alphanumeric (required)
     * @param message voicemail message payload fields (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailMessageGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailMessageGetSingle> v1AccountAccountIDVoicemailVoicemailIDMessagePostWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageAddData message) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessagePostValidateBeforeCall(accountID, voicemailID, message, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Voicemail Message (asynchronously)
     * Create the container information for a recorded voicemail message in a voicemail box.
     * @param accountID account ID, 32 alphanumeric (required)
     * @param voicemailID voicemail ID, 32 alphanumeric (required)
     * @param message voicemail message payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDMessagePostAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailMessageAddData message, final ApiCallback<ServiceDocsVoicemailMessageGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDMessagePostValidateBeforeCall(accountID, voicemailID, message, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailMessageGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AccountAccountIDVoicemailVoicemailIDPut
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDPutCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reqBody;

        // create path and map variables
        String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "voicemailID" + "}", localVarApiClient.escapeString(voicemailID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDPutValidateBeforeCall(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData reqBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDPut(Async)");
        }

        // verify the required parameter 'voicemailID' is set
        if (voicemailID == null) {
            throw new ApiException("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDPut(Async)");
        }

        // verify the required parameter 'reqBody' is set
        if (reqBody == null) {
            throw new ApiException("Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDPut(Async)");
        }

        return v1AccountAccountIDVoicemailVoicemailIDPutCall(accountID, voicemailID, reqBody, _callback);

    }

    /**
     * Update Voicemail Box
     * Update the settings in an individual voicemail box, such as the owner, PIN, etc.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ServiceDocsVoicemailGetSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailVoicemailIDPut(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData reqBody) throws ApiException {
        ApiResponse<ServiceDocsVoicemailGetSingle> localVarResp = v1AccountAccountIDVoicemailVoicemailIDPutWithHttpInfo(accountID, voicemailID, reqBody);
        return localVarResp.getData();
    }

    /**
     * Update Voicemail Box
     * Update the settings in an individual voicemail box, such as the owner, PIN, etc.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @return ApiResponse&lt;ServiceDocsVoicemailGetSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDocsVoicemailGetSingle> v1AccountAccountIDVoicemailVoicemailIDPutWithHttpInfo(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData reqBody) throws ApiException {
        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDPutValidateBeforeCall(accountID, voicemailID, reqBody, null);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Voicemail Box (asynchronously)
     * Update the settings in an individual voicemail box, such as the owner, PIN, etc.
     * @param accountID Account ID, 32 alpha numeric (required)
     * @param voicemailID Voicemail ID, 32 alpha numeric (required)
     * @param reqBody payload fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AccountAccountIDVoicemailVoicemailIDPutAsync(@javax.annotation.Nonnull String accountID, @javax.annotation.Nonnull String voicemailID, @javax.annotation.Nonnull ServiceVOIPVoicemailAddEditData reqBody, final ApiCallback<ServiceDocsVoicemailGetSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AccountAccountIDVoicemailVoicemailIDPutValidateBeforeCall(accountID, voicemailID, reqBody, _callback);
        Type localVarReturnType = new TypeToken<ServiceDocsVoicemailGetSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
