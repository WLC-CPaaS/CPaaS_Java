/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelEventDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ModelEventDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  @javax.annotation.Nullable
  private String component;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private String createdAt;

  public static final String SERIALIZED_NAME_EVENT_NAME = "event_name";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nullable
  private String eventName;

  public static final String SERIALIZED_NAME_EXEC_STATUS = "exec_status";
  @SerializedName(SERIALIZED_NAME_EXEC_STATUS)
  @javax.annotation.Nullable
  private String execStatus;

  public static final String SERIALIZED_NAME_LOG_DATE = "log_date";
  @SerializedName(SERIALIZED_NAME_LOG_DATE)
  @javax.annotation.Nullable
  private String logDate;

  public static final String SERIALIZED_NAME_LOG_TIME = "log_time";
  @SerializedName(SERIALIZED_NAME_LOG_TIME)
  @javax.annotation.Nullable
  private String logTime;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public ModelEventDetail() {
  }

  public ModelEventDetail accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public ModelEventDetail component(@javax.annotation.Nullable String component) {
    this.component = component;
    return this;
  }

  /**
   * Get component
   * @return component
   */
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(@javax.annotation.Nullable String component) {
    this.component = component;
  }


  public ModelEventDetail createdAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
  }


  public ModelEventDetail eventName(@javax.annotation.Nullable String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Get eventName
   * @return eventName
   */
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nullable String eventName) {
    this.eventName = eventName;
  }


  public ModelEventDetail execStatus(@javax.annotation.Nullable String execStatus) {
    this.execStatus = execStatus;
    return this;
  }

  /**
   * Get execStatus
   * @return execStatus
   */
  @javax.annotation.Nullable
  public String getExecStatus() {
    return execStatus;
  }

  public void setExecStatus(@javax.annotation.Nullable String execStatus) {
    this.execStatus = execStatus;
  }


  public ModelEventDetail logDate(@javax.annotation.Nullable String logDate) {
    this.logDate = logDate;
    return this;
  }

  /**
   * Get logDate
   * @return logDate
   */
  @javax.annotation.Nullable
  public String getLogDate() {
    return logDate;
  }

  public void setLogDate(@javax.annotation.Nullable String logDate) {
    this.logDate = logDate;
  }


  public ModelEventDetail logTime(@javax.annotation.Nullable String logTime) {
    this.logTime = logTime;
    return this;
  }

  /**
   * Get logTime
   * @return logTime
   */
  @javax.annotation.Nullable
  public String getLogTime() {
    return logTime;
  }

  public void setLogTime(@javax.annotation.Nullable String logTime) {
    this.logTime = logTime;
  }


  public ModelEventDetail username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelEventDetail modelEventDetail = (ModelEventDetail) o;
    return Objects.equals(this.accountId, modelEventDetail.accountId) &&
        Objects.equals(this.component, modelEventDetail.component) &&
        Objects.equals(this.createdAt, modelEventDetail.createdAt) &&
        Objects.equals(this.eventName, modelEventDetail.eventName) &&
        Objects.equals(this.execStatus, modelEventDetail.execStatus) &&
        Objects.equals(this.logDate, modelEventDetail.logDate) &&
        Objects.equals(this.logTime, modelEventDetail.logTime) &&
        Objects.equals(this.username, modelEventDetail.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, component, createdAt, eventName, execStatus, logDate, logTime, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelEventDetail {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    execStatus: ").append(toIndentedString(execStatus)).append("\n");
    sb.append("    logDate: ").append(toIndentedString(logDate)).append("\n");
    sb.append("    logTime: ").append(toIndentedString(logTime)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("account_id", "component", "created_at", "event_name", "exec_status", "log_date", "log_time", "username"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelEventDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelEventDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelEventDetail is not found in the empty JSON string", ModelEventDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelEventDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelEventDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("event_name") != null && !jsonObj.get("event_name").isJsonNull()) && !jsonObj.get("event_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_name").toString()));
      }
      if ((jsonObj.get("exec_status") != null && !jsonObj.get("exec_status").isJsonNull()) && !jsonObj.get("exec_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exec_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exec_status").toString()));
      }
      if ((jsonObj.get("log_date") != null && !jsonObj.get("log_date").isJsonNull()) && !jsonObj.get("log_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_date").toString()));
      }
      if ((jsonObj.get("log_time") != null && !jsonObj.get("log_time").isJsonNull()) && !jsonObj.get("log_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_time").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelEventDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelEventDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelEventDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelEventDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelEventDetail>() {
           @Override
           public void write(JsonWriter out, ModelEventDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelEventDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelEventDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelEventDetail
   * @throws IOException if the JSON string is invalid with respect to ModelEventDetail
   */
  public static ModelEventDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelEventDetail.class);
  }

  /**
   * Convert an instance of ModelEventDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

