/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceStoragePlanDatabaseDocument;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceStoragePlanDatabaseTypes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceStoragePlanDatabaseTypes {
  public static final String SERIALIZED_NAME_CALL_RECORDING = "call_recording";
  @SerializedName(SERIALIZED_NAME_CALL_RECORDING)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabaseDocument callRecording;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabaseDocument fax;

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabaseDocument function;

  public static final String SERIALIZED_NAME_MAILBOX_MESSAGE = "mailbox_message";
  @SerializedName(SERIALIZED_NAME_MAILBOX_MESSAGE)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabaseDocument mailboxMessage;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabaseDocument media;

  public ServiceStoragePlanDatabaseTypes() {
  }

  public ServiceStoragePlanDatabaseTypes callRecording(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument callRecording) {
    this.callRecording = callRecording;
    return this;
  }

  /**
   * Get callRecording
   * @return callRecording
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabaseDocument getCallRecording() {
    return callRecording;
  }

  public void setCallRecording(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument callRecording) {
    this.callRecording = callRecording;
  }


  public ServiceStoragePlanDatabaseTypes fax(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument fax) {
    this.fax = fax;
    return this;
  }

  /**
   * Get fax
   * @return fax
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabaseDocument getFax() {
    return fax;
  }

  public void setFax(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument fax) {
    this.fax = fax;
  }


  public ServiceStoragePlanDatabaseTypes function(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument function) {
    this.function = function;
    return this;
  }

  /**
   * Get function
   * @return function
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabaseDocument getFunction() {
    return function;
  }

  public void setFunction(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument function) {
    this.function = function;
  }


  public ServiceStoragePlanDatabaseTypes mailboxMessage(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument mailboxMessage) {
    this.mailboxMessage = mailboxMessage;
    return this;
  }

  /**
   * Get mailboxMessage
   * @return mailboxMessage
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabaseDocument getMailboxMessage() {
    return mailboxMessage;
  }

  public void setMailboxMessage(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument mailboxMessage) {
    this.mailboxMessage = mailboxMessage;
  }


  public ServiceStoragePlanDatabaseTypes media(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabaseDocument getMedia() {
    return media;
  }

  public void setMedia(@javax.annotation.Nullable ServiceStoragePlanDatabaseDocument media) {
    this.media = media;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceStoragePlanDatabaseTypes serviceStoragePlanDatabaseTypes = (ServiceStoragePlanDatabaseTypes) o;
    return Objects.equals(this.callRecording, serviceStoragePlanDatabaseTypes.callRecording) &&
        Objects.equals(this.fax, serviceStoragePlanDatabaseTypes.fax) &&
        Objects.equals(this.function, serviceStoragePlanDatabaseTypes.function) &&
        Objects.equals(this.mailboxMessage, serviceStoragePlanDatabaseTypes.mailboxMessage) &&
        Objects.equals(this.media, serviceStoragePlanDatabaseTypes.media);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callRecording, fax, function, mailboxMessage, media);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceStoragePlanDatabaseTypes {\n");
    sb.append("    callRecording: ").append(toIndentedString(callRecording)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    mailboxMessage: ").append(toIndentedString(mailboxMessage)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("call_recording");
    openapiFields.add("fax");
    openapiFields.add("function");
    openapiFields.add("mailbox_message");
    openapiFields.add("media");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceStoragePlanDatabaseTypes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceStoragePlanDatabaseTypes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceStoragePlanDatabaseTypes is not found in the empty JSON string", ServiceStoragePlanDatabaseTypes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceStoragePlanDatabaseTypes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceStoragePlanDatabaseTypes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `call_recording`
      if (jsonObj.get("call_recording") != null && !jsonObj.get("call_recording").isJsonNull()) {
        ServiceStoragePlanDatabaseDocument.validateJsonElement(jsonObj.get("call_recording"));
      }
      // validate the optional field `fax`
      if (jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) {
        ServiceStoragePlanDatabaseDocument.validateJsonElement(jsonObj.get("fax"));
      }
      // validate the optional field `function`
      if (jsonObj.get("function") != null && !jsonObj.get("function").isJsonNull()) {
        ServiceStoragePlanDatabaseDocument.validateJsonElement(jsonObj.get("function"));
      }
      // validate the optional field `mailbox_message`
      if (jsonObj.get("mailbox_message") != null && !jsonObj.get("mailbox_message").isJsonNull()) {
        ServiceStoragePlanDatabaseDocument.validateJsonElement(jsonObj.get("mailbox_message"));
      }
      // validate the optional field `media`
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        ServiceStoragePlanDatabaseDocument.validateJsonElement(jsonObj.get("media"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceStoragePlanDatabaseTypes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceStoragePlanDatabaseTypes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceStoragePlanDatabaseTypes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceStoragePlanDatabaseTypes.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceStoragePlanDatabaseTypes>() {
           @Override
           public void write(JsonWriter out, ServiceStoragePlanDatabaseTypes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceStoragePlanDatabaseTypes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceStoragePlanDatabaseTypes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceStoragePlanDatabaseTypes
   * @throws IOException if the JSON string is invalid with respect to ServiceStoragePlanDatabaseTypes
   */
  public static ServiceStoragePlanDatabaseTypes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceStoragePlanDatabaseTypes.class);
  }

  /**
   * Convert an instance of ServiceStoragePlanDatabaseTypes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

