/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModelsUserOutputFullCalleridEmergency;
import org.openapitools.client.model.ModelsUserOutputFullCalleridExternal;
import org.openapitools.client.model.ModelsUserOutputFullCalleridInternal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsUserOutputFullCallerid
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ModelsUserOutputFullCallerid {
  public static final String SERIALIZED_NAME_EMERGENCY = "emergency";
  @SerializedName(SERIALIZED_NAME_EMERGENCY)
  @javax.annotation.Nullable
  private ModelsUserOutputFullCalleridEmergency emergency;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  @javax.annotation.Nullable
  private ModelsUserOutputFullCalleridExternal external;

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  @javax.annotation.Nullable
  private ModelsUserOutputFullCalleridInternal internal;

  public ModelsUserOutputFullCallerid() {
  }

  public ModelsUserOutputFullCallerid emergency(@javax.annotation.Nullable ModelsUserOutputFullCalleridEmergency emergency) {
    this.emergency = emergency;
    return this;
  }

  /**
   * Get emergency
   * @return emergency
   */
  @javax.annotation.Nullable
  public ModelsUserOutputFullCalleridEmergency getEmergency() {
    return emergency;
  }

  public void setEmergency(@javax.annotation.Nullable ModelsUserOutputFullCalleridEmergency emergency) {
    this.emergency = emergency;
  }


  public ModelsUserOutputFullCallerid external(@javax.annotation.Nullable ModelsUserOutputFullCalleridExternal external) {
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @javax.annotation.Nullable
  public ModelsUserOutputFullCalleridExternal getExternal() {
    return external;
  }

  public void setExternal(@javax.annotation.Nullable ModelsUserOutputFullCalleridExternal external) {
    this.external = external;
  }


  public ModelsUserOutputFullCallerid internal(@javax.annotation.Nullable ModelsUserOutputFullCalleridInternal internal) {
    this.internal = internal;
    return this;
  }

  /**
   * Get internal
   * @return internal
   */
  @javax.annotation.Nullable
  public ModelsUserOutputFullCalleridInternal getInternal() {
    return internal;
  }

  public void setInternal(@javax.annotation.Nullable ModelsUserOutputFullCalleridInternal internal) {
    this.internal = internal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsUserOutputFullCallerid modelsUserOutputFullCallerid = (ModelsUserOutputFullCallerid) o;
    return Objects.equals(this.emergency, modelsUserOutputFullCallerid.emergency) &&
        Objects.equals(this.external, modelsUserOutputFullCallerid.external) &&
        Objects.equals(this.internal, modelsUserOutputFullCallerid.internal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emergency, external, internal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsUserOutputFullCallerid {\n");
    sb.append("    emergency: ").append(toIndentedString(emergency)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("emergency", "external", "internal"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsUserOutputFullCallerid
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsUserOutputFullCallerid.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsUserOutputFullCallerid is not found in the empty JSON string", ModelsUserOutputFullCallerid.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsUserOutputFullCallerid.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsUserOutputFullCallerid` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `emergency`
      if (jsonObj.get("emergency") != null && !jsonObj.get("emergency").isJsonNull()) {
        ModelsUserOutputFullCalleridEmergency.validateJsonElement(jsonObj.get("emergency"));
      }
      // validate the optional field `external`
      if (jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) {
        ModelsUserOutputFullCalleridExternal.validateJsonElement(jsonObj.get("external"));
      }
      // validate the optional field `internal`
      if (jsonObj.get("internal") != null && !jsonObj.get("internal").isJsonNull()) {
        ModelsUserOutputFullCalleridInternal.validateJsonElement(jsonObj.get("internal"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsUserOutputFullCallerid.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsUserOutputFullCallerid' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsUserOutputFullCallerid> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsUserOutputFullCallerid.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsUserOutputFullCallerid>() {
           @Override
           public void write(JsonWriter out, ModelsUserOutputFullCallerid value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsUserOutputFullCallerid read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsUserOutputFullCallerid given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsUserOutputFullCallerid
   * @throws IOException if the JSON string is invalid with respect to ModelsUserOutputFullCallerid
   */
  public static ModelsUserOutputFullCallerid fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsUserOutputFullCallerid.class);
  }

  /**
   * Convert an instance of ModelsUserOutputFullCallerid to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

