/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceTTS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceTTS {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nonnull
  private String text;

  /**
   * Gets or Sets voice
   */
  @JsonAdapter(VoiceEnum.Adapter.class)
  public enum VoiceEnum {
    FEMALE_EN_US("female/en-US"),
    
    MALE_EN_US("male/en-US"),
    
    FEMALE_EN_CA("female/en-CA"),
    
    FEMALE_EN_AU("female/en-AU"),
    
    FEMALE_EN_GB("female/en-GB"),
    
    MALE_EN_GB("male/en-GB"),
    
    FEMALE_ES_US("female/es-US"),
    
    MALE_ES_US("male/es-US"),
    
    FEMALE_US_US("female/us-US"),
    
    FEMALE_ZH_CN("female/zh-CN"),
    
    MALE_ZH_CN("male/zh-CN"),
    
    FEMALE_ZH_HK("female/zh-HK"),
    
    FEMALE_ZH_TW("female/zh-TW"),
    
    FEMALE_JA_JP("female/ja-JP"),
    
    MALE_JA_JP("male/ja-JP"),
    
    FEMALE_KO_KR("female/ko-KR"),
    
    MALE_KO_KR("male/ko-KR"),
    
    FEMALE_DA_DK("female/da-DK"),
    
    FEMALE_DE_DE("female/de-DE"),
    
    MALE_DE_DE("male/de-DE"),
    
    FEMALE_CA_ES("female/ca-ES"),
    
    FEMALE_ES_ES("female/es-ES"),
    
    MALE_ES_ES("male/es-ES"),
    
    FEMALE_FI_FI("female/fi-FI"),
    
    FEMALE_FR_CA("female/fr-CA"),
    
    MALE_FR_CA("male/fr-CA"),
    
    FEMALE_FR_FR("female/fr-FR"),
    
    MALE_FR_FR("male/fr-FR"),
    
    FEMALE_IT_IT("female/it-IT"),
    
    MALE_IT_IT("male/it-IT"),
    
    FEMALE_NB_NO("female/nb-NO"),
    
    FEMALE_NL_NL("female/nl-NL"),
    
    FEMALE_PL_PL("female/pl-PL"),
    
    FEMALE_PT_BR("female/pt-BR"),
    
    FEMALE_PT_PT("female/pt-PT"),
    
    MALE_PT_PT("male/pt-PT"),
    
    FEMALE_RU_RU("female/ru-RU"),
    
    MALE_RU_RU("male/ru-RU"),
    
    FEMALE_SV_SE("female/sv-SE"),
    
    FEMALE_HU_HU("female/hu-HU"),
    
    FEMALE_CS_CZ("female/cs-CZ"),
    
    FEMALE_TR_TR("female/tr-TR"),
    
    MALE_TR_TR("male/tr-TR"),
    
    MALE_RU_RU_VLADIMIR("male/ru-RU/Vladimir"),
    
    FEMALE_RU_RU_JULIA("female/ru-RU/Julia"),
    
    FEMALE_RU_RU_ANNA("female/ru-RU/Anna"),
    
    FEMALE_RU_RU_VIKTORIA("female/ru-RU/Viktoria"),
    
    MALE_RU_RU_ALEXANDER("male/ru-RU/Alexander"),
    
    FEMALE_RU_RU_MARIA("female/ru-RU/Maria"),
    
    FEMALE_RU_RU_LIDIA("female/ru-RU/Lidia"),
    
    ES_ES_STANDARD_A("es-ES-Standard-A"),
    
    IT_IT_STANDARD_A("it-IT-Standard-A"),
    
    JA_JP_STANDARD_A("ja-JP-Standard-A"),
    
    KO_KR_STANDARD_A("ko-KR-Standard-A"),
    
    PT_BR_STANDARD_A("pt-BR-Standard-A"),
    
    TR_TR_STANDARD_A("tr-TR-Standard-A"),
    
    SV_SE_STANDARD_A("sv-SE-Standard-A"),
    
    NL_NL_STANDARD_A("nl-NL-Standard-A"),
    
    EN_US_WAVENET_D("en-US-Wavenet-D"),
    
    DE_DE_WAVENET_A("de-DE-Wavenet-A"),
    
    DE_DE_WAVENET_B("de-DE-Wavenet-B"),
    
    DE_DE_WAVENET_C("de-DE-Wavenet-C"),
    
    DE_DE_WAVENET_D("de-DE-Wavenet-D"),
    
    EN_AU_WAVENET_A("en-AU-Wavenet-A"),
    
    EN_AU_WAVENET_B("en-AU-Wavenet-B"),
    
    EN_AU_WAVENET_C("en-AU-Wavenet-C"),
    
    EN_AU_WAVENET_D("en-AU-Wavenet-D"),
    
    EN_GB_WAVENET_A("en-GB-Wavenet-A"),
    
    EN_GB_WAVENET_B("en-GB-Wavenet-B"),
    
    EN_GB_WAVENET_C("en-GB-Wavenet-C"),
    
    EN_GB_WAVENET_D("en-GB-Wavenet-D"),
    
    EN_US_WAVENET_A("en-US-Wavenet-A"),
    
    EN_US_WAVENET_B("en-US-Wavenet-B"),
    
    EN_US_WAVENET_C("en-US-Wavenet-C"),
    
    EN_US_WAVENET_E("en-US-Wavenet-E"),
    
    EN_US_WAVENET_F("en-US-Wavenet-F"),
    
    FR_FR_WAVENET_A("fr-FR-Wavenet-A"),
    
    FR_FR_WAVENET_B("fr-FR-Wavenet-B"),
    
    FR_FR_WAVENET_C("fr-FR-Wavenet-C"),
    
    FR_FR_WAVENET_D("fr-FR-Wavenet-D"),
    
    IT_IT_WAVENET_A("it-IT-Wavenet-A"),
    
    JA_JP_WAVENET_A("ja-JP-Wavenet-A"),
    
    NL_NL_WAVENET_A("nl-NL-Wavenet-A"),
    
    EN_GB_STANDARD_A("en-GB-Standard-A"),
    
    EN_GB_STANDARD_B("en-GB-Standard-B"),
    
    EN_GB_STANDARD_C("en-GB-Standard-C"),
    
    EN_GB_STANDARD_D("en-GB-Standard-D"),
    
    EN_US_STANDARD_B("en-US-Standard-B"),
    
    EN_US_STANDARD_C("en-US-Standard-C"),
    
    EN_US_STANDARD_D("en-US-Standard-D"),
    
    EN_US_STANDARD_E("en-US-Standard-E"),
    
    DE_DE_STANDARD_A("de-DE-Standard-A"),
    
    DE_DE_STANDARD_B("de-DE-Standard-B"),
    
    EN_AU_STANDARD_A("en-AU-Standard-A"),
    
    EN_AU_STANDARD_B("en-AU-Standard-B"),
    
    EN_AU_STANDARD_C("en-AU-Standard-C"),
    
    EN_AU_STANDARD_D("en-AU-Standard-D"),
    
    FR_CA_STANDARD_A("fr-CA-Standard-A"),
    
    FR_CA_STANDARD_B("fr-CA-Standard-B"),
    
    FR_CA_STANDARD_C("fr-CA-Standard-C"),
    
    FR_CA_STANDARD_D("fr-CA-Standard-D"),
    
    FR_FR_STANDARD_A("fr-FR-Standard-A"),
    
    FR_FR_STANDARD_B("fr-FR-Standard-B"),
    
    FR_FR_STANDARD_C("fr-FR-Standard-C"),
    
    FR_FR_STANDARD_D("fr-FR-Standard-D");

    private String value;

    VoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceEnum fromValue(String value) {
      for (VoiceEnum b : VoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  @javax.annotation.Nullable
  private VoiceEnum voice;

  public ServiceTTS() {
  }

  public ServiceTTS text(@javax.annotation.Nonnull String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(@javax.annotation.Nonnull String text) {
    this.text = text;
  }


  public ServiceTTS voice(@javax.annotation.Nullable VoiceEnum voice) {
    this.voice = voice;
    return this;
  }

  /**
   * Get voice
   * @return voice
   */
  @javax.annotation.Nullable
  public VoiceEnum getVoice() {
    return voice;
  }

  public void setVoice(@javax.annotation.Nullable VoiceEnum voice) {
    this.voice = voice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTTS serviceTTS = (ServiceTTS) o;
    return Objects.equals(this.text, serviceTTS.text) &&
        Objects.equals(this.voice, serviceTTS.voice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, voice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTTS {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("text");
    openapiFields.add("voice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceTTS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceTTS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceTTS is not found in the empty JSON string", ServiceTTS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceTTS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceTTS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceTTS.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("voice") != null && !jsonObj.get("voice").isJsonNull()) && !jsonObj.get("voice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice").toString()));
      }
      // validate the optional field `voice`
      if (jsonObj.get("voice") != null && !jsonObj.get("voice").isJsonNull()) {
        VoiceEnum.validateJsonElement(jsonObj.get("voice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceTTS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceTTS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceTTS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceTTS.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceTTS>() {
           @Override
           public void write(JsonWriter out, ServiceTTS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceTTS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceTTS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceTTS
   * @throws IOException if the JSON string is invalid with respect to ServiceTTS
   */
  public static ServiceTTS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceTTS.class);
  }

  /**
   * Convert an instance of ServiceTTS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

