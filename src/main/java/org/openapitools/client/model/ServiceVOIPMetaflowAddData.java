/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ServiceMetaflowPattern;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceVOIPMetaflowAddData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceVOIPMetaflowAddData {
  /**
   * Gets or Sets bindingDigit
   */
  @JsonAdapter(BindingDigitEnum.Adapter.class)
  public enum BindingDigitEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    _0("0"),
    
    STAR("*"),
    
    HASH("#");

    private String value;

    BindingDigitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BindingDigitEnum fromValue(String value) {
      for (BindingDigitEnum b : BindingDigitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BindingDigitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BindingDigitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BindingDigitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BindingDigitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BindingDigitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BINDING_DIGIT = "binding_digit";
  @SerializedName(SERIALIZED_NAME_BINDING_DIGIT)
  @javax.annotation.Nullable
  private BindingDigitEnum bindingDigit;

  public static final String SERIALIZED_NAME_NUMBERS = "numbers";
  @SerializedName(SERIALIZED_NAME_NUMBERS)
  @javax.annotation.Nullable
  private Map<String, ServiceMetaflowPattern> numbers = new HashMap<>();

  public static final String SERIALIZED_NAME_PATTERNS = "patterns";
  @SerializedName(SERIALIZED_NAME_PATTERNS)
  @javax.annotation.Nullable
  private Map<String, ServiceMetaflowPattern> patterns = new HashMap<>();

  public ServiceVOIPMetaflowAddData() {
  }

  public ServiceVOIPMetaflowAddData bindingDigit(@javax.annotation.Nullable BindingDigitEnum bindingDigit) {
    this.bindingDigit = bindingDigit;
    return this;
  }

  /**
   * Get bindingDigit
   * @return bindingDigit
   */
  @javax.annotation.Nullable
  public BindingDigitEnum getBindingDigit() {
    return bindingDigit;
  }

  public void setBindingDigit(@javax.annotation.Nullable BindingDigitEnum bindingDigit) {
    this.bindingDigit = bindingDigit;
  }


  public ServiceVOIPMetaflowAddData numbers(@javax.annotation.Nullable Map<String, ServiceMetaflowPattern> numbers) {
    this.numbers = numbers;
    return this;
  }

  public ServiceVOIPMetaflowAddData putNumbersItem(String key, ServiceMetaflowPattern numbersItem) {
    if (this.numbers == null) {
      this.numbers = new HashMap<>();
    }
    this.numbers.put(key, numbersItem);
    return this;
  }

  /**
   * Get numbers
   * @return numbers
   */
  @javax.annotation.Nullable
  public Map<String, ServiceMetaflowPattern> getNumbers() {
    return numbers;
  }

  public void setNumbers(@javax.annotation.Nullable Map<String, ServiceMetaflowPattern> numbers) {
    this.numbers = numbers;
  }


  public ServiceVOIPMetaflowAddData patterns(@javax.annotation.Nullable Map<String, ServiceMetaflowPattern> patterns) {
    this.patterns = patterns;
    return this;
  }

  public ServiceVOIPMetaflowAddData putPatternsItem(String key, ServiceMetaflowPattern patternsItem) {
    if (this.patterns == null) {
      this.patterns = new HashMap<>();
    }
    this.patterns.put(key, patternsItem);
    return this;
  }

  /**
   * Get patterns
   * @return patterns
   */
  @javax.annotation.Nullable
  public Map<String, ServiceMetaflowPattern> getPatterns() {
    return patterns;
  }

  public void setPatterns(@javax.annotation.Nullable Map<String, ServiceMetaflowPattern> patterns) {
    this.patterns = patterns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceVOIPMetaflowAddData serviceVOIPMetaflowAddData = (ServiceVOIPMetaflowAddData) o;
    return Objects.equals(this.bindingDigit, serviceVOIPMetaflowAddData.bindingDigit) &&
        Objects.equals(this.numbers, serviceVOIPMetaflowAddData.numbers) &&
        Objects.equals(this.patterns, serviceVOIPMetaflowAddData.patterns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bindingDigit, numbers, patterns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceVOIPMetaflowAddData {\n");
    sb.append("    bindingDigit: ").append(toIndentedString(bindingDigit)).append("\n");
    sb.append("    numbers: ").append(toIndentedString(numbers)).append("\n");
    sb.append("    patterns: ").append(toIndentedString(patterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("binding_digit", "numbers", "patterns"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceVOIPMetaflowAddData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceVOIPMetaflowAddData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceVOIPMetaflowAddData is not found in the empty JSON string", ServiceVOIPMetaflowAddData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceVOIPMetaflowAddData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceVOIPMetaflowAddData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("binding_digit") != null && !jsonObj.get("binding_digit").isJsonNull()) && !jsonObj.get("binding_digit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `binding_digit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("binding_digit").toString()));
      }
      // validate the optional field `binding_digit`
      if (jsonObj.get("binding_digit") != null && !jsonObj.get("binding_digit").isJsonNull()) {
        BindingDigitEnum.validateJsonElement(jsonObj.get("binding_digit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceVOIPMetaflowAddData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceVOIPMetaflowAddData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceVOIPMetaflowAddData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceVOIPMetaflowAddData.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceVOIPMetaflowAddData>() {
           @Override
           public void write(JsonWriter out, ServiceVOIPMetaflowAddData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceVOIPMetaflowAddData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceVOIPMetaflowAddData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceVOIPMetaflowAddData
   * @throws IOException if the JSON string is invalid with respect to ServiceVOIPMetaflowAddData
   */
  public static ServiceVOIPMetaflowAddData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceVOIPMetaflowAddData.class);
  }

  /**
   * Convert an instance of ServiceVOIPMetaflowAddData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

