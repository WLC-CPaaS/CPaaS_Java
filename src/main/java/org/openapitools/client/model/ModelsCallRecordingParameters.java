/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsCallRecordingParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ModelsCallRecordingParameters {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    MP3("mp3"),
    
    WAV("wav");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private FormatEnum format;

  public static final String SERIALIZED_NAME_RECORD_MIN_SEC = "record_min_sec";
  @SerializedName(SERIALIZED_NAME_RECORD_MIN_SEC)
  @javax.annotation.Nullable
  private Integer recordMinSec;

  public static final String SERIALIZED_NAME_RECORD_ON_ANSWER = "record_on_answer";
  @SerializedName(SERIALIZED_NAME_RECORD_ON_ANSWER)
  @javax.annotation.Nullable
  private Boolean recordOnAnswer;

  public static final String SERIALIZED_NAME_RECORD_ON_BRIDGE = "record_on_bridge";
  @SerializedName(SERIALIZED_NAME_RECORD_ON_BRIDGE)
  @javax.annotation.Nullable
  private Boolean recordOnBridge;

  public static final String SERIALIZED_NAME_RECORD_SAMPLE_RATE = "record_sample_rate";
  @SerializedName(SERIALIZED_NAME_RECORD_SAMPLE_RATE)
  @javax.annotation.Nullable
  private Integer recordSampleRate;

  public static final String SERIALIZED_NAME_TIME_LIMIT = "time_limit";
  @SerializedName(SERIALIZED_NAME_TIME_LIMIT)
  @javax.annotation.Nullable
  private Integer timeLimit;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public ModelsCallRecordingParameters() {
  }

  public ModelsCallRecordingParameters enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public ModelsCallRecordingParameters format(@javax.annotation.Nullable FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable FormatEnum format) {
    this.format = format;
  }


  public ModelsCallRecordingParameters recordMinSec(@javax.annotation.Nullable Integer recordMinSec) {
    this.recordMinSec = recordMinSec;
    return this;
  }

  /**
   * Get recordMinSec
   * @return recordMinSec
   */
  @javax.annotation.Nullable
  public Integer getRecordMinSec() {
    return recordMinSec;
  }

  public void setRecordMinSec(@javax.annotation.Nullable Integer recordMinSec) {
    this.recordMinSec = recordMinSec;
  }


  public ModelsCallRecordingParameters recordOnAnswer(@javax.annotation.Nullable Boolean recordOnAnswer) {
    this.recordOnAnswer = recordOnAnswer;
    return this;
  }

  /**
   * Get recordOnAnswer
   * @return recordOnAnswer
   */
  @javax.annotation.Nullable
  public Boolean getRecordOnAnswer() {
    return recordOnAnswer;
  }

  public void setRecordOnAnswer(@javax.annotation.Nullable Boolean recordOnAnswer) {
    this.recordOnAnswer = recordOnAnswer;
  }


  public ModelsCallRecordingParameters recordOnBridge(@javax.annotation.Nullable Boolean recordOnBridge) {
    this.recordOnBridge = recordOnBridge;
    return this;
  }

  /**
   * Get recordOnBridge
   * @return recordOnBridge
   */
  @javax.annotation.Nullable
  public Boolean getRecordOnBridge() {
    return recordOnBridge;
  }

  public void setRecordOnBridge(@javax.annotation.Nullable Boolean recordOnBridge) {
    this.recordOnBridge = recordOnBridge;
  }


  public ModelsCallRecordingParameters recordSampleRate(@javax.annotation.Nullable Integer recordSampleRate) {
    this.recordSampleRate = recordSampleRate;
    return this;
  }

  /**
   * Get recordSampleRate
   * @return recordSampleRate
   */
  @javax.annotation.Nullable
  public Integer getRecordSampleRate() {
    return recordSampleRate;
  }

  public void setRecordSampleRate(@javax.annotation.Nullable Integer recordSampleRate) {
    this.recordSampleRate = recordSampleRate;
  }


  public ModelsCallRecordingParameters timeLimit(@javax.annotation.Nullable Integer timeLimit) {
    this.timeLimit = timeLimit;
    return this;
  }

  /**
   * Get timeLimit
   * minimum: 5
   * maximum: 10800
   * @return timeLimit
   */
  @javax.annotation.Nullable
  public Integer getTimeLimit() {
    return timeLimit;
  }

  public void setTimeLimit(@javax.annotation.Nullable Integer timeLimit) {
    this.timeLimit = timeLimit;
  }


  public ModelsCallRecordingParameters url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsCallRecordingParameters modelsCallRecordingParameters = (ModelsCallRecordingParameters) o;
    return Objects.equals(this.enabled, modelsCallRecordingParameters.enabled) &&
        Objects.equals(this.format, modelsCallRecordingParameters.format) &&
        Objects.equals(this.recordMinSec, modelsCallRecordingParameters.recordMinSec) &&
        Objects.equals(this.recordOnAnswer, modelsCallRecordingParameters.recordOnAnswer) &&
        Objects.equals(this.recordOnBridge, modelsCallRecordingParameters.recordOnBridge) &&
        Objects.equals(this.recordSampleRate, modelsCallRecordingParameters.recordSampleRate) &&
        Objects.equals(this.timeLimit, modelsCallRecordingParameters.timeLimit) &&
        Objects.equals(this.url, modelsCallRecordingParameters.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, format, recordMinSec, recordOnAnswer, recordOnBridge, recordSampleRate, timeLimit, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsCallRecordingParameters {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    recordMinSec: ").append(toIndentedString(recordMinSec)).append("\n");
    sb.append("    recordOnAnswer: ").append(toIndentedString(recordOnAnswer)).append("\n");
    sb.append("    recordOnBridge: ").append(toIndentedString(recordOnBridge)).append("\n");
    sb.append("    recordSampleRate: ").append(toIndentedString(recordSampleRate)).append("\n");
    sb.append("    timeLimit: ").append(toIndentedString(timeLimit)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("enabled", "format", "record_min_sec", "record_on_answer", "record_on_bridge", "record_sample_rate", "time_limit", "url"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsCallRecordingParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsCallRecordingParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsCallRecordingParameters is not found in the empty JSON string", ModelsCallRecordingParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsCallRecordingParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsCallRecordingParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsCallRecordingParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsCallRecordingParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsCallRecordingParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsCallRecordingParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsCallRecordingParameters>() {
           @Override
           public void write(JsonWriter out, ModelsCallRecordingParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsCallRecordingParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsCallRecordingParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsCallRecordingParameters
   * @throws IOException if the JSON string is invalid with respect to ModelsCallRecordingParameters
   */
  public static ModelsCallRecordingParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsCallRecordingParameters.class);
  }

  /**
   * Convert an instance of ModelsCallRecordingParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

