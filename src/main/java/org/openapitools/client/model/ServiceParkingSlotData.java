/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceParkingSlotData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceParkingSlotData {
  public static final String SERIALIZED_NAME_ATTENDED = "attended";
  @SerializedName(SERIALIZED_NAME_ATTENDED)
  @javax.annotation.Nullable
  private Boolean attended;

  public static final String SERIALIZED_NAME_CALL_ID = "call_id";
  @SerializedName(SERIALIZED_NAME_CALL_ID)
  @javax.annotation.Nullable
  private String callId;

  public static final String SERIALIZED_NAME_CID_NAME = "cid_name";
  @SerializedName(SERIALIZED_NAME_CID_NAME)
  @javax.annotation.Nullable
  private String cidName;

  public static final String SERIALIZED_NAME_CID_NUMBER = "cid_number";
  @SerializedName(SERIALIZED_NAME_CID_NUMBER)
  @javax.annotation.Nullable
  private String cidNumber;

  public static final String SERIALIZED_NAME_CID_URI = "cid_uri";
  @SerializedName(SERIALIZED_NAME_CID_URI)
  @javax.annotation.Nullable
  private String cidUri;

  public static final String SERIALIZED_NAME_FROM_TAG = "from_tag";
  @SerializedName(SERIALIZED_NAME_FROM_TAG)
  @javax.annotation.Nullable
  private String fromTag;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  @javax.annotation.Nullable
  private String node;

  public static final String SERIALIZED_NAME_PRESENCE_ID = "presence_id";
  @SerializedName(SERIALIZED_NAME_PRESENCE_ID)
  @javax.annotation.Nullable
  private String presenceId;

  public static final String SERIALIZED_NAME_PRESENCE_REALM = "presence_realm";
  @SerializedName(SERIALIZED_NAME_PRESENCE_REALM)
  @javax.annotation.Nullable
  private String presenceRealm;

  public static final String SERIALIZED_NAME_PRESENCE_TYPE = "presence_type";
  @SerializedName(SERIALIZED_NAME_PRESENCE_TYPE)
  @javax.annotation.Nullable
  private String presenceType;

  public static final String SERIALIZED_NAME_PRESENCE_USER = "presence_user";
  @SerializedName(SERIALIZED_NAME_PRESENCE_USER)
  @javax.annotation.Nullable
  private String presenceUser;

  public static final String SERIALIZED_NAME_RINGBACK_ID = "ringback_id";
  @SerializedName(SERIALIZED_NAME_RINGBACK_ID)
  @javax.annotation.Nullable
  private String ringbackId;

  public static final String SERIALIZED_NAME_SLOT_CALL_ID = "slot_call_id";
  @SerializedName(SERIALIZED_NAME_SLOT_CALL_ID)
  @javax.annotation.Nullable
  private String slotCallId;

  public static final String SERIALIZED_NAME_SWITCH_URI = "switch_uri";
  @SerializedName(SERIALIZED_NAME_SWITCH_URI)
  @javax.annotation.Nullable
  private String switchUri;

  public static final String SERIALIZED_NAME_TO_TAG = "to_tag";
  @SerializedName(SERIALIZED_NAME_TO_TAG)
  @javax.annotation.Nullable
  private String toTag;

  public ServiceParkingSlotData() {
  }

  public ServiceParkingSlotData attended(@javax.annotation.Nullable Boolean attended) {
    this.attended = attended;
    return this;
  }

  /**
   * Get attended
   * @return attended
   */
  @javax.annotation.Nullable
  public Boolean getAttended() {
    return attended;
  }

  public void setAttended(@javax.annotation.Nullable Boolean attended) {
    this.attended = attended;
  }


  public ServiceParkingSlotData callId(@javax.annotation.Nullable String callId) {
    this.callId = callId;
    return this;
  }

  /**
   * Get callId
   * @return callId
   */
  @javax.annotation.Nullable
  public String getCallId() {
    return callId;
  }

  public void setCallId(@javax.annotation.Nullable String callId) {
    this.callId = callId;
  }


  public ServiceParkingSlotData cidName(@javax.annotation.Nullable String cidName) {
    this.cidName = cidName;
    return this;
  }

  /**
   * Get cidName
   * @return cidName
   */
  @javax.annotation.Nullable
  public String getCidName() {
    return cidName;
  }

  public void setCidName(@javax.annotation.Nullable String cidName) {
    this.cidName = cidName;
  }


  public ServiceParkingSlotData cidNumber(@javax.annotation.Nullable String cidNumber) {
    this.cidNumber = cidNumber;
    return this;
  }

  /**
   * Get cidNumber
   * @return cidNumber
   */
  @javax.annotation.Nullable
  public String getCidNumber() {
    return cidNumber;
  }

  public void setCidNumber(@javax.annotation.Nullable String cidNumber) {
    this.cidNumber = cidNumber;
  }


  public ServiceParkingSlotData cidUri(@javax.annotation.Nullable String cidUri) {
    this.cidUri = cidUri;
    return this;
  }

  /**
   * Get cidUri
   * @return cidUri
   */
  @javax.annotation.Nullable
  public String getCidUri() {
    return cidUri;
  }

  public void setCidUri(@javax.annotation.Nullable String cidUri) {
    this.cidUri = cidUri;
  }


  public ServiceParkingSlotData fromTag(@javax.annotation.Nullable String fromTag) {
    this.fromTag = fromTag;
    return this;
  }

  /**
   * Get fromTag
   * @return fromTag
   */
  @javax.annotation.Nullable
  public String getFromTag() {
    return fromTag;
  }

  public void setFromTag(@javax.annotation.Nullable String fromTag) {
    this.fromTag = fromTag;
  }


  public ServiceParkingSlotData node(@javax.annotation.Nullable String node) {
    this.node = node;
    return this;
  }

  /**
   * Get node
   * @return node
   */
  @javax.annotation.Nullable
  public String getNode() {
    return node;
  }

  public void setNode(@javax.annotation.Nullable String node) {
    this.node = node;
  }


  public ServiceParkingSlotData presenceId(@javax.annotation.Nullable String presenceId) {
    this.presenceId = presenceId;
    return this;
  }

  /**
   * Get presenceId
   * @return presenceId
   */
  @javax.annotation.Nullable
  public String getPresenceId() {
    return presenceId;
  }

  public void setPresenceId(@javax.annotation.Nullable String presenceId) {
    this.presenceId = presenceId;
  }


  public ServiceParkingSlotData presenceRealm(@javax.annotation.Nullable String presenceRealm) {
    this.presenceRealm = presenceRealm;
    return this;
  }

  /**
   * Get presenceRealm
   * @return presenceRealm
   */
  @javax.annotation.Nullable
  public String getPresenceRealm() {
    return presenceRealm;
  }

  public void setPresenceRealm(@javax.annotation.Nullable String presenceRealm) {
    this.presenceRealm = presenceRealm;
  }


  public ServiceParkingSlotData presenceType(@javax.annotation.Nullable String presenceType) {
    this.presenceType = presenceType;
    return this;
  }

  /**
   * Get presenceType
   * @return presenceType
   */
  @javax.annotation.Nullable
  public String getPresenceType() {
    return presenceType;
  }

  public void setPresenceType(@javax.annotation.Nullable String presenceType) {
    this.presenceType = presenceType;
  }


  public ServiceParkingSlotData presenceUser(@javax.annotation.Nullable String presenceUser) {
    this.presenceUser = presenceUser;
    return this;
  }

  /**
   * Get presenceUser
   * @return presenceUser
   */
  @javax.annotation.Nullable
  public String getPresenceUser() {
    return presenceUser;
  }

  public void setPresenceUser(@javax.annotation.Nullable String presenceUser) {
    this.presenceUser = presenceUser;
  }


  public ServiceParkingSlotData ringbackId(@javax.annotation.Nullable String ringbackId) {
    this.ringbackId = ringbackId;
    return this;
  }

  /**
   * Get ringbackId
   * @return ringbackId
   */
  @javax.annotation.Nullable
  public String getRingbackId() {
    return ringbackId;
  }

  public void setRingbackId(@javax.annotation.Nullable String ringbackId) {
    this.ringbackId = ringbackId;
  }


  public ServiceParkingSlotData slotCallId(@javax.annotation.Nullable String slotCallId) {
    this.slotCallId = slotCallId;
    return this;
  }

  /**
   * Get slotCallId
   * @return slotCallId
   */
  @javax.annotation.Nullable
  public String getSlotCallId() {
    return slotCallId;
  }

  public void setSlotCallId(@javax.annotation.Nullable String slotCallId) {
    this.slotCallId = slotCallId;
  }


  public ServiceParkingSlotData switchUri(@javax.annotation.Nullable String switchUri) {
    this.switchUri = switchUri;
    return this;
  }

  /**
   * Get switchUri
   * @return switchUri
   */
  @javax.annotation.Nullable
  public String getSwitchUri() {
    return switchUri;
  }

  public void setSwitchUri(@javax.annotation.Nullable String switchUri) {
    this.switchUri = switchUri;
  }


  public ServiceParkingSlotData toTag(@javax.annotation.Nullable String toTag) {
    this.toTag = toTag;
    return this;
  }

  /**
   * Get toTag
   * @return toTag
   */
  @javax.annotation.Nullable
  public String getToTag() {
    return toTag;
  }

  public void setToTag(@javax.annotation.Nullable String toTag) {
    this.toTag = toTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceParkingSlotData serviceParkingSlotData = (ServiceParkingSlotData) o;
    return Objects.equals(this.attended, serviceParkingSlotData.attended) &&
        Objects.equals(this.callId, serviceParkingSlotData.callId) &&
        Objects.equals(this.cidName, serviceParkingSlotData.cidName) &&
        Objects.equals(this.cidNumber, serviceParkingSlotData.cidNumber) &&
        Objects.equals(this.cidUri, serviceParkingSlotData.cidUri) &&
        Objects.equals(this.fromTag, serviceParkingSlotData.fromTag) &&
        Objects.equals(this.node, serviceParkingSlotData.node) &&
        Objects.equals(this.presenceId, serviceParkingSlotData.presenceId) &&
        Objects.equals(this.presenceRealm, serviceParkingSlotData.presenceRealm) &&
        Objects.equals(this.presenceType, serviceParkingSlotData.presenceType) &&
        Objects.equals(this.presenceUser, serviceParkingSlotData.presenceUser) &&
        Objects.equals(this.ringbackId, serviceParkingSlotData.ringbackId) &&
        Objects.equals(this.slotCallId, serviceParkingSlotData.slotCallId) &&
        Objects.equals(this.switchUri, serviceParkingSlotData.switchUri) &&
        Objects.equals(this.toTag, serviceParkingSlotData.toTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attended, callId, cidName, cidNumber, cidUri, fromTag, node, presenceId, presenceRealm, presenceType, presenceUser, ringbackId, slotCallId, switchUri, toTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceParkingSlotData {\n");
    sb.append("    attended: ").append(toIndentedString(attended)).append("\n");
    sb.append("    callId: ").append(toIndentedString(callId)).append("\n");
    sb.append("    cidName: ").append(toIndentedString(cidName)).append("\n");
    sb.append("    cidNumber: ").append(toIndentedString(cidNumber)).append("\n");
    sb.append("    cidUri: ").append(toIndentedString(cidUri)).append("\n");
    sb.append("    fromTag: ").append(toIndentedString(fromTag)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    presenceId: ").append(toIndentedString(presenceId)).append("\n");
    sb.append("    presenceRealm: ").append(toIndentedString(presenceRealm)).append("\n");
    sb.append("    presenceType: ").append(toIndentedString(presenceType)).append("\n");
    sb.append("    presenceUser: ").append(toIndentedString(presenceUser)).append("\n");
    sb.append("    ringbackId: ").append(toIndentedString(ringbackId)).append("\n");
    sb.append("    slotCallId: ").append(toIndentedString(slotCallId)).append("\n");
    sb.append("    switchUri: ").append(toIndentedString(switchUri)).append("\n");
    sb.append("    toTag: ").append(toIndentedString(toTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attended");
    openapiFields.add("call_id");
    openapiFields.add("cid_name");
    openapiFields.add("cid_number");
    openapiFields.add("cid_uri");
    openapiFields.add("from_tag");
    openapiFields.add("node");
    openapiFields.add("presence_id");
    openapiFields.add("presence_realm");
    openapiFields.add("presence_type");
    openapiFields.add("presence_user");
    openapiFields.add("ringback_id");
    openapiFields.add("slot_call_id");
    openapiFields.add("switch_uri");
    openapiFields.add("to_tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceParkingSlotData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceParkingSlotData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceParkingSlotData is not found in the empty JSON string", ServiceParkingSlotData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceParkingSlotData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceParkingSlotData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("call_id") != null && !jsonObj.get("call_id").isJsonNull()) && !jsonObj.get("call_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_id").toString()));
      }
      if ((jsonObj.get("cid_name") != null && !jsonObj.get("cid_name").isJsonNull()) && !jsonObj.get("cid_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid_name").toString()));
      }
      if ((jsonObj.get("cid_number") != null && !jsonObj.get("cid_number").isJsonNull()) && !jsonObj.get("cid_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid_number").toString()));
      }
      if ((jsonObj.get("cid_uri") != null && !jsonObj.get("cid_uri").isJsonNull()) && !jsonObj.get("cid_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid_uri").toString()));
      }
      if ((jsonObj.get("from_tag") != null && !jsonObj.get("from_tag").isJsonNull()) && !jsonObj.get("from_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_tag").toString()));
      }
      if ((jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) && !jsonObj.get("node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node").toString()));
      }
      if ((jsonObj.get("presence_id") != null && !jsonObj.get("presence_id").isJsonNull()) && !jsonObj.get("presence_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presence_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presence_id").toString()));
      }
      if ((jsonObj.get("presence_realm") != null && !jsonObj.get("presence_realm").isJsonNull()) && !jsonObj.get("presence_realm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presence_realm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presence_realm").toString()));
      }
      if ((jsonObj.get("presence_type") != null && !jsonObj.get("presence_type").isJsonNull()) && !jsonObj.get("presence_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presence_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presence_type").toString()));
      }
      if ((jsonObj.get("presence_user") != null && !jsonObj.get("presence_user").isJsonNull()) && !jsonObj.get("presence_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presence_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presence_user").toString()));
      }
      if ((jsonObj.get("ringback_id") != null && !jsonObj.get("ringback_id").isJsonNull()) && !jsonObj.get("ringback_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ringback_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ringback_id").toString()));
      }
      if ((jsonObj.get("slot_call_id") != null && !jsonObj.get("slot_call_id").isJsonNull()) && !jsonObj.get("slot_call_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slot_call_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slot_call_id").toString()));
      }
      if ((jsonObj.get("switch_uri") != null && !jsonObj.get("switch_uri").isJsonNull()) && !jsonObj.get("switch_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switch_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switch_uri").toString()));
      }
      if ((jsonObj.get("to_tag") != null && !jsonObj.get("to_tag").isJsonNull()) && !jsonObj.get("to_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceParkingSlotData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceParkingSlotData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceParkingSlotData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceParkingSlotData.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceParkingSlotData>() {
           @Override
           public void write(JsonWriter out, ServiceParkingSlotData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceParkingSlotData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceParkingSlotData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceParkingSlotData
   * @throws IOException if the JSON string is invalid with respect to ServiceParkingSlotData
   */
  public static ServiceParkingSlotData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceParkingSlotData.class);
  }

  /**
   * Convert an instance of ServiceParkingSlotData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

