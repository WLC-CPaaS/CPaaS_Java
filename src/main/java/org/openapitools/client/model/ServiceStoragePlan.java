/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceStoragePlanDatabase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceStoragePlan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceStoragePlan {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabase account;

  public static final String SERIALIZED_NAME_AGGREGATE = "aggregate";
  @SerializedName(SERIALIZED_NAME_AGGREGATE)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabase aggregate;

  public static final String SERIALIZED_NAME_MODB = "modb";
  @SerializedName(SERIALIZED_NAME_MODB)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabase modb;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  @javax.annotation.Nullable
  private ServiceStoragePlanDatabase system;

  public ServiceStoragePlan() {
  }

  public ServiceStoragePlan account(@javax.annotation.Nullable ServiceStoragePlanDatabase account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabase getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable ServiceStoragePlanDatabase account) {
    this.account = account;
  }


  public ServiceStoragePlan aggregate(@javax.annotation.Nullable ServiceStoragePlanDatabase aggregate) {
    this.aggregate = aggregate;
    return this;
  }

  /**
   * Get aggregate
   * @return aggregate
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabase getAggregate() {
    return aggregate;
  }

  public void setAggregate(@javax.annotation.Nullable ServiceStoragePlanDatabase aggregate) {
    this.aggregate = aggregate;
  }


  public ServiceStoragePlan modb(@javax.annotation.Nullable ServiceStoragePlanDatabase modb) {
    this.modb = modb;
    return this;
  }

  /**
   * Get modb
   * @return modb
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabase getModb() {
    return modb;
  }

  public void setModb(@javax.annotation.Nullable ServiceStoragePlanDatabase modb) {
    this.modb = modb;
  }


  public ServiceStoragePlan system(@javax.annotation.Nullable ServiceStoragePlanDatabase system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nullable
  public ServiceStoragePlanDatabase getSystem() {
    return system;
  }

  public void setSystem(@javax.annotation.Nullable ServiceStoragePlanDatabase system) {
    this.system = system;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceStoragePlan serviceStoragePlan = (ServiceStoragePlan) o;
    return Objects.equals(this.account, serviceStoragePlan.account) &&
        Objects.equals(this.aggregate, serviceStoragePlan.aggregate) &&
        Objects.equals(this.modb, serviceStoragePlan.modb) &&
        Objects.equals(this.system, serviceStoragePlan.system);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, aggregate, modb, system);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceStoragePlan {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    aggregate: ").append(toIndentedString(aggregate)).append("\n");
    sb.append("    modb: ").append(toIndentedString(modb)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("aggregate");
    openapiFields.add("modb");
    openapiFields.add("system");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceStoragePlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceStoragePlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceStoragePlan is not found in the empty JSON string", ServiceStoragePlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceStoragePlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceStoragePlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        ServiceStoragePlanDatabase.validateJsonElement(jsonObj.get("account"));
      }
      // validate the optional field `aggregate`
      if (jsonObj.get("aggregate") != null && !jsonObj.get("aggregate").isJsonNull()) {
        ServiceStoragePlanDatabase.validateJsonElement(jsonObj.get("aggregate"));
      }
      // validate the optional field `modb`
      if (jsonObj.get("modb") != null && !jsonObj.get("modb").isJsonNull()) {
        ServiceStoragePlanDatabase.validateJsonElement(jsonObj.get("modb"));
      }
      // validate the optional field `system`
      if (jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) {
        ServiceStoragePlanDatabase.validateJsonElement(jsonObj.get("system"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceStoragePlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceStoragePlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceStoragePlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceStoragePlan.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceStoragePlan>() {
           @Override
           public void write(JsonWriter out, ServiceStoragePlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceStoragePlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceStoragePlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceStoragePlan
   * @throws IOException if the JSON string is invalid with respect to ServiceStoragePlan
   */
  public static ServiceStoragePlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceStoragePlan.class);
  }

  /**
   * Convert an instance of ServiceStoragePlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

