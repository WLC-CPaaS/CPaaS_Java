/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceTTS;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceMediaOutputFull
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceMediaOutputFull {
  public static final String SERIALIZED_NAME_CONTENT_LENGTH = "content_length";
  @SerializedName(SERIALIZED_NAME_CONTENT_LENGTH)
  @javax.annotation.Nullable
  private Integer contentLength;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  @javax.annotation.Nullable
  private String contentType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_MEDIA_SOURCE = "media_source";
  @SerializedName(SERIALIZED_NAME_MEDIA_SOURCE)
  @javax.annotation.Nullable
  private String mediaSource;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_STREAMABLE = "streamable";
  @SerializedName(SERIALIZED_NAME_STREAMABLE)
  @javax.annotation.Nullable
  private Boolean streamable;

  public static final String SERIALIZED_NAME_TTS = "tts";
  @SerializedName(SERIALIZED_NAME_TTS)
  @javax.annotation.Nullable
  private ServiceTTS tts;

  public ServiceMediaOutputFull() {
  }

  public ServiceMediaOutputFull contentLength(@javax.annotation.Nullable Integer contentLength) {
    this.contentLength = contentLength;
    return this;
  }

  /**
   * Get contentLength
   * @return contentLength
   */
  @javax.annotation.Nullable
  public Integer getContentLength() {
    return contentLength;
  }

  public void setContentLength(@javax.annotation.Nullable Integer contentLength) {
    this.contentLength = contentLength;
  }


  public ServiceMediaOutputFull contentType(@javax.annotation.Nullable String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(@javax.annotation.Nullable String contentType) {
    this.contentType = contentType;
  }


  public ServiceMediaOutputFull description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ServiceMediaOutputFull id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ServiceMediaOutputFull language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public ServiceMediaOutputFull mediaSource(@javax.annotation.Nullable String mediaSource) {
    this.mediaSource = mediaSource;
    return this;
  }

  /**
   * Get mediaSource
   * @return mediaSource
   */
  @javax.annotation.Nullable
  public String getMediaSource() {
    return mediaSource;
  }

  public void setMediaSource(@javax.annotation.Nullable String mediaSource) {
    this.mediaSource = mediaSource;
  }


  public ServiceMediaOutputFull name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ServiceMediaOutputFull streamable(@javax.annotation.Nullable Boolean streamable) {
    this.streamable = streamable;
    return this;
  }

  /**
   * Get streamable
   * @return streamable
   */
  @javax.annotation.Nullable
  public Boolean getStreamable() {
    return streamable;
  }

  public void setStreamable(@javax.annotation.Nullable Boolean streamable) {
    this.streamable = streamable;
  }


  public ServiceMediaOutputFull tts(@javax.annotation.Nullable ServiceTTS tts) {
    this.tts = tts;
    return this;
  }

  /**
   * Get tts
   * @return tts
   */
  @javax.annotation.Nullable
  public ServiceTTS getTts() {
    return tts;
  }

  public void setTts(@javax.annotation.Nullable ServiceTTS tts) {
    this.tts = tts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceMediaOutputFull serviceMediaOutputFull = (ServiceMediaOutputFull) o;
    return Objects.equals(this.contentLength, serviceMediaOutputFull.contentLength) &&
        Objects.equals(this.contentType, serviceMediaOutputFull.contentType) &&
        Objects.equals(this.description, serviceMediaOutputFull.description) &&
        Objects.equals(this.id, serviceMediaOutputFull.id) &&
        Objects.equals(this.language, serviceMediaOutputFull.language) &&
        Objects.equals(this.mediaSource, serviceMediaOutputFull.mediaSource) &&
        Objects.equals(this.name, serviceMediaOutputFull.name) &&
        Objects.equals(this.streamable, serviceMediaOutputFull.streamable) &&
        Objects.equals(this.tts, serviceMediaOutputFull.tts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentLength, contentType, description, id, language, mediaSource, name, streamable, tts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceMediaOutputFull {\n");
    sb.append("    contentLength: ").append(toIndentedString(contentLength)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    mediaSource: ").append(toIndentedString(mediaSource)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    streamable: ").append(toIndentedString(streamable)).append("\n");
    sb.append("    tts: ").append(toIndentedString(tts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("content_length", "content_type", "description", "id", "language", "media_source", "name", "streamable", "tts"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceMediaOutputFull
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceMediaOutputFull.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceMediaOutputFull is not found in the empty JSON string", ServiceMediaOutputFull.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceMediaOutputFull.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceMediaOutputFull` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("media_source") != null && !jsonObj.get("media_source").isJsonNull()) && !jsonObj.get("media_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_source").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `tts`
      if (jsonObj.get("tts") != null && !jsonObj.get("tts").isJsonNull()) {
        ServiceTTS.validateJsonElement(jsonObj.get("tts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceMediaOutputFull.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceMediaOutputFull' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceMediaOutputFull> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceMediaOutputFull.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceMediaOutputFull>() {
           @Override
           public void write(JsonWriter out, ServiceMediaOutputFull value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceMediaOutputFull read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceMediaOutputFull given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceMediaOutputFull
   * @throws IOException if the JSON string is invalid with respect to ServiceMediaOutputFull
   */
  public static ServiceMediaOutputFull fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceMediaOutputFull.class);
  }

  /**
   * Convert an instance of ServiceMediaOutputFull to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

