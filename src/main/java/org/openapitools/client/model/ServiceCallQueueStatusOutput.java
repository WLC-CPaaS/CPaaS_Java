/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceCallQueueStatusStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceCallQueueStatusOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceCallQueueStatusOutput {
  public static final String SERIALIZED_NAME_ACTIVE_RECIPIENT_COUNT = "active_recipient_count";
  @SerializedName(SERIALIZED_NAME_ACTIVE_RECIPIENT_COUNT)
  @javax.annotation.Nullable
  private Integer activeRecipientCount;

  public static final String SERIALIZED_NAME_AVAILABLE_RECIPIENT_COUNT = "available_recipient_count";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_RECIPIENT_COUNT)
  @javax.annotation.Nullable
  private Integer availableRecipientCount;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  @javax.annotation.Nullable
  private String node;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  @javax.annotation.Nullable
  private ServiceCallQueueStatusStats stats;

  public ServiceCallQueueStatusOutput() {
  }

  public ServiceCallQueueStatusOutput activeRecipientCount(@javax.annotation.Nullable Integer activeRecipientCount) {
    this.activeRecipientCount = activeRecipientCount;
    return this;
  }

  /**
   * Get activeRecipientCount
   * @return activeRecipientCount
   */
  @javax.annotation.Nullable
  public Integer getActiveRecipientCount() {
    return activeRecipientCount;
  }

  public void setActiveRecipientCount(@javax.annotation.Nullable Integer activeRecipientCount) {
    this.activeRecipientCount = activeRecipientCount;
  }


  public ServiceCallQueueStatusOutput availableRecipientCount(@javax.annotation.Nullable Integer availableRecipientCount) {
    this.availableRecipientCount = availableRecipientCount;
    return this;
  }

  /**
   * Get availableRecipientCount
   * @return availableRecipientCount
   */
  @javax.annotation.Nullable
  public Integer getAvailableRecipientCount() {
    return availableRecipientCount;
  }

  public void setAvailableRecipientCount(@javax.annotation.Nullable Integer availableRecipientCount) {
    this.availableRecipientCount = availableRecipientCount;
  }


  public ServiceCallQueueStatusOutput node(@javax.annotation.Nullable String node) {
    this.node = node;
    return this;
  }

  /**
   * Get node
   * @return node
   */
  @javax.annotation.Nullable
  public String getNode() {
    return node;
  }

  public void setNode(@javax.annotation.Nullable String node) {
    this.node = node;
  }


  public ServiceCallQueueStatusOutput stats(@javax.annotation.Nullable ServiceCallQueueStatusStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public ServiceCallQueueStatusStats getStats() {
    return stats;
  }

  public void setStats(@javax.annotation.Nullable ServiceCallQueueStatusStats stats) {
    this.stats = stats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceCallQueueStatusOutput serviceCallQueueStatusOutput = (ServiceCallQueueStatusOutput) o;
    return Objects.equals(this.activeRecipientCount, serviceCallQueueStatusOutput.activeRecipientCount) &&
        Objects.equals(this.availableRecipientCount, serviceCallQueueStatusOutput.availableRecipientCount) &&
        Objects.equals(this.node, serviceCallQueueStatusOutput.node) &&
        Objects.equals(this.stats, serviceCallQueueStatusOutput.stats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeRecipientCount, availableRecipientCount, node, stats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceCallQueueStatusOutput {\n");
    sb.append("    activeRecipientCount: ").append(toIndentedString(activeRecipientCount)).append("\n");
    sb.append("    availableRecipientCount: ").append(toIndentedString(availableRecipientCount)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_recipient_count");
    openapiFields.add("available_recipient_count");
    openapiFields.add("node");
    openapiFields.add("stats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceCallQueueStatusOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceCallQueueStatusOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceCallQueueStatusOutput is not found in the empty JSON string", ServiceCallQueueStatusOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceCallQueueStatusOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceCallQueueStatusOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) && !jsonObj.get("node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        ServiceCallQueueStatusStats.validateJsonElement(jsonObj.get("stats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceCallQueueStatusOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceCallQueueStatusOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceCallQueueStatusOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceCallQueueStatusOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceCallQueueStatusOutput>() {
           @Override
           public void write(JsonWriter out, ServiceCallQueueStatusOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceCallQueueStatusOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceCallQueueStatusOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceCallQueueStatusOutput
   * @throws IOException if the JSON string is invalid with respect to ServiceCallQueueStatusOutput
   */
  public static ServiceCallQueueStatusOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceCallQueueStatusOutput.class);
  }

  /**
   * Convert an instance of ServiceCallQueueStatusOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

