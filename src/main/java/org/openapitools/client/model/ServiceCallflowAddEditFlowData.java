/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceCallflowAddEditFlowData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceCallflowAddEditFlowData {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  @javax.annotation.Nullable
  private Map<String, ServiceCallflowAddEditFlowData> children = new HashMap<>();

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nullable
  private Map<String, Object> data = new HashMap<>();

  /**
   * Gets or Sets module
   */
  @JsonAdapter(ModuleEnum.Adapter.class)
  public enum ModuleEnum {
    DEVICE("device"),
    
    OFFNET("offnet"),
    
    MENU("menu"),
    
    PLAY("play"),
    
    TEMPORAL_ROUTE("temporal_route"),
    
    VOICEMAIL("voicemail"),
    
    USER("user"),
    
    CALL_FORWARD("call_forward"),
    
    GROUP("group"),
    
    RING_GROUP("ring_group"),
    
    DO_NOT_DISTURB("do_not_disturb"),
    
    PARK("park"),
    
    GROUP_PICKUP("group_pickup"),
    
    GROUP_PICKUP_FEATURE("group_pickup_feature"),
    
    INTERCOM("intercom"),
    
    PAGE_GROUP("page_group"),
    
    RECORD_CALL("record_call"),
    
    RECORD_CALLER("record_caller"),
    
    QUBICLE("qubicle"),
    
    MISSED_CALL_ALERT("missed_call_alert");

    private String value;

    ModuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModuleEnum fromValue(String value) {
      for (ModuleEnum b : ModuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModuleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModuleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  @javax.annotation.Nonnull
  private ModuleEnum module;

  public ServiceCallflowAddEditFlowData() {
  }

  public ServiceCallflowAddEditFlowData children(@javax.annotation.Nullable Map<String, ServiceCallflowAddEditFlowData> children) {
    this.children = children;
    return this;
  }

  public ServiceCallflowAddEditFlowData putChildrenItem(String key, ServiceCallflowAddEditFlowData childrenItem) {
    if (this.children == null) {
      this.children = new HashMap<>();
    }
    this.children.put(key, childrenItem);
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  public Map<String, ServiceCallflowAddEditFlowData> getChildren() {
    return children;
  }

  public void setChildren(@javax.annotation.Nullable Map<String, ServiceCallflowAddEditFlowData> children) {
    this.children = children;
  }


  public ServiceCallflowAddEditFlowData data(@javax.annotation.Nullable Map<String, Object> data) {
    this.data = data;
    return this;
  }

  public ServiceCallflowAddEditFlowData putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, Object> getData() {
    return data;
  }

  public void setData(@javax.annotation.Nullable Map<String, Object> data) {
    this.data = data;
  }


  public ServiceCallflowAddEditFlowData module(@javax.annotation.Nonnull ModuleEnum module) {
    this.module = module;
    return this;
  }

  /**
   * Get module
   * @return module
   */
  @javax.annotation.Nonnull
  public ModuleEnum getModule() {
    return module;
  }

  public void setModule(@javax.annotation.Nonnull ModuleEnum module) {
    this.module = module;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceCallflowAddEditFlowData serviceCallflowAddEditFlowData = (ServiceCallflowAddEditFlowData) o;
    return Objects.equals(this.children, serviceCallflowAddEditFlowData.children) &&
        Objects.equals(this.data, serviceCallflowAddEditFlowData.data) &&
        Objects.equals(this.module, serviceCallflowAddEditFlowData.module);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, data, module);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceCallflowAddEditFlowData {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("data");
    openapiFields.add("module");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("module");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceCallflowAddEditFlowData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceCallflowAddEditFlowData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceCallflowAddEditFlowData is not found in the empty JSON string", ServiceCallflowAddEditFlowData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceCallflowAddEditFlowData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceCallflowAddEditFlowData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceCallflowAddEditFlowData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("module").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module").toString()));
      }
      // validate the required field `module`
      ModuleEnum.validateJsonElement(jsonObj.get("module"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceCallflowAddEditFlowData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceCallflowAddEditFlowData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceCallflowAddEditFlowData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceCallflowAddEditFlowData.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceCallflowAddEditFlowData>() {
           @Override
           public void write(JsonWriter out, ServiceCallflowAddEditFlowData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceCallflowAddEditFlowData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceCallflowAddEditFlowData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceCallflowAddEditFlowData
   * @throws IOException if the JSON string is invalid with respect to ServiceCallflowAddEditFlowData
   */
  public static ServiceCallflowAddEditFlowData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceCallflowAddEditFlowData.class);
  }

  /**
   * Convert an instance of ServiceCallflowAddEditFlowData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

