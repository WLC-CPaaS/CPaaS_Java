/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelEventMonthlySummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ModelEventMonthlySummary {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  @javax.annotation.Nullable
  private String component;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private String createdAt;

  public static final String SERIALIZED_NAME_TRANSACTION_COUNT = "transaction_count";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_COUNT)
  @javax.annotation.Nullable
  private Integer transactionCount;

  public static final String SERIALIZED_NAME_TRANSACTION_MONTH = "transaction_month";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_MONTH)
  @javax.annotation.Nullable
  private Integer transactionMonth;

  public static final String SERIALIZED_NAME_TRANSACTION_YEAR = "transaction_year";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_YEAR)
  @javax.annotation.Nullable
  private Integer transactionYear;

  public ModelEventMonthlySummary() {
  }

  public ModelEventMonthlySummary accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public ModelEventMonthlySummary component(@javax.annotation.Nullable String component) {
    this.component = component;
    return this;
  }

  /**
   * Get component
   * @return component
   */
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(@javax.annotation.Nullable String component) {
    this.component = component;
  }


  public ModelEventMonthlySummary createdAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
  }


  public ModelEventMonthlySummary transactionCount(@javax.annotation.Nullable Integer transactionCount) {
    this.transactionCount = transactionCount;
    return this;
  }

  /**
   * Get transactionCount
   * @return transactionCount
   */
  @javax.annotation.Nullable
  public Integer getTransactionCount() {
    return transactionCount;
  }

  public void setTransactionCount(@javax.annotation.Nullable Integer transactionCount) {
    this.transactionCount = transactionCount;
  }


  public ModelEventMonthlySummary transactionMonth(@javax.annotation.Nullable Integer transactionMonth) {
    this.transactionMonth = transactionMonth;
    return this;
  }

  /**
   * Get transactionMonth
   * @return transactionMonth
   */
  @javax.annotation.Nullable
  public Integer getTransactionMonth() {
    return transactionMonth;
  }

  public void setTransactionMonth(@javax.annotation.Nullable Integer transactionMonth) {
    this.transactionMonth = transactionMonth;
  }


  public ModelEventMonthlySummary transactionYear(@javax.annotation.Nullable Integer transactionYear) {
    this.transactionYear = transactionYear;
    return this;
  }

  /**
   * Get transactionYear
   * @return transactionYear
   */
  @javax.annotation.Nullable
  public Integer getTransactionYear() {
    return transactionYear;
  }

  public void setTransactionYear(@javax.annotation.Nullable Integer transactionYear) {
    this.transactionYear = transactionYear;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelEventMonthlySummary modelEventMonthlySummary = (ModelEventMonthlySummary) o;
    return Objects.equals(this.accountId, modelEventMonthlySummary.accountId) &&
        Objects.equals(this.component, modelEventMonthlySummary.component) &&
        Objects.equals(this.createdAt, modelEventMonthlySummary.createdAt) &&
        Objects.equals(this.transactionCount, modelEventMonthlySummary.transactionCount) &&
        Objects.equals(this.transactionMonth, modelEventMonthlySummary.transactionMonth) &&
        Objects.equals(this.transactionYear, modelEventMonthlySummary.transactionYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, component, createdAt, transactionCount, transactionMonth, transactionYear);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelEventMonthlySummary {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    transactionCount: ").append(toIndentedString(transactionCount)).append("\n");
    sb.append("    transactionMonth: ").append(toIndentedString(transactionMonth)).append("\n");
    sb.append("    transactionYear: ").append(toIndentedString(transactionYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("component");
    openapiFields.add("created_at");
    openapiFields.add("transaction_count");
    openapiFields.add("transaction_month");
    openapiFields.add("transaction_year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelEventMonthlySummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelEventMonthlySummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelEventMonthlySummary is not found in the empty JSON string", ModelEventMonthlySummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelEventMonthlySummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelEventMonthlySummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelEventMonthlySummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelEventMonthlySummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelEventMonthlySummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelEventMonthlySummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelEventMonthlySummary>() {
           @Override
           public void write(JsonWriter out, ModelEventMonthlySummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelEventMonthlySummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelEventMonthlySummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelEventMonthlySummary
   * @throws IOException if the JSON string is invalid with respect to ModelEventMonthlySummary
   */
  public static ModelEventMonthlySummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelEventMonthlySummary.class);
  }

  /**
   * Convert an instance of ModelEventMonthlySummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

