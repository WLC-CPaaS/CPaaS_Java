/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceCallflowOutputShort
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceCallflowOutputShort {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  @javax.annotation.Nullable
  private List<String> modules = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_NUMBERS = "numbers";
  @SerializedName(SERIALIZED_NAME_NUMBERS)
  @javax.annotation.Nullable
  private List<String> numbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATTERNS = "patterns";
  @SerializedName(SERIALIZED_NAME_PATTERNS)
  @javax.annotation.Nullable
  private List<String> patterns = new ArrayList<>();

  public ServiceCallflowOutputShort() {
  }

  public ServiceCallflowOutputShort id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ServiceCallflowOutputShort modules(@javax.annotation.Nullable List<String> modules) {
    this.modules = modules;
    return this;
  }

  public ServiceCallflowOutputShort addModulesItem(String modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<>();
    }
    this.modules.add(modulesItem);
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nullable
  public List<String> getModules() {
    return modules;
  }

  public void setModules(@javax.annotation.Nullable List<String> modules) {
    this.modules = modules;
  }


  public ServiceCallflowOutputShort name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ServiceCallflowOutputShort numbers(@javax.annotation.Nullable List<String> numbers) {
    this.numbers = numbers;
    return this;
  }

  public ServiceCallflowOutputShort addNumbersItem(String numbersItem) {
    if (this.numbers == null) {
      this.numbers = new ArrayList<>();
    }
    this.numbers.add(numbersItem);
    return this;
  }

  /**
   * Get numbers
   * @return numbers
   */
  @javax.annotation.Nullable
  public List<String> getNumbers() {
    return numbers;
  }

  public void setNumbers(@javax.annotation.Nullable List<String> numbers) {
    this.numbers = numbers;
  }


  public ServiceCallflowOutputShort patterns(@javax.annotation.Nullable List<String> patterns) {
    this.patterns = patterns;
    return this;
  }

  public ServiceCallflowOutputShort addPatternsItem(String patternsItem) {
    if (this.patterns == null) {
      this.patterns = new ArrayList<>();
    }
    this.patterns.add(patternsItem);
    return this;
  }

  /**
   * Get patterns
   * @return patterns
   */
  @javax.annotation.Nullable
  public List<String> getPatterns() {
    return patterns;
  }

  public void setPatterns(@javax.annotation.Nullable List<String> patterns) {
    this.patterns = patterns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceCallflowOutputShort serviceCallflowOutputShort = (ServiceCallflowOutputShort) o;
    return Objects.equals(this.id, serviceCallflowOutputShort.id) &&
        Objects.equals(this.modules, serviceCallflowOutputShort.modules) &&
        Objects.equals(this.name, serviceCallflowOutputShort.name) &&
        Objects.equals(this.numbers, serviceCallflowOutputShort.numbers) &&
        Objects.equals(this.patterns, serviceCallflowOutputShort.patterns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, modules, name, numbers, patterns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceCallflowOutputShort {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numbers: ").append(toIndentedString(numbers)).append("\n");
    sb.append("    patterns: ").append(toIndentedString(patterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("modules");
    openapiFields.add("name");
    openapiFields.add("numbers");
    openapiFields.add("patterns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceCallflowOutputShort
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceCallflowOutputShort.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceCallflowOutputShort is not found in the empty JSON string", ServiceCallflowOutputShort.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceCallflowOutputShort.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceCallflowOutputShort` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modules") != null && !jsonObj.get("modules").isJsonNull() && !jsonObj.get("modules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modules` to be an array in the JSON string but got `%s`", jsonObj.get("modules").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("numbers") != null && !jsonObj.get("numbers").isJsonNull() && !jsonObj.get("numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `numbers` to be an array in the JSON string but got `%s`", jsonObj.get("numbers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("patterns") != null && !jsonObj.get("patterns").isJsonNull() && !jsonObj.get("patterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patterns` to be an array in the JSON string but got `%s`", jsonObj.get("patterns").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceCallflowOutputShort.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceCallflowOutputShort' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceCallflowOutputShort> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceCallflowOutputShort.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceCallflowOutputShort>() {
           @Override
           public void write(JsonWriter out, ServiceCallflowOutputShort value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceCallflowOutputShort read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceCallflowOutputShort given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceCallflowOutputShort
   * @throws IOException if the JSON string is invalid with respect to ServiceCallflowOutputShort
   */
  public static ServiceCallflowOutputShort fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceCallflowOutputShort.class);
  }

  /**
   * Convert an instance of ServiceCallflowOutputShort to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

