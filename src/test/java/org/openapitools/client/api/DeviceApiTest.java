/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsDeviceGetAll;
import org.openapitools.client.model.ServiceDocsDeviceGetSingle;
import org.openapitools.client.model.ServiceDocsDeviceReboot;
import org.openapitools.client.model.ServiceDocsDeviceStatus;
import org.openapitools.client.model.ServiceVOIPDeviceAddEdit2;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceApi
 */
@Disabled
public class DeviceApiTest {

    private final DeviceApi api = new DeviceApi();

    /**
     * Delete Device
     *
     * Remove one device from a CPaaS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDeviceDeviceidDeleteTest() throws ApiException {
        String accountid = null;
        String deviceid = null;
        ServiceDocsDeviceGetSingle response = api.v1AccountAccountidDeviceDeviceidDelete(accountid, deviceid);
        // TODO: test validations
    }

    /**
     * Get Device Details
     *
     * Permit a user to view specific device details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDeviceDeviceidGetTest() throws ApiException {
        String accountid = null;
        String deviceid = null;
        ServiceDocsDeviceGetSingle response = api.v1AccountAccountidDeviceDeviceidGet(accountid, deviceid);
        // TODO: test validations
    }

    /**
     * Update Device
     *
     * Edit specifics about the device, such as the device type, name, and owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDeviceDeviceidPutTest() throws ApiException {
        String accountid = null;
        String deviceid = null;
        ServiceVOIPDeviceAddEdit2 device = null;
        ServiceDocsDeviceGetSingle response = api.v1AccountAccountidDeviceDeviceidPut(accountid, deviceid, device);
        // TODO: test validations
    }

    /**
     * Reboot Device
     *
     * Reboot a device in an account to mitigate malware and improve device performance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDeviceDeviceidRebootPostTest() throws ApiException {
        String accountid = null;
        String deviceid = null;
        ServiceDocsDeviceReboot response = api.v1AccountAccountidDeviceDeviceidRebootPost(accountid, deviceid);
        // TODO: test validations
    }

    /**
     * Get Device List
     *
     * Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDeviceGetTest() throws ApiException {
        String accountid = null;
        String startKey = null;
        Integer pageSize = null;
        ServiceDocsDeviceGetAll response = api.v1AccountAccountidDeviceGet(accountid, startKey, pageSize);
        // TODO: test validations
    }

    /**
     * Create Device
     *
     * Connect a new device to an account to enhance communication methods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDevicePostTest() throws ApiException {
        String accountid = null;
        ServiceVOIPDeviceAddEdit2 device = null;
        ServiceDocsDeviceGetSingle response = api.v1AccountAccountidDevicePost(accountid, device);
        // TODO: test validations
    }

    /**
     * Get Device Status
     *
     * Retrieve a deviceâ€™s status (e.g., registered or not registered) in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDeviceStatusGetTest() throws ApiException {
        String accountid = null;
        ServiceDocsDeviceStatus response = api.v1AccountAccountidDeviceStatusGet(accountid);
        // TODO: test validations
    }

}
