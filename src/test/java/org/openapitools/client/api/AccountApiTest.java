/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsAccountAPIKey;
import org.openapitools.client.model.ServiceDocsAccountGetAll;
import org.openapitools.client.model.ServiceDocsAccountGetSingle;
import org.openapitools.client.model.ServiceDocsAccountLimit;
import org.openapitools.client.model.ServiceDocsAccountProvisioning;
import org.openapitools.client.model.ServiceUpdateRecordTypeForAccount;
import org.openapitools.client.model.ServiceVOIPAccountAddData;
import org.openapitools.client.model.ServiceVOIPAccountEditData;
import org.openapitools.client.model.ServiceVOIPAccountLimit2;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    /**
     * Get Sub Account List
     *
     * Conveniently access the list of children accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidChildrenGetTest() throws ApiException {
        String accountid = null;
        String startKey = null;
        Integer pageSize = null;
        ServiceDocsAccountGetAll response = api.v1AccountAccountidChildrenGet(accountid, startKey, pageSize);
        // TODO: test validations
    }

    /**
     * Delete Account
     *
     * Delete an account within your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDeleteTest() throws ApiException {
        String accountid = null;
        ServiceDocsAccountGetSingle response = api.v1AccountAccountidDelete(accountid);
        // TODO: test validations
    }

    /**
     * Get Account DNS Record
     *
     * Get the DNS record of an account from the Route 53 entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDnsrecordGetTest() throws ApiException {
        String accountid = null;
        ServiceDocsAccountGetSingle response = api.v1AccountAccountidDnsrecordGet(accountid);
        // TODO: test validations
    }

    /**
     * Create Account DNS Record
     *
     * Create the DNS record of an account with the help realm in the Route 53 entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDnsrecordPostTest() throws ApiException {
        String accountid = null;
        ServiceDocsAccountGetSingle response = api.v1AccountAccountidDnsrecordPost(accountid);
        // TODO: test validations
    }

    /**
     * Convert Account DNS Record
     *
     * Toggle the realm DNS record between srv and cname.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidDnsrecordPutTest() throws ApiException {
        String accountid = null;
        ServiceUpdateRecordTypeForAccount dnsrecord = null;
        ServiceDocsAccountGetSingle response = api.v1AccountAccountidDnsrecordPut(accountid, dnsrecord);
        // TODO: test validations
    }

    /**
     * Get Account Details
     *
     * This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidGetTest() throws ApiException {
        String accountid = null;
        ServiceDocsAccountGetSingle response = api.v1AccountAccountidGet(accountid);
        // TODO: test validations
    }

    /**
     * Get Account Limits
     *
     * Check the maximum number of inbound, outbound, and two-way trunks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidLimitGetTest() throws ApiException {
        String accountid = null;
        ServiceDocsAccountLimit response = api.v1AccountAccountidLimitGet(accountid);
        // TODO: test validations
    }

    /**
     * Set Account Limits
     *
     * Apply parameters to restrict access to inbound, outbound, and two-way trunks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidLimitPutTest() throws ApiException {
        String accountid = null;
        ServiceVOIPAccountLimit2 limit = null;
        ServiceDocsAccountLimit response = api.v1AccountAccountidLimitPut(accountid, limit);
        // TODO: test validations
    }

    /**
     * Create Sub Account
     *
     * Establish a sub account to enable an administrator within your organization to create accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidPostTest() throws ApiException {
        String accountid = null;
        ServiceVOIPAccountAddData account = null;
        ServiceDocsAccountGetSingle response = api.v1AccountAccountidPost(accountid, account);
        // TODO: test validations
    }

    /**
     * Get Account Provisioning Details
     *
     * Get the provisioning details of an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidProvisioningdetailsGetTest() throws ApiException {
        String accountid = null;
        ServiceDocsAccountProvisioning response = api.v1AccountAccountidProvisioningdetailsGet(accountid);
        // TODO: test validations
    }

    /**
     * Reset the provisioning details password.
     *
     * Reset the existing provisioning details password and set it to a new one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidProvisioningdetailsResetpwPutTest() throws ApiException {
        String accountid = null;
        ServiceDocsAccountProvisioning response = api.v1AccountAccountidProvisioningdetailsResetpwPut(accountid);
        // TODO: test validations
    }

    /**
     * Update Account
     *
     * Modify pertinent account data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountAccountidPutTest() throws ApiException {
        String accountid = null;
        ServiceVOIPAccountEditData account = null;
        ServiceDocsAccountGetSingle response = api.v1AccountAccountidPut(accountid, account);
        // TODO: test validations
    }

    /**
     * Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountApikeyGetTest() throws ApiException {
        ServiceDocsAccountAPIKey response = api.v1AccountApikeyGet();
        // TODO: test validations
    }

    /**
     * Get Account List
     *
     * Retrieve a list of all CPaaS accounts that exist within your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountGetTest() throws ApiException {
        String startKey = null;
        Integer pageSize = null;
        ServiceDocsAccountGetAll response = api.v1AccountGet(startKey, pageSize);
        // TODO: test validations
    }

    /**
     * Create Account
     *
     * Create an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1AccountPostTest() throws ApiException {
        ServiceVOIPAccountAddData account = null;
        ServiceDocsAccountGetSingle response = api.v1AccountPost(account);
        // TODO: test validations
    }

}
